/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ConfigPropertyDto struct for ConfigPropertyDto
type ConfigPropertyDto struct {
	// The property id.
	Id *string `json:"id,omitempty"`
	// The property name.
	Name *string `json:"name"`
	// The property value.
	Value *string `json:"value"`
	// The property description.
	Description *string `json:"description"`
}

// NewConfigPropertyDto instantiates a new ConfigPropertyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPropertyDto(name string, value string, description string) *ConfigPropertyDto {
	this := ConfigPropertyDto{}

	this.Name = &name
	this.Value = &value
	this.Description = &description

	return &this
}

// NewConfigPropertyDtoWithDefaults instantiates a new ConfigPropertyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPropertyDtoWithDefaults() *ConfigPropertyDto {
	this := ConfigPropertyDto{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigPropertyDto) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPropertyDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *ConfigPropertyDto) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *ConfigPropertyDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigPropertyDto) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPropertyDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *ConfigPropertyDto) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *ConfigPropertyDto) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigPropertyDto) GetValue() *string {
	if o == nil {
		return nil
	}

	return o.Value

}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPropertyDto) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Value, true
}

// SetValue sets field value
func (o *ConfigPropertyDto) SetValue(v string) {

	o.Value = &v

}

// HasValue returns a boolean if a field has been set.
func (o *ConfigPropertyDto) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigPropertyDto) GetDescription() *string {
	if o == nil {
		return nil
	}

	return o.Description

}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigPropertyDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Description, true
}

// SetDescription sets field value
func (o *ConfigPropertyDto) SetDescription(v string) {

	o.Description = &v

}

// HasDescription returns a boolean if a field has been set.
func (o *ConfigPropertyDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

func (o ConfigPropertyDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	if o.Description != nil {
		toSerialize["description"] = o.Description
	}

	return json.Marshal(toSerialize)
}

type NullableConfigPropertyDto struct {
	value *ConfigPropertyDto
	isSet bool
}

func (v NullableConfigPropertyDto) Get() *ConfigPropertyDto {
	return v.value
}

func (v *NullableConfigPropertyDto) Set(val *ConfigPropertyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPropertyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPropertyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPropertyDto(val *ConfigPropertyDto) *NullableConfigPropertyDto {
	return &NullableConfigPropertyDto{value: val, isSet: true}
}

func (v NullableConfigPropertyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPropertyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
