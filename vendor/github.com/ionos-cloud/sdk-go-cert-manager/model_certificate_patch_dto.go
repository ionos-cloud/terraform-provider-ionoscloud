/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// CertificatePatchDto Used to patch a certificate's name.
type CertificatePatchDto struct {
	Properties *CertificatePatchPropertiesDto `json:"properties"`
}

// NewCertificatePatchDto instantiates a new CertificatePatchDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatePatchDto(properties CertificatePatchPropertiesDto) *CertificatePatchDto {
	this := CertificatePatchDto{}

	this.Properties = &properties

	return &this
}

// NewCertificatePatchDtoWithDefaults instantiates a new CertificatePatchDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatePatchDtoWithDefaults() *CertificatePatchDto {
	this := CertificatePatchDto{}
	return &this
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for CertificatePatchPropertiesDto will be returned
func (o *CertificatePatchDto) GetProperties() *CertificatePatchPropertiesDto {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificatePatchDto) GetPropertiesOk() (*CertificatePatchPropertiesDto, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *CertificatePatchDto) SetProperties(v CertificatePatchPropertiesDto) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *CertificatePatchDto) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o CertificatePatchDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableCertificatePatchDto struct {
	value *CertificatePatchDto
	isSet bool
}

func (v NullableCertificatePatchDto) Get() *CertificatePatchDto {
	return v.value
}

func (v *NullableCertificatePatchDto) Set(val *CertificatePatchDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatePatchDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatePatchDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatePatchDto(val *CertificatePatchDto) *NullableCertificatePatchDto {
	return &NullableCertificatePatchDto{value: val, isSet: true}
}

func (v NullableCertificatePatchDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatePatchDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
