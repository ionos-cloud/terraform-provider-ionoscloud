/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// CertificateDto The certificate information.
type CertificateDto struct {
	// The certificate ID.
	Id *string `json:"id,omitempty"`
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The URL to the object representation (absolute path).
	Href       *string                   `json:"href,omitempty"`
	Metadata   *ResourceMetadataDto      `json:"metadata,omitempty"`
	Properties *CertificatePropertiesDto `json:"properties,omitempty"`
}

// NewCertificateDto instantiates a new CertificateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDto() *CertificateDto {
	this := CertificateDto{}

	return &this
}

// NewCertificateDtoWithDefaults instantiates a new CertificateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDtoWithDefaults() *CertificateDto {
	this := CertificateDto{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CertificateDto) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *CertificateDto) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *CertificateDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CertificateDto) GetType() *string {
	if o == nil {
		return nil
	}

	return o.Type

}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Type, true
}

// SetType sets field value
func (o *CertificateDto) SetType(v string) {

	o.Type = &v

}

// HasType returns a boolean if a field has been set.
func (o *CertificateDto) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// GetHref returns the Href field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CertificateDto) GetHref() *string {
	if o == nil {
		return nil
	}

	return o.Href

}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDto) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Href, true
}

// SetHref sets field value
func (o *CertificateDto) SetHref(v string) {

	o.Href = &v

}

// HasHref returns a boolean if a field has been set.
func (o *CertificateDto) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for ResourceMetadataDto will be returned
func (o *CertificateDto) GetMetadata() *ResourceMetadataDto {
	if o == nil {
		return nil
	}

	return o.Metadata

}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDto) GetMetadataOk() (*ResourceMetadataDto, bool) {
	if o == nil {
		return nil, false
	}

	return o.Metadata, true
}

// SetMetadata sets field value
func (o *CertificateDto) SetMetadata(v ResourceMetadataDto) {

	o.Metadata = &v

}

// HasMetadata returns a boolean if a field has been set.
func (o *CertificateDto) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for CertificatePropertiesDto will be returned
func (o *CertificateDto) GetProperties() *CertificatePropertiesDto {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDto) GetPropertiesOk() (*CertificatePropertiesDto, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *CertificateDto) SetProperties(v CertificatePropertiesDto) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *CertificateDto) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o CertificateDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	if o.Href != nil {
		toSerialize["href"] = o.Href
	}

	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableCertificateDto struct {
	value *CertificateDto
	isSet bool
}

func (v NullableCertificateDto) Get() *CertificateDto {
	return v.value
}

func (v *NullableCertificateDto) Set(val *CertificateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDto(val *CertificateDto) *NullableCertificateDto {
	return &NullableCertificateDto{value: val, isSet: true}
}

func (v NullableCertificateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
