/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// MetadataWithStatusAllOf struct for MetadataWithStatusAllOf
type MetadataWithStatusAllOf struct {
	// The resource state.
	State *string `json:"state"`
	// A human readable message describing the current state. In case of an error, the message will contain a detailed error message.
	Message *string `json:"message"`
}

// NewMetadataWithStatusAllOf instantiates a new MetadataWithStatusAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataWithStatusAllOf(state string, message string) *MetadataWithStatusAllOf {
	this := MetadataWithStatusAllOf{}

	this.State = &state
	this.Message = &message

	return &this
}

// NewMetadataWithStatusAllOfWithDefaults instantiates a new MetadataWithStatusAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithStatusAllOfWithDefaults() *MetadataWithStatusAllOf {
	this := MetadataWithStatusAllOf{}
	return &this
}

// GetState returns the State field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MetadataWithStatusAllOf) GetState() *string {
	if o == nil {
		return nil
	}

	return o.State

}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataWithStatusAllOf) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.State, true
}

// SetState sets field value
func (o *MetadataWithStatusAllOf) SetState(v string) {

	o.State = &v

}

// HasState returns a boolean if a field has been set.
func (o *MetadataWithStatusAllOf) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MetadataWithStatusAllOf) GetMessage() *string {
	if o == nil {
		return nil
	}

	return o.Message

}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataWithStatusAllOf) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Message, true
}

// SetMessage sets field value
func (o *MetadataWithStatusAllOf) SetMessage(v string) {

	o.Message = &v

}

// HasMessage returns a boolean if a field has been set.
func (o *MetadataWithStatusAllOf) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

func (o MetadataWithStatusAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}

	if o.Message != nil {
		toSerialize["message"] = o.Message
	}

	return json.Marshal(toSerialize)
}

type NullableMetadataWithStatusAllOf struct {
	value *MetadataWithStatusAllOf
	isSet bool
}

func (v NullableMetadataWithStatusAllOf) Get() *MetadataWithStatusAllOf {
	return v.value
}

func (v *NullableMetadataWithStatusAllOf) Set(val *MetadataWithStatusAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataWithStatusAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataWithStatusAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataWithStatusAllOf(val *MetadataWithStatusAllOf) *NullableMetadataWithStatusAllOf {
	return &NullableMetadataWithStatusAllOf{value: val, isSet: true}
}

func (v NullableMetadataWithStatusAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataWithStatusAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
