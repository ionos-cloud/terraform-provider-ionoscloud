/*
 * Container Registry service (CloudAPI)
 *
 * Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their manage Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// PatchRegistryInput struct for PatchRegistryInput
type PatchRegistryInput struct {
	GarbageCollectionSchedule *WeeklySchedule `json:"garbageCollectionSchedule,omitempty"`
	MaintenanceWindow         *WeeklySchedule `json:"maintenanceWindow,omitempty"`
}

// NewPatchRegistryInput instantiates a new PatchRegistryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchRegistryInput() *PatchRegistryInput {
	this := PatchRegistryInput{}

	return &this
}

// NewPatchRegistryInputWithDefaults instantiates a new PatchRegistryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchRegistryInputWithDefaults() *PatchRegistryInput {
	this := PatchRegistryInput{}
	return &this
}

// GetGarbageCollectionSchedule returns the GarbageCollectionSchedule field value
// If the value is explicit nil, the zero value for WeeklySchedule will be returned
func (o *PatchRegistryInput) GetGarbageCollectionSchedule() *WeeklySchedule {
	if o == nil {
		return nil
	}

	return o.GarbageCollectionSchedule

}

// GetGarbageCollectionScheduleOk returns a tuple with the GarbageCollectionSchedule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchRegistryInput) GetGarbageCollectionScheduleOk() (*WeeklySchedule, bool) {
	if o == nil {
		return nil, false
	}

	return o.GarbageCollectionSchedule, true
}

// SetGarbageCollectionSchedule sets field value
func (o *PatchRegistryInput) SetGarbageCollectionSchedule(v WeeklySchedule) {

	o.GarbageCollectionSchedule = &v

}

// HasGarbageCollectionSchedule returns a boolean if a field has been set.
func (o *PatchRegistryInput) HasGarbageCollectionSchedule() bool {
	if o != nil && o.GarbageCollectionSchedule != nil {
		return true
	}

	return false
}

// GetMaintenanceWindow returns the MaintenanceWindow field value
// If the value is explicit nil, the zero value for WeeklySchedule will be returned
func (o *PatchRegistryInput) GetMaintenanceWindow() *WeeklySchedule {
	if o == nil {
		return nil
	}

	return o.MaintenanceWindow

}

// GetMaintenanceWindowOk returns a tuple with the MaintenanceWindow field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchRegistryInput) GetMaintenanceWindowOk() (*WeeklySchedule, bool) {
	if o == nil {
		return nil, false
	}

	return o.MaintenanceWindow, true
}

// SetMaintenanceWindow sets field value
func (o *PatchRegistryInput) SetMaintenanceWindow(v WeeklySchedule) {

	o.MaintenanceWindow = &v

}

// HasMaintenanceWindow returns a boolean if a field has been set.
func (o *PatchRegistryInput) HasMaintenanceWindow() bool {
	if o != nil && o.MaintenanceWindow != nil {
		return true
	}

	return false
}

func (o PatchRegistryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["garbageCollectionSchedule"] = o.GarbageCollectionSchedule

	toSerialize["maintenanceWindow"] = o.MaintenanceWindow

	return json.Marshal(toSerialize)
}

type NullablePatchRegistryInput struct {
	value *PatchRegistryInput
	isSet bool
}

func (v NullablePatchRegistryInput) Get() *PatchRegistryInput {
	return v.value
}

func (v *NullablePatchRegistryInput) Set(val *PatchRegistryInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRegistryInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRegistryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRegistryInput(val *PatchRegistryInput) *NullablePatchRegistryInput {
	return &NullablePatchRegistryInput{value: val, isSet: true}
}

func (v NullablePatchRegistryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRegistryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
