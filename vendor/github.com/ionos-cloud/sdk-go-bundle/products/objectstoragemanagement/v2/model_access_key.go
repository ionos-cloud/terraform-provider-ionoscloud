/*
 * IONOS Cloud - Object Storage Management API
 *
 * Object Storage Management API is a RESTful API that manages the object storage service configuration for IONOS Cloud.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstoragemanagement

import (
	"encoding/json"
)

// checks if the AccessKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKey{}

// AccessKey Per user access key.
type AccessKey struct {
	// Description of the Access key.
	Description string `json:"description"`
	// Access key metadata is a string of 92 characters.
	AccessKey string `json:"accessKey"`
	// The secret key of the Access key.
	SecretKey string `json:"secretKey"`
	// The canonical user ID which is valid for user-owned buckets.
	CanonicalUserId *string `json:"canonicalUserId,omitempty"`
	// The contract user ID which is valid for contract-owned buckets.
	ContractUserId *string `json:"contractUserId,omitempty"`
}

// NewAccessKey instantiates a new AccessKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKey(description string, accessKey string, secretKey string) *AccessKey {
	this := AccessKey{}

	this.Description = description
	this.AccessKey = accessKey
	this.SecretKey = secretKey

	return &this
}

// NewAccessKeyWithDefaults instantiates a new AccessKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyWithDefaults() *AccessKey {
	this := AccessKey{}
	return &this
}

// GetDescription returns the Description field value
func (o *AccessKey) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AccessKey) SetDescription(v string) {
	o.Description = v
}

// GetAccessKey returns the AccessKey field value
func (o *AccessKey) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *AccessKey) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetSecretKey returns the SecretKey field value
func (o *AccessKey) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretKey, true
}

// SetSecretKey sets field value
func (o *AccessKey) SetSecretKey(v string) {
	o.SecretKey = v
}

// GetCanonicalUserId returns the CanonicalUserId field value if set, zero value otherwise.
func (o *AccessKey) GetCanonicalUserId() string {
	if o == nil || IsNil(o.CanonicalUserId) {
		var ret string
		return ret
	}
	return *o.CanonicalUserId
}

// GetCanonicalUserIdOk returns a tuple with the CanonicalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKey) GetCanonicalUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CanonicalUserId) {
		return nil, false
	}
	return o.CanonicalUserId, true
}

// HasCanonicalUserId returns a boolean if a field has been set.
func (o *AccessKey) HasCanonicalUserId() bool {
	if o != nil && !IsNil(o.CanonicalUserId) {
		return true
	}

	return false
}

// SetCanonicalUserId gets a reference to the given string and assigns it to the CanonicalUserId field.
func (o *AccessKey) SetCanonicalUserId(v string) {
	o.CanonicalUserId = &v
}

// GetContractUserId returns the ContractUserId field value if set, zero value otherwise.
func (o *AccessKey) GetContractUserId() string {
	if o == nil || IsNil(o.ContractUserId) {
		var ret string
		return ret
	}
	return *o.ContractUserId
}

// GetContractUserIdOk returns a tuple with the ContractUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKey) GetContractUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractUserId) {
		return nil, false
	}
	return o.ContractUserId, true
}

// HasContractUserId returns a boolean if a field has been set.
func (o *AccessKey) HasContractUserId() bool {
	if o != nil && !IsNil(o.ContractUserId) {
		return true
	}

	return false
}

// SetContractUserId gets a reference to the given string and assigns it to the ContractUserId field.
func (o *AccessKey) SetContractUserId(v string) {
	o.ContractUserId = &v
}

func (o AccessKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["accessKey"] = o.AccessKey
	toSerialize["secretKey"] = o.SecretKey
	if !IsNil(o.CanonicalUserId) {
		toSerialize["canonicalUserId"] = o.CanonicalUserId
	}
	if !IsNil(o.ContractUserId) {
		toSerialize["contractUserId"] = o.ContractUserId
	}
	return toSerialize, nil
}

type NullableAccessKey struct {
	value *AccessKey
	isSet bool
}

func (v NullableAccessKey) Get() *AccessKey {
	return v.value
}

func (v *NullableAccessKey) Set(val *AccessKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKey(val *AccessKey) *NullableAccessKey {
	return &NullableAccessKey{value: val, isSet: true}
}

func (v NullableAccessKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
