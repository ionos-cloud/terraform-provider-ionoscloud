/*
 * IONOS Cloud - Network File Storage API
 *
 * The RESTful API for managing Network File Storage.
 *
 * API version: 0.1.3
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfs

import (
	"encoding/json"
)

// checks if the ShareReadListAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareReadListAllOf{}

// ShareReadListAllOf struct for ShareReadListAllOf
type ShareReadListAllOf struct {
	// The Share identifier (UUID)
	Id string `json:"id"`
	// The resource type
	Type string `json:"type"`
	// The URL of the Share.
	Href string `json:"href"`
	// The list of share resources.
	Items []ShareRead `json:"items,omitempty"`
}

// NewShareReadListAllOf instantiates a new ShareReadListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareReadListAllOf(id string, type_ string, href string) *ShareReadListAllOf {
	this := ShareReadListAllOf{}

	this.Id = id
	this.Type = type_
	this.Href = href

	return &this
}

// NewShareReadListAllOfWithDefaults instantiates a new ShareReadListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareReadListAllOfWithDefaults() *ShareReadListAllOf {
	this := ShareReadListAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *ShareReadListAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ShareReadListAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ShareReadListAllOf) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ShareReadListAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ShareReadListAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ShareReadListAllOf) SetType(v string) {
	o.Type = v
}

// GetHref returns the Href field value
func (o *ShareReadListAllOf) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *ShareReadListAllOf) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *ShareReadListAllOf) SetHref(v string) {
	o.Href = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ShareReadListAllOf) GetItems() []ShareRead {
	if o == nil || IsNil(o.Items) {
		var ret []ShareRead
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReadListAllOf) GetItemsOk() ([]ShareRead, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ShareReadListAllOf) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ShareRead and assigns it to the Items field.
func (o *ShareReadListAllOf) SetItems(v []ShareRead) {
	o.Items = v
}

func (o ShareReadListAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["href"] = o.Href
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableShareReadListAllOf struct {
	value *ShareReadListAllOf
	isSet bool
}

func (v NullableShareReadListAllOf) Get() *ShareReadListAllOf {
	return v.value
}

func (v *NullableShareReadListAllOf) Set(val *ShareReadListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableShareReadListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableShareReadListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareReadListAllOf(val *ShareReadListAllOf) *NullableShareReadListAllOf {
	return &NullableShareReadListAllOf{value: val, isSet: true}
}

func (v NullableShareReadListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareReadListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
