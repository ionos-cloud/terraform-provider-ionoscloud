/*
 * IONOS Cloud - Network File Storage API
 *
 * The RESTful API for managing Network File Storage.
 *
 * API version: 0.1.3
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfs

import (
	"encoding/json"
)

// checks if the ShareClientGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareClientGroups{}

// ShareClientGroups struct for ShareClientGroups
type ShareClientGroups struct {
	// Optional description for the clients groups.
	Description *string               `json:"description,omitempty"`
	IpNetworks  []string              `json:"ipNetworks,omitempty"`
	Hosts       []string              `json:"hosts,omitempty"`
	Nfs         *ShareClientGroupsNfs `json:"nfs,omitempty"`
}

// NewShareClientGroups instantiates a new ShareClientGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareClientGroups() *ShareClientGroups {
	this := ShareClientGroups{}

	return &this
}

// NewShareClientGroupsWithDefaults instantiates a new ShareClientGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareClientGroupsWithDefaults() *ShareClientGroups {
	this := ShareClientGroups{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ShareClientGroups) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareClientGroups) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ShareClientGroups) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ShareClientGroups) SetDescription(v string) {
	o.Description = &v
}

// GetIpNetworks returns the IpNetworks field value if set, zero value otherwise.
func (o *ShareClientGroups) GetIpNetworks() []string {
	if o == nil || IsNil(o.IpNetworks) {
		var ret []string
		return ret
	}
	return o.IpNetworks
}

// GetIpNetworksOk returns a tuple with the IpNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareClientGroups) GetIpNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.IpNetworks) {
		return nil, false
	}
	return o.IpNetworks, true
}

// HasIpNetworks returns a boolean if a field has been set.
func (o *ShareClientGroups) HasIpNetworks() bool {
	if o != nil && !IsNil(o.IpNetworks) {
		return true
	}

	return false
}

// SetIpNetworks gets a reference to the given []string and assigns it to the IpNetworks field.
func (o *ShareClientGroups) SetIpNetworks(v []string) {
	o.IpNetworks = v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *ShareClientGroups) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareClientGroups) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *ShareClientGroups) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *ShareClientGroups) SetHosts(v []string) {
	o.Hosts = v
}

// GetNfs returns the Nfs field value if set, zero value otherwise.
func (o *ShareClientGroups) GetNfs() ShareClientGroupsNfs {
	if o == nil || IsNil(o.Nfs) {
		var ret ShareClientGroupsNfs
		return ret
	}
	return *o.Nfs
}

// GetNfsOk returns a tuple with the Nfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareClientGroups) GetNfsOk() (*ShareClientGroupsNfs, bool) {
	if o == nil || IsNil(o.Nfs) {
		return nil, false
	}
	return o.Nfs, true
}

// HasNfs returns a boolean if a field has been set.
func (o *ShareClientGroups) HasNfs() bool {
	if o != nil && !IsNil(o.Nfs) {
		return true
	}

	return false
}

// SetNfs gets a reference to the given ShareClientGroupsNfs and assigns it to the Nfs field.
func (o *ShareClientGroups) SetNfs(v ShareClientGroupsNfs) {
	o.Nfs = &v
}

func (o ShareClientGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IpNetworks) {
		toSerialize["ipNetworks"] = o.IpNetworks
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Nfs) {
		toSerialize["nfs"] = o.Nfs
	}
	return toSerialize, nil
}

type NullableShareClientGroups struct {
	value *ShareClientGroups
	isSet bool
}

func (v NullableShareClientGroups) Get() *ShareClientGroups {
	return v.value
}

func (v *NullableShareClientGroups) Set(val *ShareClientGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableShareClientGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableShareClientGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareClientGroups(val *ShareClientGroups) *NullableShareClientGroups {
	return &NullableShareClientGroups{value: val, isSet: true}
}

func (v NullableShareClientGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareClientGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
