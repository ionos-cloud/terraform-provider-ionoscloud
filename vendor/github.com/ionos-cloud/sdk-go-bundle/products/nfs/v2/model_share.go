/*
 * IONOS Cloud - Network File Storage API
 *
 * The RESTful API for managing Network File Storage.
 *
 * API version: 0.1.3
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfs

import (
	"encoding/json"
)

// checks if the Share type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Share{}

// Share A share represents a directory on a Network File Storage cluster. Options like quotas might be set for this directory.
type Share struct {
	// The directory being exported
	Name string `json:"name"`
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
	Quota *int32 `json:"quota,omitempty"`
	// The group ID that will own the exported directory and be used as anongid in squash modes root-anonymous and all-anonymous.
	Gid *int32 `json:"gid,omitempty"`
	// The user ID that will own the exported directory and be used as anonuid in squash modes root-anonymous and all-anonymous.
	Uid *int32 `json:"uid,omitempty"`
	// The groups of clients are the systems connecting to the Network File Storage cluster.
	ClientGroups []ShareClientGroups `json:"clientGroups"`
}

// NewShare instantiates a new Share object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShare(name string, clientGroups []ShareClientGroups) *Share {
	this := Share{}

	this.Name = name
	var quota int32 = 0
	this.Quota = &quota
	var gid int32 = 65534
	this.Gid = &gid
	var uid int32 = 65534
	this.Uid = &uid
	this.ClientGroups = clientGroups

	return &this
}

// NewShareWithDefaults instantiates a new Share object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareWithDefaults() *Share {
	this := Share{}
	var quota int32 = 0
	this.Quota = &quota
	var gid int32 = 65534
	this.Gid = &gid
	var uid int32 = 65534
	this.Uid = &uid
	return &this
}

// GetName returns the Name field value
func (o *Share) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Share) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Share) SetName(v string) {
	o.Name = v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *Share) GetQuota() int32 {
	if o == nil || IsNil(o.Quota) {
		var ret int32
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetQuotaOk() (*int32, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *Share) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given int32 and assigns it to the Quota field.
func (o *Share) SetQuota(v int32) {
	o.Quota = &v
}

// GetGid returns the Gid field value if set, zero value otherwise.
func (o *Share) GetGid() int32 {
	if o == nil || IsNil(o.Gid) {
		var ret int32
		return ret
	}
	return *o.Gid
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetGidOk() (*int32, bool) {
	if o == nil || IsNil(o.Gid) {
		return nil, false
	}
	return o.Gid, true
}

// HasGid returns a boolean if a field has been set.
func (o *Share) HasGid() bool {
	if o != nil && !IsNil(o.Gid) {
		return true
	}

	return false
}

// SetGid gets a reference to the given int32 and assigns it to the Gid field.
func (o *Share) SetGid(v int32) {
	o.Gid = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Share) GetUid() int32 {
	if o == nil || IsNil(o.Uid) {
		var ret int32
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetUidOk() (*int32, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Share) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given int32 and assigns it to the Uid field.
func (o *Share) SetUid(v int32) {
	o.Uid = &v
}

// GetClientGroups returns the ClientGroups field value
func (o *Share) GetClientGroups() []ShareClientGroups {
	if o == nil {
		var ret []ShareClientGroups
		return ret
	}

	return o.ClientGroups
}

// GetClientGroupsOk returns a tuple with the ClientGroups field value
// and a boolean to check if the value has been set.
func (o *Share) GetClientGroupsOk() ([]ShareClientGroups, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientGroups, true
}

// SetClientGroups sets field value
func (o *Share) SetClientGroups(v []ShareClientGroups) {
	o.ClientGroups = v
}

func (o Share) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.Gid) {
		toSerialize["gid"] = o.Gid
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["clientGroups"] = o.ClientGroups
	return toSerialize, nil
}

type NullableShare struct {
	value *Share
	isSet bool
}

func (v NullableShare) Get() *Share {
	return v.value
}

func (v *NullableShare) Set(val *Share) {
	v.value = val
	v.isSet = true
}

func (v NullableShare) IsSet() bool {
	return v.isSet
}

func (v *NullableShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShare(val *Share) *NullableShare {
	return &NullableShare{value: val, isSet: true}
}

func (v NullableShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
