/*
 * IONOS Cloud - Network File Storage API
 *
 * The RESTful API for managing Network File Storage.
 *
 * API version: 0.1.3
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfs

import (
	"encoding/json"
)

// checks if the ShareEnsure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareEnsure{}

// ShareEnsure struct for ShareEnsure
type ShareEnsure struct {
	// The share identifier (UUID).
	Id string `json:"id"`
	// Metadata
	Metadata   map[string]interface{} `json:"metadata,omitempty"`
	Properties Share                  `json:"properties"`
}

// NewShareEnsure instantiates a new ShareEnsure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareEnsure(id string, properties Share) *ShareEnsure {
	this := ShareEnsure{}

	this.Id = id
	this.Properties = properties

	return &this
}

// NewShareEnsureWithDefaults instantiates a new ShareEnsure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareEnsureWithDefaults() *ShareEnsure {
	this := ShareEnsure{}
	return &this
}

// GetId returns the Id field value
func (o *ShareEnsure) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ShareEnsure) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ShareEnsure) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ShareEnsure) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareEnsure) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ShareEnsure) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ShareEnsure) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetProperties returns the Properties field value
func (o *ShareEnsure) GetProperties() Share {
	if o == nil {
		var ret Share
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ShareEnsure) GetPropertiesOk() (*Share, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ShareEnsure) SetProperties(v Share) {
	o.Properties = v
}

func (o ShareEnsure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableShareEnsure struct {
	value *ShareEnsure
	isSet bool
}

func (v NullableShareEnsure) Get() *ShareEnsure {
	return v.value
}

func (v *NullableShareEnsure) Set(val *ShareEnsure) {
	v.value = val
	v.isSet = true
}

func (v NullableShareEnsure) IsSet() bool {
	return v.isSet
}

func (v *NullableShareEnsure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareEnsure(val *ShareEnsure) *NullableShareEnsure {
	return &NullableShareEnsure{value: val, isSet: true}
}

func (v NullableShareEnsure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareEnsure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
