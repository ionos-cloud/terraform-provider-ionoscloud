/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature ### 1.2.0  - Added registry `apiSubnetAllowList` ### 1.2.1  - Amended `apiSubnetAllowList` Regex
 *
 * API version: 1.2.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerregistry

import (
	"encoding/json"
)

// checks if the Purl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Purl{}

// Purl struct for Purl
type Purl struct {
	// The affected package type
	Type string `json:"type"`
	// The affected package name
	Name string `json:"name"`
	// The affected package version
	Version string `json:"version"`
}

// NewPurl instantiates a new Purl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurl(type_ string, name string, version string) *Purl {
	this := Purl{}

	this.Type = type_
	this.Name = name
	this.Version = version

	return &this
}

// NewPurlWithDefaults instantiates a new Purl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurlWithDefaults() *Purl {
	this := Purl{}
	return &this
}

// GetType returns the Type field value
func (o *Purl) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Purl) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Purl) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *Purl) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Purl) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Purl) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *Purl) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Purl) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Purl) SetVersion(v string) {
	o.Version = v
}

func (o Purl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullablePurl struct {
	value *Purl
	isSet bool
}

func (v NullablePurl) Get() *Purl {
	return v.value
}

func (v *NullablePurl) Set(val *Purl) {
	v.value = val
	v.isSet = true
}

func (v NullablePurl) IsSet() bool {
	return v.isSet
}

func (v *NullablePurl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurl(val *Purl) *NullablePurl {
	return &NullablePurl{value: val, isSet: true}
}

func (v NullablePurl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
