/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature ### 1.2.0  - Added registry `apiSubnetAllowList` ### 1.2.1  - Amended `apiSubnetAllowList` Regex
 *
 * API version: 1.2.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerregistry

import (
	"encoding/json"

	"time"
)

// checks if the StorageUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageUsage{}

// StorageUsage struct for StorageUsage
type StorageUsage struct {
	Bytes     int64      `json:"bytes"`
	UpdatedAt *IonosTime `json:"updatedAt,omitempty"`
}

// NewStorageUsage instantiates a new StorageUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageUsage(bytes int64) *StorageUsage {
	this := StorageUsage{}

	this.Bytes = bytes

	return &this
}

// NewStorageUsageWithDefaults instantiates a new StorageUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageUsageWithDefaults() *StorageUsage {
	this := StorageUsage{}
	return &this
}

// GetBytes returns the Bytes field value
func (o *StorageUsage) GetBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *StorageUsage) GetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *StorageUsage) SetBytes(v int64) {
	o.Bytes = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *StorageUsage) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return o.UpdatedAt.Time
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageUsage) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return &o.UpdatedAt.Time, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *StorageUsage) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *StorageUsage) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &IonosTime{v}
}

func (o StorageUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableStorageUsage struct {
	value *StorageUsage
	isSet bool
}

func (v NullableStorageUsage) Get() *StorageUsage {
	return v.value
}

func (v *NullableStorageUsage) Set(val *StorageUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageUsage(val *StorageUsage) *NullableStorageUsage {
	return &NullableStorageUsage{value: val, isSet: true}
}

func (v NullableStorageUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
