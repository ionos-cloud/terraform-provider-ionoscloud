/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature ### 1.2.0  - Added registry `apiSubnetAllowList` ### 1.2.1  - Amended `apiSubnetAllowList` Regex
 *
 * API version: 1.2.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerregistry

import (
	"encoding/json"

	"time"
)

// checks if the TokenProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenProperties{}

// TokenProperties struct for TokenProperties
type TokenProperties struct {
	Credentials Credentials        `json:"credentials"`
	ExpiryDate  *NullableIonosTime `json:"expiryDate,omitempty"`
	Name        string             `json:"name"`
	Scopes      []Scope            `json:"scopes,omitempty"`
	Status      *string            `json:"status,omitempty"`
}

// NewTokenProperties instantiates a new TokenProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenProperties(credentials Credentials, name string) *TokenProperties {
	this := TokenProperties{}

	this.Credentials = credentials
	this.Name = name

	return &this
}

// NewTokenPropertiesWithDefaults instantiates a new TokenProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPropertiesWithDefaults() *TokenProperties {
	this := TokenProperties{}
	return &this
}

// GetCredentials returns the Credentials field value
func (o *TokenProperties) GetCredentials() Credentials {
	if o == nil {
		var ret Credentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *TokenProperties) GetCredentialsOk() (*Credentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *TokenProperties) SetCredentials(v Credentials) {
	o.Credentials = v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenProperties) GetExpiryDate() time.Time {
	if o == nil || IsNil(o.ExpiryDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate.Get()
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenProperties) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryDate.Get(), o.ExpiryDate.IsSet()
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *TokenProperties) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate.IsSet() {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given NullableTime and assigns it to the ExpiryDate field.
func (o *TokenProperties) SetExpiryDate(v time.Time) {
	o.ExpiryDate.Set(&v)
}

// SetExpiryDateNil sets the value for ExpiryDate to be an explicit nil
func (o *TokenProperties) SetExpiryDateNil() {
	o.ExpiryDate.Set(nil)
}

// UnsetExpiryDate ensures that no value is present for ExpiryDate, not even an explicit nil
func (o *TokenProperties) UnsetExpiryDate() {
	o.ExpiryDate.Unset()
}

// GetName returns the Name field value
func (o *TokenProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenProperties) SetName(v string) {
	o.Name = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *TokenProperties) GetScopes() []Scope {
	if o == nil || IsNil(o.Scopes) {
		var ret []Scope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenProperties) GetScopesOk() ([]Scope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *TokenProperties) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []Scope and assigns it to the Scopes field.
func (o *TokenProperties) SetScopes(v []Scope) {
	o.Scopes = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TokenProperties) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenProperties) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TokenProperties) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TokenProperties) SetStatus(v string) {
	o.Status = &v
}

func (o TokenProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentials"] = o.Credentials
	if o.ExpiryDate != nil && o.ExpiryDate.IsSet() {
		toSerialize["expiryDate"] = o.ExpiryDate.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableTokenProperties struct {
	value *TokenProperties
	isSet bool
}

func (v NullableTokenProperties) Get() *TokenProperties {
	return v.value
}

func (v *NullableTokenProperties) Set(val *TokenProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenProperties(val *TokenProperties) *NullableTokenProperties {
	return &NullableTokenProperties{value: val, isSet: true}
}

func (v NullableTokenProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
