/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature ### 1.2.0  - Added registry `apiSubnetAllowList` ### 1.2.1  - Amended `apiSubnetAllowList` Regex
 *
 * API version: 1.2.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package containerregistry

import (
	"encoding/json"
)

// checks if the VulnerabilityDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityDataSource{}

// VulnerabilityDataSource The source that published the vulnerability.
type VulnerabilityDataSource struct {
	// The id of the source.
	Id *string `json:"id,omitempty"`
	// The URL of the source.
	Url *string `json:"url,omitempty"`
}

// NewVulnerabilityDataSource instantiates a new VulnerabilityDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityDataSource() *VulnerabilityDataSource {
	this := VulnerabilityDataSource{}

	return &this
}

// NewVulnerabilityDataSourceWithDefaults instantiates a new VulnerabilityDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityDataSourceWithDefaults() *VulnerabilityDataSource {
	this := VulnerabilityDataSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VulnerabilityDataSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityDataSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VulnerabilityDataSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VulnerabilityDataSource) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *VulnerabilityDataSource) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityDataSource) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *VulnerabilityDataSource) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *VulnerabilityDataSource) SetUrl(v string) {
	o.Url = &v
}

func (o VulnerabilityDataSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableVulnerabilityDataSource struct {
	value *VulnerabilityDataSource
	isSet bool
}

func (v NullableVulnerabilityDataSource) Get() *VulnerabilityDataSource {
	return v.value
}

func (v *NullableVulnerabilityDataSource) Set(val *VulnerabilityDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityDataSource(val *VulnerabilityDataSource) *NullableVulnerabilityDataSource {
	return &NullableVulnerabilityDataSource{value: val, isSet: true}
}

func (v NullableVulnerabilityDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
