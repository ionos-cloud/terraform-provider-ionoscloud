/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the CentralLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralLogging{}

// CentralLogging Central logging is a feature that allows you to use other products to send logs to a central location. This is useful for logging and analyzing logs from multiple sources.
type CentralLogging struct {
	// The status of the central logging. If `true`, the central logging is enabled. If `false`, the central logging is disabled.
	Enabled bool `json:"enabled"`
}

// NewCentralLogging instantiates a new CentralLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralLogging(enabled bool) *CentralLogging {
	this := CentralLogging{}

	this.Enabled = enabled

	return &this
}

// NewCentralLoggingWithDefaults instantiates a new CentralLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralLoggingWithDefaults() *CentralLogging {
	this := CentralLogging{}
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *CentralLogging) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CentralLogging) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CentralLogging) SetEnabled(v bool) {
	o.Enabled = v
}

func (o CentralLogging) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableCentralLogging struct {
	value *CentralLogging
	isSet bool
}

func (v NullableCentralLogging) Get() *CentralLogging {
	return v.value
}

func (v *NullableCentralLogging) Set(val *CentralLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralLogging(val *CentralLogging) *NullableCentralLogging {
	return &NullableCentralLogging{value: val, isSet: true}
}

func (v NullableCentralLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
