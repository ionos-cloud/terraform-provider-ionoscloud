/*
 * IONOS Logging REST API
 *
 * Logging as a Service (LaaS) is a service that provides a centralized logging system where users are able to push and aggregate their system or application logs. This service also provides a visualization platform where users are able to observe, search and filter the logs and also create dashboards and alerts for their data points. This service can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an API. The API allows you to create logging pipelines or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the PipelineResponseAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineResponseAllOf{}

// PipelineResponseAllOf struct for PipelineResponseAllOf
type PipelineResponseAllOf struct {
	Public *bool `json:"public,omitempty"`
}

// NewPipelineResponseAllOf instantiates a new PipelineResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineResponseAllOf() *PipelineResponseAllOf {
	this := PipelineResponseAllOf{}

	return &this
}

// NewPipelineResponseAllOfWithDefaults instantiates a new PipelineResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineResponseAllOfWithDefaults() *PipelineResponseAllOf {
	this := PipelineResponseAllOf{}
	return &this
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *PipelineResponseAllOf) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineResponseAllOf) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *PipelineResponseAllOf) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *PipelineResponseAllOf) SetPublic(v bool) {
	o.Public = &v
}

func (o PipelineResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineResponseAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	return toSerialize, nil
}

type NullablePipelineResponseAllOf struct {
	value *PipelineResponseAllOf
	isSet bool
}

func (v NullablePipelineResponseAllOf) Get() *PipelineResponseAllOf {
	return v.value
}

func (v *NullablePipelineResponseAllOf) Set(val *PipelineResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineResponseAllOf(val *PipelineResponseAllOf) *NullablePipelineResponseAllOf {
	return &NullablePipelineResponseAllOf{value: val, isSet: true}
}

func (v NullablePipelineResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
