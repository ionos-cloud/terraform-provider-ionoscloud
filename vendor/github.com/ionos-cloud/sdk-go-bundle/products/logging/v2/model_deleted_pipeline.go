/*
 * IONOS Logging REST API
 *
 * The logging service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data.  This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the DeletedPipeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedPipeline{}

// DeletedPipeline pipeline response
type DeletedPipeline struct {
	// The unique ID of the resource.
	Id         *string             `json:"id,omitempty"`
	Metadata   *DeletedMetadata    `json:"metadata,omitempty"`
	Properties *PipelineProperties `json:"properties,omitempty"`
}

// NewDeletedPipeline instantiates a new DeletedPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedPipeline() *DeletedPipeline {
	this := DeletedPipeline{}

	return &this
}

// NewDeletedPipelineWithDefaults instantiates a new DeletedPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedPipelineWithDefaults() *DeletedPipeline {
	this := DeletedPipeline{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeletedPipeline) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedPipeline) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeletedPipeline) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeletedPipeline) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DeletedPipeline) GetMetadata() DeletedMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret DeletedMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedPipeline) GetMetadataOk() (*DeletedMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DeletedPipeline) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given DeletedMetadata and assigns it to the Metadata field.
func (o *DeletedPipeline) SetMetadata(v DeletedMetadata) {
	o.Metadata = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DeletedPipeline) GetProperties() PipelineProperties {
	if o == nil || IsNil(o.Properties) {
		var ret PipelineProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedPipeline) GetPropertiesOk() (*PipelineProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DeletedPipeline) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given PipelineProperties and assigns it to the Properties field.
func (o *DeletedPipeline) SetProperties(v PipelineProperties) {
	o.Properties = &v
}

func (o DeletedPipeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableDeletedPipeline struct {
	value *DeletedPipeline
	isSet bool
}

func (v NullableDeletedPipeline) Get() *DeletedPipeline {
	return v.value
}

func (v *NullableDeletedPipeline) Set(val *DeletedPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedPipeline(val *DeletedPipeline) *NullableDeletedPipeline {
	return &NullableDeletedPipeline{value: val, isSet: true}
}

func (v NullableDeletedPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
