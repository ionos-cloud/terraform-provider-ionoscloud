/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the MetadataWithStatusAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataWithStatusAllOf{}

// MetadataWithStatusAllOf struct for MetadataWithStatusAllOf
type MetadataWithStatusAllOf struct {
	// The status of the object. The status can be: * `AVAILABLE` - resource exists and is healthy. * `PROVISIONING` - resource is being created or updated. * `DESTROYING` - delete command was issued, the resource is being deleted. * `FAILED` - resource failed, details in `failureMessage`.
	State string `json:"state"`
}

// NewMetadataWithStatusAllOf instantiates a new MetadataWithStatusAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataWithStatusAllOf(state string) *MetadataWithStatusAllOf {
	this := MetadataWithStatusAllOf{}

	this.State = state

	return &this
}

// NewMetadataWithStatusAllOfWithDefaults instantiates a new MetadataWithStatusAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithStatusAllOfWithDefaults() *MetadataWithStatusAllOf {
	this := MetadataWithStatusAllOf{}
	return &this
}

// GetState returns the State field value
func (o *MetadataWithStatusAllOf) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MetadataWithStatusAllOf) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MetadataWithStatusAllOf) SetState(v string) {
	o.State = v
}

func (o MetadataWithStatusAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataWithStatusAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	return toSerialize, nil
}

type NullableMetadataWithStatusAllOf struct {
	value *MetadataWithStatusAllOf
	isSet bool
}

func (v NullableMetadataWithStatusAllOf) Get() *MetadataWithStatusAllOf {
	return v.value
}

func (v *NullableMetadataWithStatusAllOf) Set(val *MetadataWithStatusAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataWithStatusAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataWithStatusAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataWithStatusAllOf(val *MetadataWithStatusAllOf) *NullableMetadataWithStatusAllOf {
	return &NullableMetadataWithStatusAllOf{value: val, isSet: true}
}

func (v NullableMetadataWithStatusAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataWithStatusAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
