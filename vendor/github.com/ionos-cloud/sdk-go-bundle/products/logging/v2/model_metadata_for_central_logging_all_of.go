/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the MetadataForCentralLoggingAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataForCentralLoggingAllOf{}

// MetadataForCentralLoggingAllOf struct for MetadataForCentralLoggingAllOf
type MetadataForCentralLoggingAllOf struct {
	// The endpoint of the Grafana instance.
	GrafanaEndpoint string `json:"grafanaEndpoint"`
}

// NewMetadataForCentralLoggingAllOf instantiates a new MetadataForCentralLoggingAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataForCentralLoggingAllOf(grafanaEndpoint string) *MetadataForCentralLoggingAllOf {
	this := MetadataForCentralLoggingAllOf{}

	this.GrafanaEndpoint = grafanaEndpoint

	return &this
}

// NewMetadataForCentralLoggingAllOfWithDefaults instantiates a new MetadataForCentralLoggingAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataForCentralLoggingAllOfWithDefaults() *MetadataForCentralLoggingAllOf {
	this := MetadataForCentralLoggingAllOf{}
	return &this
}

// GetGrafanaEndpoint returns the GrafanaEndpoint field value
func (o *MetadataForCentralLoggingAllOf) GetGrafanaEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrafanaEndpoint
}

// GetGrafanaEndpointOk returns a tuple with the GrafanaEndpoint field value
// and a boolean to check if the value has been set.
func (o *MetadataForCentralLoggingAllOf) GetGrafanaEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrafanaEndpoint, true
}

// SetGrafanaEndpoint sets field value
func (o *MetadataForCentralLoggingAllOf) SetGrafanaEndpoint(v string) {
	o.GrafanaEndpoint = v
}

func (o MetadataForCentralLoggingAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataForCentralLoggingAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grafanaEndpoint"] = o.GrafanaEndpoint
	return toSerialize, nil
}

type NullableMetadataForCentralLoggingAllOf struct {
	value *MetadataForCentralLoggingAllOf
	isSet bool
}

func (v NullableMetadataForCentralLoggingAllOf) Get() *MetadataForCentralLoggingAllOf {
	return v.value
}

func (v *NullableMetadataForCentralLoggingAllOf) Set(val *MetadataForCentralLoggingAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataForCentralLoggingAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataForCentralLoggingAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataForCentralLoggingAllOf(val *MetadataForCentralLoggingAllOf) *NullableMetadataForCentralLoggingAllOf {
	return &NullableMetadataForCentralLoggingAllOf{value: val, isSet: true}
}

func (v NullableMetadataForCentralLoggingAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataForCentralLoggingAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
