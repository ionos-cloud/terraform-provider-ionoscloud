/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the CentralLoggingRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralLoggingRead{}

// CentralLoggingRead struct for CentralLoggingRead
type CentralLoggingRead struct {
	// The ID (UUID) of the CentralLogging.
	Id string `json:"id"`
	// The type of the resource.
	Type string `json:"type"`
	// The URL of the CentralLogging.
	Href       string                    `json:"href"`
	Metadata   MetadataForCentralLogging `json:"metadata"`
	Properties CentralLogging            `json:"properties"`
}

// NewCentralLoggingRead instantiates a new CentralLoggingRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralLoggingRead(id string, type_ string, href string, metadata MetadataForCentralLogging, properties CentralLogging) *CentralLoggingRead {
	this := CentralLoggingRead{}

	this.Id = id
	this.Type = type_
	this.Href = href
	this.Metadata = metadata
	this.Properties = properties

	return &this
}

// NewCentralLoggingReadWithDefaults instantiates a new CentralLoggingRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralLoggingReadWithDefaults() *CentralLoggingRead {
	this := CentralLoggingRead{}
	return &this
}

// GetId returns the Id field value
func (o *CentralLoggingRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CentralLoggingRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CentralLoggingRead) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *CentralLoggingRead) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CentralLoggingRead) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CentralLoggingRead) SetType(v string) {
	o.Type = v
}

// GetHref returns the Href field value
func (o *CentralLoggingRead) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *CentralLoggingRead) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *CentralLoggingRead) SetHref(v string) {
	o.Href = v
}

// GetMetadata returns the Metadata field value
func (o *CentralLoggingRead) GetMetadata() MetadataForCentralLogging {
	if o == nil {
		var ret MetadataForCentralLogging
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CentralLoggingRead) GetMetadataOk() (*MetadataForCentralLogging, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CentralLoggingRead) SetMetadata(v MetadataForCentralLogging) {
	o.Metadata = v
}

// GetProperties returns the Properties field value
func (o *CentralLoggingRead) GetProperties() CentralLogging {
	if o == nil {
		var ret CentralLogging
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *CentralLoggingRead) GetPropertiesOk() (*CentralLogging, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *CentralLoggingRead) SetProperties(v CentralLogging) {
	o.Properties = v
}

func (o CentralLoggingRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralLoggingRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["href"] = o.Href
	toSerialize["metadata"] = o.Metadata
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableCentralLoggingRead struct {
	value *CentralLoggingRead
	isSet bool
}

func (v NullableCentralLoggingRead) Get() *CentralLoggingRead {
	return v.value
}

func (v *NullableCentralLoggingRead) Set(val *CentralLoggingRead) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralLoggingRead) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralLoggingRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralLoggingRead(val *CentralLoggingRead) *NullableCentralLoggingRead {
	return &NullableCentralLoggingRead{value: val, isSet: true}
}

func (v NullableCentralLoggingRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralLoggingRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
