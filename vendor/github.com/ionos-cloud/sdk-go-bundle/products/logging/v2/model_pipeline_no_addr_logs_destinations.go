/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the PipelineNoAddrLogsDestinations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineNoAddrLogsDestinations{}

// PipelineNoAddrLogsDestinations struct for PipelineNoAddrLogsDestinations
type PipelineNoAddrLogsDestinations struct {
	// The type of the destination. Could be one of the following: `loki`.
	Type string `json:"type"`
	// The retention period of the logs in days. Could be one of the following: 0, 7, 14, 30.
	RetentionInDays int32 `json:"retentionInDays"`
}

// NewPipelineNoAddrLogsDestinations instantiates a new PipelineNoAddrLogsDestinations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineNoAddrLogsDestinations(type_ string, retentionInDays int32) *PipelineNoAddrLogsDestinations {
	this := PipelineNoAddrLogsDestinations{}

	this.Type = type_
	this.RetentionInDays = retentionInDays

	return &this
}

// NewPipelineNoAddrLogsDestinationsWithDefaults instantiates a new PipelineNoAddrLogsDestinations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineNoAddrLogsDestinationsWithDefaults() *PipelineNoAddrLogsDestinations {
	this := PipelineNoAddrLogsDestinations{}
	return &this
}

// GetType returns the Type field value
func (o *PipelineNoAddrLogsDestinations) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PipelineNoAddrLogsDestinations) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PipelineNoAddrLogsDestinations) SetType(v string) {
	o.Type = v
}

// GetRetentionInDays returns the RetentionInDays field value
func (o *PipelineNoAddrLogsDestinations) GetRetentionInDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetentionInDays
}

// GetRetentionInDaysOk returns a tuple with the RetentionInDays field value
// and a boolean to check if the value has been set.
func (o *PipelineNoAddrLogsDestinations) GetRetentionInDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionInDays, true
}

// SetRetentionInDays sets field value
func (o *PipelineNoAddrLogsDestinations) SetRetentionInDays(v int32) {
	o.RetentionInDays = v
}

func (o PipelineNoAddrLogsDestinations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineNoAddrLogsDestinations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["retentionInDays"] = o.RetentionInDays
	return toSerialize, nil
}

type NullablePipelineNoAddrLogsDestinations struct {
	value *PipelineNoAddrLogsDestinations
	isSet bool
}

func (v NullablePipelineNoAddrLogsDestinations) Get() *PipelineNoAddrLogsDestinations {
	return v.value
}

func (v *NullablePipelineNoAddrLogsDestinations) Set(val *PipelineNoAddrLogsDestinations) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineNoAddrLogsDestinations) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineNoAddrLogsDestinations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineNoAddrLogsDestinations(val *PipelineNoAddrLogsDestinations) *NullablePipelineNoAddrLogsDestinations {
	return &NullablePipelineNoAddrLogsDestinations{value: val, isSet: true}
}

func (v NullablePipelineNoAddrLogsDestinations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineNoAddrLogsDestinations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
