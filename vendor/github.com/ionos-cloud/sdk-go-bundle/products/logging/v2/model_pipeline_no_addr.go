/*
 * IONOS Logging Service REST API
 *
 * The Logging Service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data. This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logging

import (
	"encoding/json"
)

// checks if the PipelineNoAddr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineNoAddr{}

// PipelineNoAddr A pipeline consists of the building blocks of a centralized logging system including supported log agents and log sources and also public endpoints to push and access logs.
type PipelineNoAddr struct {
	// The name of the pipeline. Must be not more that 20 characters long.
	Name string               `json:"name"`
	Logs []PipelineNoAddrLogs `json:"logs,omitempty"`
}

// NewPipelineNoAddr instantiates a new PipelineNoAddr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineNoAddr(name string) *PipelineNoAddr {
	this := PipelineNoAddr{}

	this.Name = name

	return &this
}

// NewPipelineNoAddrWithDefaults instantiates a new PipelineNoAddr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineNoAddrWithDefaults() *PipelineNoAddr {
	this := PipelineNoAddr{}
	return &this
}

// GetName returns the Name field value
func (o *PipelineNoAddr) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PipelineNoAddr) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PipelineNoAddr) SetName(v string) {
	o.Name = v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *PipelineNoAddr) GetLogs() []PipelineNoAddrLogs {
	if o == nil || IsNil(o.Logs) {
		var ret []PipelineNoAddrLogs
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineNoAddr) GetLogsOk() ([]PipelineNoAddrLogs, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *PipelineNoAddr) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []PipelineNoAddrLogs and assigns it to the Logs field.
func (o *PipelineNoAddr) SetLogs(v []PipelineNoAddrLogs) {
	o.Logs = v
}

func (o PipelineNoAddr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineNoAddr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullablePipelineNoAddr struct {
	value *PipelineNoAddr
	isSet bool
}

func (v NullablePipelineNoAddr) Get() *PipelineNoAddr {
	return v.value
}

func (v *NullablePipelineNoAddr) Set(val *PipelineNoAddr) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineNoAddr) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineNoAddr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineNoAddr(val *PipelineNoAddr) *NullablePipelineNoAddr {
	return &NullablePipelineNoAddr{value: val, isSet: true}
}

func (v NullablePipelineNoAddr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineNoAddr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
