/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cert

import (
	"encoding/json"

	"time"
)

// checks if the MetadataWithCertificateInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataWithCertificateInformation{}

// MetadataWithCertificateInformation struct for MetadataWithCertificateInformation
type MetadataWithCertificateInformation struct {
	// The ISO 8601 creation timestamp.
	CreatedDate *IonosTime `json:"createdDate,omitempty"`
	// Unique name of the identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Unique id of the identity that created the resource.
	CreatedByUserId *string `json:"createdByUserId,omitempty"`
	// The ISO 8601 modified timestamp.
	LastModifiedDate *IonosTime `json:"lastModifiedDate,omitempty"`
	// Unique name of the identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	// Unique id of the identity that last modified the resource.
	LastModifiedByUserId *string `json:"lastModifiedByUserId,omitempty"`
	// Unique name of the resource.
	ResourceURN *string `json:"resourceURN,omitempty"`
	// The resource state.
	State string `json:"state"`
	// A human readable message describing the current state. In case of an error, the message will contain a detailed error message.
	Message string `json:"message"`
	// The ID of the auto-certificate that caused issuing of the certificate.
	AutoCertificate *string `json:"autoCertificate,omitempty"`
	// The ID of the last issued certificate that belongs to the same auto-certificate.
	LastIssuedCertificate *string `json:"lastIssuedCertificate,omitempty"`
	// Indicates if the certificate is expired.
	Expired bool `json:"expired"`
	// The start date of the certificate.
	NotBefore *IonosTime `json:"notBefore"`
	// The end date of the certificate.
	NotAfter *IonosTime `json:"notAfter"`
	// The serial number of the certificate in hex.
	SerialNumber string `json:"serialNumber"`
	// The common name (DNS) of the certificate.
	CommonName string `json:"commonName"`
	// Optional additional names added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames"`
}

// NewMetadataWithCertificateInformation instantiates a new MetadataWithCertificateInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataWithCertificateInformation(state string, message string, expired bool, notBefore time.Time, notAfter time.Time, serialNumber string, commonName string, subjectAlternativeNames []string) *MetadataWithCertificateInformation {
	this := MetadataWithCertificateInformation{}

	this.State = state
	this.Message = message
	this.Expired = expired
	this.NotBefore = &IonosTime{notBefore}
	this.NotAfter = &IonosTime{notAfter}
	this.SerialNumber = serialNumber
	this.CommonName = commonName
	this.SubjectAlternativeNames = subjectAlternativeNames

	return &this
}

// NewMetadataWithCertificateInformationWithDefaults instantiates a new MetadataWithCertificateInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithCertificateInformationWithDefaults() *MetadataWithCertificateInformation {
	this := MetadataWithCertificateInformation{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return o.CreatedDate.Time
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return &o.CreatedDate.Time, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *MetadataWithCertificateInformation) SetCreatedDate(v time.Time) {
	o.CreatedDate = &IonosTime{v}
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *MetadataWithCertificateInformation) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedByUserId returns the CreatedByUserId field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetCreatedByUserId() string {
	if o == nil || IsNil(o.CreatedByUserId) {
		var ret string
		return ret
	}
	return *o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetCreatedByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByUserId) {
		return nil, false
	}
	return o.CreatedByUserId, true
}

// HasCreatedByUserId returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasCreatedByUserId() bool {
	if o != nil && !IsNil(o.CreatedByUserId) {
		return true
	}

	return false
}

// SetCreatedByUserId gets a reference to the given string and assigns it to the CreatedByUserId field.
func (o *MetadataWithCertificateInformation) SetCreatedByUserId(v string) {
	o.CreatedByUserId = &v
}

// GetLastModifiedDate returns the LastModifiedDate field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetLastModifiedDate() time.Time {
	if o == nil || IsNil(o.LastModifiedDate) {
		var ret time.Time
		return ret
	}
	return o.LastModifiedDate.Time
}

// GetLastModifiedDateOk returns a tuple with the LastModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetLastModifiedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModifiedDate) {
		return nil, false
	}
	return &o.LastModifiedDate.Time, true
}

// HasLastModifiedDate returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasLastModifiedDate() bool {
	if o != nil && !IsNil(o.LastModifiedDate) {
		return true
	}

	return false
}

// SetLastModifiedDate gets a reference to the given time.Time and assigns it to the LastModifiedDate field.
func (o *MetadataWithCertificateInformation) SetLastModifiedDate(v time.Time) {
	o.LastModifiedDate = &IonosTime{v}
}

// GetLastModifiedBy returns the LastModifiedBy field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetLastModifiedBy() string {
	if o == nil || IsNil(o.LastModifiedBy) {
		var ret string
		return ret
	}
	return *o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetLastModifiedByOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedBy) {
		return nil, false
	}
	return o.LastModifiedBy, true
}

// HasLastModifiedBy returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasLastModifiedBy() bool {
	if o != nil && !IsNil(o.LastModifiedBy) {
		return true
	}

	return false
}

// SetLastModifiedBy gets a reference to the given string and assigns it to the LastModifiedBy field.
func (o *MetadataWithCertificateInformation) SetLastModifiedBy(v string) {
	o.LastModifiedBy = &v
}

// GetLastModifiedByUserId returns the LastModifiedByUserId field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetLastModifiedByUserId() string {
	if o == nil || IsNil(o.LastModifiedByUserId) {
		var ret string
		return ret
	}
	return *o.LastModifiedByUserId
}

// GetLastModifiedByUserIdOk returns a tuple with the LastModifiedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetLastModifiedByUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedByUserId) {
		return nil, false
	}
	return o.LastModifiedByUserId, true
}

// HasLastModifiedByUserId returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasLastModifiedByUserId() bool {
	if o != nil && !IsNil(o.LastModifiedByUserId) {
		return true
	}

	return false
}

// SetLastModifiedByUserId gets a reference to the given string and assigns it to the LastModifiedByUserId field.
func (o *MetadataWithCertificateInformation) SetLastModifiedByUserId(v string) {
	o.LastModifiedByUserId = &v
}

// GetResourceURN returns the ResourceURN field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetResourceURN() string {
	if o == nil || IsNil(o.ResourceURN) {
		var ret string
		return ret
	}
	return *o.ResourceURN
}

// GetResourceURNOk returns a tuple with the ResourceURN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetResourceURNOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceURN) {
		return nil, false
	}
	return o.ResourceURN, true
}

// HasResourceURN returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasResourceURN() bool {
	if o != nil && !IsNil(o.ResourceURN) {
		return true
	}

	return false
}

// SetResourceURN gets a reference to the given string and assigns it to the ResourceURN field.
func (o *MetadataWithCertificateInformation) SetResourceURN(v string) {
	o.ResourceURN = &v
}

// GetState returns the State field value
func (o *MetadataWithCertificateInformation) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MetadataWithCertificateInformation) SetState(v string) {
	o.State = v
}

// GetMessage returns the Message field value
func (o *MetadataWithCertificateInformation) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *MetadataWithCertificateInformation) SetMessage(v string) {
	o.Message = v
}

// GetAutoCertificate returns the AutoCertificate field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetAutoCertificate() string {
	if o == nil || IsNil(o.AutoCertificate) {
		var ret string
		return ret
	}
	return *o.AutoCertificate
}

// GetAutoCertificateOk returns a tuple with the AutoCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetAutoCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.AutoCertificate) {
		return nil, false
	}
	return o.AutoCertificate, true
}

// HasAutoCertificate returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasAutoCertificate() bool {
	if o != nil && !IsNil(o.AutoCertificate) {
		return true
	}

	return false
}

// SetAutoCertificate gets a reference to the given string and assigns it to the AutoCertificate field.
func (o *MetadataWithCertificateInformation) SetAutoCertificate(v string) {
	o.AutoCertificate = &v
}

// GetLastIssuedCertificate returns the LastIssuedCertificate field value if set, zero value otherwise.
func (o *MetadataWithCertificateInformation) GetLastIssuedCertificate() string {
	if o == nil || IsNil(o.LastIssuedCertificate) {
		var ret string
		return ret
	}
	return *o.LastIssuedCertificate
}

// GetLastIssuedCertificateOk returns a tuple with the LastIssuedCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetLastIssuedCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.LastIssuedCertificate) {
		return nil, false
	}
	return o.LastIssuedCertificate, true
}

// HasLastIssuedCertificate returns a boolean if a field has been set.
func (o *MetadataWithCertificateInformation) HasLastIssuedCertificate() bool {
	if o != nil && !IsNil(o.LastIssuedCertificate) {
		return true
	}

	return false
}

// SetLastIssuedCertificate gets a reference to the given string and assigns it to the LastIssuedCertificate field.
func (o *MetadataWithCertificateInformation) SetLastIssuedCertificate(v string) {
	o.LastIssuedCertificate = &v
}

// GetExpired returns the Expired field value
func (o *MetadataWithCertificateInformation) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *MetadataWithCertificateInformation) SetExpired(v bool) {
	o.Expired = v
}

// GetNotBefore returns the NotBefore field value
func (o *MetadataWithCertificateInformation) GetNotBefore() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	if o.NotBefore == nil {
		var ret time.Time
		return ret
	}
	return o.NotBefore.Time
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	if o.NotBefore == nil {
		return nil, true
	}
	return &o.NotBefore.Time, true
}

// SetNotBefore sets field value
func (o *MetadataWithCertificateInformation) SetNotBefore(v time.Time) {
	o.NotBefore = &IonosTime{v}
}

// GetNotAfter returns the NotAfter field value
func (o *MetadataWithCertificateInformation) GetNotAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	if o.NotAfter == nil {
		var ret time.Time
		return ret
	}
	return o.NotAfter.Time
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetNotAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	if o.NotAfter == nil {
		return nil, true
	}
	return &o.NotAfter.Time, true
}

// SetNotAfter sets field value
func (o *MetadataWithCertificateInformation) SetNotAfter(v time.Time) {
	o.NotAfter = &IonosTime{v}
}

// GetSerialNumber returns the SerialNumber field value
func (o *MetadataWithCertificateInformation) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *MetadataWithCertificateInformation) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetCommonName returns the CommonName field value
func (o *MetadataWithCertificateInformation) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *MetadataWithCertificateInformation) SetCommonName(v string) {
	o.CommonName = v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value
func (o *MetadataWithCertificateInformation) GetSubjectAlternativeNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value
// and a boolean to check if the value has been set.
func (o *MetadataWithCertificateInformation) GetSubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectAlternativeNames, true
}

// SetSubjectAlternativeNames sets field value
func (o *MetadataWithCertificateInformation) SetSubjectAlternativeNames(v []string) {
	o.SubjectAlternativeNames = v
}

func (o MetadataWithCertificateInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataWithCertificateInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByUserId) {
		toSerialize["createdByUserId"] = o.CreatedByUserId
	}
	if !IsNil(o.LastModifiedDate) {
		toSerialize["lastModifiedDate"] = o.LastModifiedDate
	}
	if !IsNil(o.LastModifiedBy) {
		toSerialize["lastModifiedBy"] = o.LastModifiedBy
	}
	if !IsNil(o.LastModifiedByUserId) {
		toSerialize["lastModifiedByUserId"] = o.LastModifiedByUserId
	}
	if !IsNil(o.ResourceURN) {
		toSerialize["resourceURN"] = o.ResourceURN
	}
	toSerialize["state"] = o.State
	toSerialize["message"] = o.Message
	if !IsNil(o.AutoCertificate) {
		toSerialize["autoCertificate"] = o.AutoCertificate
	}
	if !IsNil(o.LastIssuedCertificate) {
		toSerialize["lastIssuedCertificate"] = o.LastIssuedCertificate
	}
	toSerialize["expired"] = o.Expired
	toSerialize["notBefore"] = o.NotBefore
	toSerialize["notAfter"] = o.NotAfter
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["commonName"] = o.CommonName
	toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	return toSerialize, nil
}

type NullableMetadataWithCertificateInformation struct {
	value *MetadataWithCertificateInformation
	isSet bool
}

func (v NullableMetadataWithCertificateInformation) Get() *MetadataWithCertificateInformation {
	return v.value
}

func (v *NullableMetadataWithCertificateInformation) Set(val *MetadataWithCertificateInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataWithCertificateInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataWithCertificateInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataWithCertificateInformation(val *MetadataWithCertificateInformation) *NullableMetadataWithCertificateInformation {
	return &NullableMetadataWithCertificateInformation{value: val, isSet: true}
}

func (v NullableMetadataWithCertificateInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataWithCertificateInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
