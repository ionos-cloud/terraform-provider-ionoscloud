/*
 * Certificate Manager Service API
 *
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cert

import (
	"encoding/json"
)

// checks if the ProviderExternalAccountBinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderExternalAccountBinding{}

// ProviderExternalAccountBinding struct for ProviderExternalAccountBinding
type ProviderExternalAccountBinding struct {
	// The key ID of the external account binding.
	KeyId *string `json:"keyId,omitempty"`
	// The secret of the external account binding.
	KeySecret *string `json:"keySecret,omitempty"`
}

// NewProviderExternalAccountBinding instantiates a new ProviderExternalAccountBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderExternalAccountBinding() *ProviderExternalAccountBinding {
	this := ProviderExternalAccountBinding{}

	return &this
}

// NewProviderExternalAccountBindingWithDefaults instantiates a new ProviderExternalAccountBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderExternalAccountBindingWithDefaults() *ProviderExternalAccountBinding {
	this := ProviderExternalAccountBinding{}
	return &this
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *ProviderExternalAccountBinding) GetKeyId() string {
	if o == nil || IsNil(o.KeyId) {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderExternalAccountBinding) GetKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.KeyId) {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *ProviderExternalAccountBinding) HasKeyId() bool {
	if o != nil && !IsNil(o.KeyId) {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *ProviderExternalAccountBinding) SetKeyId(v string) {
	o.KeyId = &v
}

// GetKeySecret returns the KeySecret field value if set, zero value otherwise.
func (o *ProviderExternalAccountBinding) GetKeySecret() string {
	if o == nil || IsNil(o.KeySecret) {
		var ret string
		return ret
	}
	return *o.KeySecret
}

// GetKeySecretOk returns a tuple with the KeySecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderExternalAccountBinding) GetKeySecretOk() (*string, bool) {
	if o == nil || IsNil(o.KeySecret) {
		return nil, false
	}
	return o.KeySecret, true
}

// HasKeySecret returns a boolean if a field has been set.
func (o *ProviderExternalAccountBinding) HasKeySecret() bool {
	if o != nil && !IsNil(o.KeySecret) {
		return true
	}

	return false
}

// SetKeySecret gets a reference to the given string and assigns it to the KeySecret field.
func (o *ProviderExternalAccountBinding) SetKeySecret(v string) {
	o.KeySecret = &v
}

func (o ProviderExternalAccountBinding) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderExternalAccountBinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyId) {
		toSerialize["keyId"] = o.KeyId
	}
	if !IsNil(o.KeySecret) {
		toSerialize["keySecret"] = o.KeySecret
	}
	return toSerialize, nil
}

type NullableProviderExternalAccountBinding struct {
	value *ProviderExternalAccountBinding
	isSet bool
}

func (v NullableProviderExternalAccountBinding) Get() *ProviderExternalAccountBinding {
	return v.value
}

func (v *NullableProviderExternalAccountBinding) Set(val *ProviderExternalAccountBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderExternalAccountBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderExternalAccountBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderExternalAccountBinding(val *ProviderExternalAccountBinding) *NullableProviderExternalAccountBinding {
	return &NullableProviderExternalAccountBinding{value: val, isSet: true}
}

func (v NullableProviderExternalAccountBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderExternalAccountBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
