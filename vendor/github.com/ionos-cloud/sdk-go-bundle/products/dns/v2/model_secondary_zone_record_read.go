/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the SecondaryZoneRecordRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecondaryZoneRecordRead{}

// SecondaryZoneRecordRead struct for SecondaryZoneRecordRead
type SecondaryZoneRecordRead struct {
	Type       string                          `json:"type"`
	Metadata   MetadataForSecondaryZoneRecords `json:"metadata"`
	Properties Record                          `json:"properties"`
}

// NewSecondaryZoneRecordRead instantiates a new SecondaryZoneRecordRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecondaryZoneRecordRead(type_ string, metadata MetadataForSecondaryZoneRecords, properties Record) *SecondaryZoneRecordRead {
	this := SecondaryZoneRecordRead{}

	this.Type = type_
	this.Metadata = metadata
	this.Properties = properties

	return &this
}

// NewSecondaryZoneRecordReadWithDefaults instantiates a new SecondaryZoneRecordRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecondaryZoneRecordReadWithDefaults() *SecondaryZoneRecordRead {
	this := SecondaryZoneRecordRead{}
	return &this
}

// GetType returns the Type field value
func (o *SecondaryZoneRecordRead) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecondaryZoneRecordRead) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecondaryZoneRecordRead) SetType(v string) {
	o.Type = v
}

// GetMetadata returns the Metadata field value
func (o *SecondaryZoneRecordRead) GetMetadata() MetadataForSecondaryZoneRecords {
	if o == nil {
		var ret MetadataForSecondaryZoneRecords
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SecondaryZoneRecordRead) GetMetadataOk() (*MetadataForSecondaryZoneRecords, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *SecondaryZoneRecordRead) SetMetadata(v MetadataForSecondaryZoneRecords) {
	o.Metadata = v
}

// GetProperties returns the Properties field value
func (o *SecondaryZoneRecordRead) GetProperties() Record {
	if o == nil {
		var ret Record
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *SecondaryZoneRecordRead) GetPropertiesOk() (*Record, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *SecondaryZoneRecordRead) SetProperties(v Record) {
	o.Properties = v
}

func (o SecondaryZoneRecordRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecondaryZoneRecordRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["metadata"] = o.Metadata
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableSecondaryZoneRecordRead struct {
	value *SecondaryZoneRecordRead
	isSet bool
}

func (v NullableSecondaryZoneRecordRead) Get() *SecondaryZoneRecordRead {
	return v.value
}

func (v *NullableSecondaryZoneRecordRead) Set(val *SecondaryZoneRecordRead) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondaryZoneRecordRead) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondaryZoneRecordRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondaryZoneRecordRead(val *SecondaryZoneRecordRead) *NullableSecondaryZoneRecordRead {
	return &NullableSecondaryZoneRecordRead{value: val, isSet: true}
}

func (v NullableSecondaryZoneRecordRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondaryZoneRecordRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
