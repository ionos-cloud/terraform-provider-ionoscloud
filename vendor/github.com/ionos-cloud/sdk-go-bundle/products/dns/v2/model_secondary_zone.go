/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the SecondaryZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecondaryZone{}

// SecondaryZone struct for SecondaryZone
type SecondaryZone struct {
	// The zone name
	ZoneName string `json:"zoneName"`
	// The hosted zone is used for...
	Description *string `json:"description,omitempty"`
	// Indicates IP addresses of primary nameservers for a secondary zone. Accepts IPv4 and IPv6 addresses
	PrimaryIps []string `json:"primaryIps"`
}

// NewSecondaryZone instantiates a new SecondaryZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecondaryZone(zoneName string, primaryIps []string) *SecondaryZone {
	this := SecondaryZone{}

	this.ZoneName = zoneName
	this.PrimaryIps = primaryIps

	return &this
}

// NewSecondaryZoneWithDefaults instantiates a new SecondaryZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecondaryZoneWithDefaults() *SecondaryZone {
	this := SecondaryZone{}
	return &this
}

// GetZoneName returns the ZoneName field value
func (o *SecondaryZone) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *SecondaryZone) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *SecondaryZone) SetZoneName(v string) {
	o.ZoneName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecondaryZone) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondaryZone) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecondaryZone) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecondaryZone) SetDescription(v string) {
	o.Description = &v
}

// GetPrimaryIps returns the PrimaryIps field value
func (o *SecondaryZone) GetPrimaryIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PrimaryIps
}

// GetPrimaryIpsOk returns a tuple with the PrimaryIps field value
// and a boolean to check if the value has been set.
func (o *SecondaryZone) GetPrimaryIpsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIps, true
}

// SetPrimaryIps sets field value
func (o *SecondaryZone) SetPrimaryIps(v []string) {
	o.PrimaryIps = v
}

func (o SecondaryZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecondaryZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zoneName"] = o.ZoneName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["primaryIps"] = o.PrimaryIps
	return toSerialize, nil
}

type NullableSecondaryZone struct {
	value *SecondaryZone
	isSet bool
}

func (v NullableSecondaryZone) Get() *SecondaryZone {
	return v.value
}

func (v *NullableSecondaryZone) Set(val *SecondaryZone) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondaryZone) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondaryZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondaryZone(val *SecondaryZone) *NullableSecondaryZone {
	return &NullableSecondaryZone{value: val, isSet: true}
}

func (v NullableSecondaryZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondaryZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
