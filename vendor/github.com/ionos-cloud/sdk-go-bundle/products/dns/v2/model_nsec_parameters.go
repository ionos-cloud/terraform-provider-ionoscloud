/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.16.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the NsecParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NsecParameters{}

// NsecParameters Nsec parameters.
type NsecParameters struct {
	NsecMode NsecMode `json:"nsecMode"`
	// Number of iterations for NSEC3. (between 0 and 50)
	Nsec3Iterations int32 `json:"nsec3Iterations"`
	// Salt length in bits for NSEC3. (between 64 and 128, multiples of 8)
	Nsec3SaltBits int32 `json:"nsec3SaltBits"`
}

// NewNsecParameters instantiates a new NsecParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNsecParameters(nsecMode NsecMode, nsec3Iterations int32, nsec3SaltBits int32) *NsecParameters {
	this := NsecParameters{}

	this.NsecMode = nsecMode
	this.Nsec3Iterations = nsec3Iterations
	this.Nsec3SaltBits = nsec3SaltBits

	return &this
}

// NewNsecParametersWithDefaults instantiates a new NsecParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNsecParametersWithDefaults() *NsecParameters {
	this := NsecParameters{}
	return &this
}

// GetNsecMode returns the NsecMode field value
func (o *NsecParameters) GetNsecMode() NsecMode {
	if o == nil {
		var ret NsecMode
		return ret
	}

	return o.NsecMode
}

// GetNsecModeOk returns a tuple with the NsecMode field value
// and a boolean to check if the value has been set.
func (o *NsecParameters) GetNsecModeOk() (*NsecMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NsecMode, true
}

// SetNsecMode sets field value
func (o *NsecParameters) SetNsecMode(v NsecMode) {
	o.NsecMode = v
}

// GetNsec3Iterations returns the Nsec3Iterations field value
func (o *NsecParameters) GetNsec3Iterations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Nsec3Iterations
}

// GetNsec3IterationsOk returns a tuple with the Nsec3Iterations field value
// and a boolean to check if the value has been set.
func (o *NsecParameters) GetNsec3IterationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nsec3Iterations, true
}

// SetNsec3Iterations sets field value
func (o *NsecParameters) SetNsec3Iterations(v int32) {
	o.Nsec3Iterations = v
}

// GetNsec3SaltBits returns the Nsec3SaltBits field value
func (o *NsecParameters) GetNsec3SaltBits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Nsec3SaltBits
}

// GetNsec3SaltBitsOk returns a tuple with the Nsec3SaltBits field value
// and a boolean to check if the value has been set.
func (o *NsecParameters) GetNsec3SaltBitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nsec3SaltBits, true
}

// SetNsec3SaltBits sets field value
func (o *NsecParameters) SetNsec3SaltBits(v int32) {
	o.Nsec3SaltBits = v
}

func (o NsecParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nsecMode"] = o.NsecMode
	toSerialize["nsec3Iterations"] = o.Nsec3Iterations
	toSerialize["nsec3SaltBits"] = o.Nsec3SaltBits
	return toSerialize, nil
}

type NullableNsecParameters struct {
	value *NsecParameters
	isSet bool
}

func (v NullableNsecParameters) Get() *NsecParameters {
	return v.value
}

func (v *NullableNsecParameters) Set(val *NsecParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableNsecParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableNsecParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNsecParameters(val *NsecParameters) *NullableNsecParameters {
	return &NullableNsecParameters{value: val, isSet: true}
}

func (v NullableNsecParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNsecParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
