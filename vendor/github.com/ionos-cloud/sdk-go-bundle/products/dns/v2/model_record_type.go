/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"

	"fmt"
)

// RecordType Holds supported DNS resource record types. In the DNS context a record is a DNS resource record.
type RecordType string

// List of RecordType
const (
	RECORDTYPE_A          RecordType = "A"
	RECORDTYPE_AAAA       RecordType = "AAAA"
	RECORDTYPE_CNAME      RecordType = "CNAME"
	RECORDTYPE_ALIAS      RecordType = "ALIAS"
	RECORDTYPE_MX         RecordType = "MX"
	RECORDTYPE_NS         RecordType = "NS"
	RECORDTYPE_SRV        RecordType = "SRV"
	RECORDTYPE_TXT        RecordType = "TXT"
	RECORDTYPE_CAA        RecordType = "CAA"
	RECORDTYPE_SSHFP      RecordType = "SSHFP"
	RECORDTYPE_TLSA       RecordType = "TLSA"
	RECORDTYPE_SMIMEA     RecordType = "SMIMEA"
	RECORDTYPE_DS         RecordType = "DS"
	RECORDTYPE_HTTPS      RecordType = "HTTPS"
	RECORDTYPE_SVCB       RecordType = "SVCB"
	RECORDTYPE_OPENPGPKEY RecordType = "OPENPGPKEY"
	RECORDTYPE_CERT       RecordType = "CERT"
	RECORDTYPE_URI        RecordType = "URI"
	RECORDTYPE_RP         RecordType = "RP"
	RECORDTYPE_LOC        RecordType = "LOC"
)

func (v *RecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordType(value)
	for _, existing := range []RecordType{"A", "AAAA", "CNAME", "ALIAS", "MX", "NS", "SRV", "TXT", "CAA", "SSHFP", "TLSA", "SMIMEA", "DS", "HTTPS", "SVCB", "OPENPGPKEY", "CERT", "URI", "RP", "LOC"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordType", value)
}

// Ptr returns reference to RecordType value
func (v RecordType) Ptr() *RecordType {
	return &v
}

type NullableRecordType struct {
	value *RecordType
	isSet bool
}

func (v NullableRecordType) Get() *RecordType {
	return v.value
}

func (v *NullableRecordType) Set(val *RecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordType(val *RecordType) *NullableRecordType {
	return &NullableRecordType{value: val, isSet: true}
}

func (v NullableRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
