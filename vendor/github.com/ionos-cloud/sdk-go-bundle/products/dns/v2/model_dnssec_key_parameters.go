/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DnssecKeyParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnssecKeyParameters{}

// DnssecKeyParameters Parameters used to sign zone.
type DnssecKeyParameters struct {
	KeyParameters  KeyParameters  `json:"keyParameters"`
	NsecParameters NsecParameters `json:"nsecParameters"`
	// Signature validity in days
	Validity int32 `json:"validity"`
}

// NewDnssecKeyParameters instantiates a new DnssecKeyParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnssecKeyParameters(keyParameters KeyParameters, nsecParameters NsecParameters, validity int32) *DnssecKeyParameters {
	this := DnssecKeyParameters{}

	this.KeyParameters = keyParameters
	this.NsecParameters = nsecParameters
	this.Validity = validity

	return &this
}

// NewDnssecKeyParametersWithDefaults instantiates a new DnssecKeyParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnssecKeyParametersWithDefaults() *DnssecKeyParameters {
	this := DnssecKeyParameters{}
	return &this
}

// GetKeyParameters returns the KeyParameters field value
func (o *DnssecKeyParameters) GetKeyParameters() KeyParameters {
	if o == nil {
		var ret KeyParameters
		return ret
	}

	return o.KeyParameters
}

// GetKeyParametersOk returns a tuple with the KeyParameters field value
// and a boolean to check if the value has been set.
func (o *DnssecKeyParameters) GetKeyParametersOk() (*KeyParameters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyParameters, true
}

// SetKeyParameters sets field value
func (o *DnssecKeyParameters) SetKeyParameters(v KeyParameters) {
	o.KeyParameters = v
}

// GetNsecParameters returns the NsecParameters field value
func (o *DnssecKeyParameters) GetNsecParameters() NsecParameters {
	if o == nil {
		var ret NsecParameters
		return ret
	}

	return o.NsecParameters
}

// GetNsecParametersOk returns a tuple with the NsecParameters field value
// and a boolean to check if the value has been set.
func (o *DnssecKeyParameters) GetNsecParametersOk() (*NsecParameters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NsecParameters, true
}

// SetNsecParameters sets field value
func (o *DnssecKeyParameters) SetNsecParameters(v NsecParameters) {
	o.NsecParameters = v
}

// GetValidity returns the Validity field value
func (o *DnssecKeyParameters) GetValidity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Validity
}

// GetValidityOk returns a tuple with the Validity field value
// and a boolean to check if the value has been set.
func (o *DnssecKeyParameters) GetValidityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validity, true
}

// SetValidity sets field value
func (o *DnssecKeyParameters) SetValidity(v int32) {
	o.Validity = v
}

func (o DnssecKeyParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnssecKeyParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keyParameters"] = o.KeyParameters
	toSerialize["nsecParameters"] = o.NsecParameters
	toSerialize["validity"] = o.Validity
	return toSerialize, nil
}

type NullableDnssecKeyParameters struct {
	value *DnssecKeyParameters
	isSet bool
}

func (v NullableDnssecKeyParameters) Get() *DnssecKeyParameters {
	return v.value
}

func (v *NullableDnssecKeyParameters) Set(val *DnssecKeyParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDnssecKeyParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDnssecKeyParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnssecKeyParameters(val *DnssecKeyParameters) *NullableDnssecKeyParameters {
	return &NullableDnssecKeyParameters{value: val, isSet: true}
}

func (v NullableDnssecKeyParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnssecKeyParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
