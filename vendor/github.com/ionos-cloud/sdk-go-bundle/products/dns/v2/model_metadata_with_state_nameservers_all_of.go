/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the MetadataWithStateNameserversAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataWithStateNameserversAllOf{}

// MetadataWithStateNameserversAllOf struct for MetadataWithStateNameserversAllOf
type MetadataWithStateNameserversAllOf struct {
	State ProvisioningState `json:"state"`
	// The list of nameservers associated to the zone.  Nameservers are different for primary and secondary zones. For primary zones it would be: - ns-ic.ui-dns.com - ns-ic.ui-dns.de - ns-ic.ui-dns.org - ns-ic.ui-dns.biz  And for secondary zones: - nscs.ui-dns.com - nscs.ui-dns.de - nscs.ui-dns.org - nscs.ui-dns.biz
	Nameservers []string `json:"nameservers"`
}

// NewMetadataWithStateNameserversAllOf instantiates a new MetadataWithStateNameserversAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataWithStateNameserversAllOf(state ProvisioningState, nameservers []string) *MetadataWithStateNameserversAllOf {
	this := MetadataWithStateNameserversAllOf{}

	this.State = state
	this.Nameservers = nameservers

	return &this
}

// NewMetadataWithStateNameserversAllOfWithDefaults instantiates a new MetadataWithStateNameserversAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithStateNameserversAllOfWithDefaults() *MetadataWithStateNameserversAllOf {
	this := MetadataWithStateNameserversAllOf{}
	return &this
}

// GetState returns the State field value
func (o *MetadataWithStateNameserversAllOf) GetState() ProvisioningState {
	if o == nil {
		var ret ProvisioningState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MetadataWithStateNameserversAllOf) GetStateOk() (*ProvisioningState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MetadataWithStateNameserversAllOf) SetState(v ProvisioningState) {
	o.State = v
}

// GetNameservers returns the Nameservers field value
func (o *MetadataWithStateNameserversAllOf) GetNameservers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value
// and a boolean to check if the value has been set.
func (o *MetadataWithStateNameserversAllOf) GetNameserversOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nameservers, true
}

// SetNameservers sets field value
func (o *MetadataWithStateNameserversAllOf) SetNameservers(v []string) {
	o.Nameservers = v
}

func (o MetadataWithStateNameserversAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataWithStateNameserversAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	toSerialize["nameservers"] = o.Nameservers
	return toSerialize, nil
}

type NullableMetadataWithStateNameserversAllOf struct {
	value *MetadataWithStateNameserversAllOf
	isSet bool
}

func (v NullableMetadataWithStateNameserversAllOf) Get() *MetadataWithStateNameserversAllOf {
	return v.value
}

func (v *NullableMetadataWithStateNameserversAllOf) Set(val *MetadataWithStateNameserversAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataWithStateNameserversAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataWithStateNameserversAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataWithStateNameserversAllOf(val *MetadataWithStateNameserversAllOf) *NullableMetadataWithStateNameserversAllOf {
	return &NullableMetadataWithStateNameserversAllOf{value: val, isSet: true}
}

func (v NullableMetadataWithStateNameserversAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataWithStateNameserversAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
