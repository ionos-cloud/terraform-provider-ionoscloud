/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DnssecKeyReadListMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnssecKeyReadListMetadata{}

// DnssecKeyReadListMetadata Metadata of the resource with not state information.
type DnssecKeyReadListMetadata struct {
	// The ID (UUID) of the DNS zone of which record belongs to.
	ZoneId *string     `json:"zoneId,omitempty"`
	Items  []DnssecKey `json:"items,omitempty"`
}

// NewDnssecKeyReadListMetadata instantiates a new DnssecKeyReadListMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnssecKeyReadListMetadata() *DnssecKeyReadListMetadata {
	this := DnssecKeyReadListMetadata{}

	return &this
}

// NewDnssecKeyReadListMetadataWithDefaults instantiates a new DnssecKeyReadListMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnssecKeyReadListMetadataWithDefaults() *DnssecKeyReadListMetadata {
	this := DnssecKeyReadListMetadata{}
	return &this
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *DnssecKeyReadListMetadata) GetZoneId() string {
	if o == nil || IsNil(o.ZoneId) {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKeyReadListMetadata) GetZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *DnssecKeyReadListMetadata) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *DnssecKeyReadListMetadata) SetZoneId(v string) {
	o.ZoneId = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DnssecKeyReadListMetadata) GetItems() []DnssecKey {
	if o == nil || IsNil(o.Items) {
		var ret []DnssecKey
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKeyReadListMetadata) GetItemsOk() ([]DnssecKey, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DnssecKeyReadListMetadata) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []DnssecKey and assigns it to the Items field.
func (o *DnssecKeyReadListMetadata) SetItems(v []DnssecKey) {
	o.Items = v
}

func (o DnssecKeyReadListMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnssecKeyReadListMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZoneId) {
		toSerialize["zoneId"] = o.ZoneId
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableDnssecKeyReadListMetadata struct {
	value *DnssecKeyReadListMetadata
	isSet bool
}

func (v NullableDnssecKeyReadListMetadata) Get() *DnssecKeyReadListMetadata {
	return v.value
}

func (v *NullableDnssecKeyReadListMetadata) Set(val *DnssecKeyReadListMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDnssecKeyReadListMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDnssecKeyReadListMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnssecKeyReadListMetadata(val *DnssecKeyReadListMetadata) *NullableDnssecKeyReadListMetadata {
	return &NullableDnssecKeyReadListMetadata{value: val, isSet: true}
}

func (v NullableDnssecKeyReadListMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnssecKeyReadListMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
