/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.17.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DnssecKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnssecKey{}

// DnssecKey struct for DnssecKey
type DnssecKey struct {
	KeyTag *int32 `json:"keyTag,omitempty"`
	// A string that denotes the digest algorithm. This value must conform to the guidelines in [RFC-8624 Section 3.3](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3).
	DigestAlgorithmMnemonic *string  `json:"digestAlgorithmMnemonic,omitempty"`
	Digest                  *string  `json:"digest,omitempty"`
	KeyData                 *KeyData `json:"keyData,omitempty"`
	// Represents the composed value of the The RDATA for a DNSKEY. The format should be the following: Flags | Protocol | Algorithm | Public Key The values must conform to the guidelines in [RFC-4034 Section 2.1](https://www.rfc-editor.org/rfc/rfc4034#section-2.1).
	ComposedKeyData *string `json:"composedKeyData,omitempty"`
}

// NewDnssecKey instantiates a new DnssecKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnssecKey() *DnssecKey {
	this := DnssecKey{}

	return &this
}

// NewDnssecKeyWithDefaults instantiates a new DnssecKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnssecKeyWithDefaults() *DnssecKey {
	this := DnssecKey{}
	return &this
}

// GetKeyTag returns the KeyTag field value if set, zero value otherwise.
func (o *DnssecKey) GetKeyTag() int32 {
	if o == nil || IsNil(o.KeyTag) {
		var ret int32
		return ret
	}
	return *o.KeyTag
}

// GetKeyTagOk returns a tuple with the KeyTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKey) GetKeyTagOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyTag) {
		return nil, false
	}
	return o.KeyTag, true
}

// HasKeyTag returns a boolean if a field has been set.
func (o *DnssecKey) HasKeyTag() bool {
	if o != nil && !IsNil(o.KeyTag) {
		return true
	}

	return false
}

// SetKeyTag gets a reference to the given int32 and assigns it to the KeyTag field.
func (o *DnssecKey) SetKeyTag(v int32) {
	o.KeyTag = &v
}

// GetDigestAlgorithmMnemonic returns the DigestAlgorithmMnemonic field value if set, zero value otherwise.
func (o *DnssecKey) GetDigestAlgorithmMnemonic() string {
	if o == nil || IsNil(o.DigestAlgorithmMnemonic) {
		var ret string
		return ret
	}
	return *o.DigestAlgorithmMnemonic
}

// GetDigestAlgorithmMnemonicOk returns a tuple with the DigestAlgorithmMnemonic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKey) GetDigestAlgorithmMnemonicOk() (*string, bool) {
	if o == nil || IsNil(o.DigestAlgorithmMnemonic) {
		return nil, false
	}
	return o.DigestAlgorithmMnemonic, true
}

// HasDigestAlgorithmMnemonic returns a boolean if a field has been set.
func (o *DnssecKey) HasDigestAlgorithmMnemonic() bool {
	if o != nil && !IsNil(o.DigestAlgorithmMnemonic) {
		return true
	}

	return false
}

// SetDigestAlgorithmMnemonic gets a reference to the given string and assigns it to the DigestAlgorithmMnemonic field.
func (o *DnssecKey) SetDigestAlgorithmMnemonic(v string) {
	o.DigestAlgorithmMnemonic = &v
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *DnssecKey) GetDigest() string {
	if o == nil || IsNil(o.Digest) {
		var ret string
		return ret
	}
	return *o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKey) GetDigestOk() (*string, bool) {
	if o == nil || IsNil(o.Digest) {
		return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *DnssecKey) HasDigest() bool {
	if o != nil && !IsNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given string and assigns it to the Digest field.
func (o *DnssecKey) SetDigest(v string) {
	o.Digest = &v
}

// GetKeyData returns the KeyData field value if set, zero value otherwise.
func (o *DnssecKey) GetKeyData() KeyData {
	if o == nil || IsNil(o.KeyData) {
		var ret KeyData
		return ret
	}
	return *o.KeyData
}

// GetKeyDataOk returns a tuple with the KeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKey) GetKeyDataOk() (*KeyData, bool) {
	if o == nil || IsNil(o.KeyData) {
		return nil, false
	}
	return o.KeyData, true
}

// HasKeyData returns a boolean if a field has been set.
func (o *DnssecKey) HasKeyData() bool {
	if o != nil && !IsNil(o.KeyData) {
		return true
	}

	return false
}

// SetKeyData gets a reference to the given KeyData and assigns it to the KeyData field.
func (o *DnssecKey) SetKeyData(v KeyData) {
	o.KeyData = &v
}

// GetComposedKeyData returns the ComposedKeyData field value if set, zero value otherwise.
func (o *DnssecKey) GetComposedKeyData() string {
	if o == nil || IsNil(o.ComposedKeyData) {
		var ret string
		return ret
	}
	return *o.ComposedKeyData
}

// GetComposedKeyDataOk returns a tuple with the ComposedKeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnssecKey) GetComposedKeyDataOk() (*string, bool) {
	if o == nil || IsNil(o.ComposedKeyData) {
		return nil, false
	}
	return o.ComposedKeyData, true
}

// HasComposedKeyData returns a boolean if a field has been set.
func (o *DnssecKey) HasComposedKeyData() bool {
	if o != nil && !IsNil(o.ComposedKeyData) {
		return true
	}

	return false
}

// SetComposedKeyData gets a reference to the given string and assigns it to the ComposedKeyData field.
func (o *DnssecKey) SetComposedKeyData(v string) {
	o.ComposedKeyData = &v
}

func (o DnssecKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnssecKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyTag) {
		toSerialize["keyTag"] = o.KeyTag
	}
	if !IsNil(o.DigestAlgorithmMnemonic) {
		toSerialize["digestAlgorithmMnemonic"] = o.DigestAlgorithmMnemonic
	}
	if !IsNil(o.Digest) {
		toSerialize["digest"] = o.Digest
	}
	if !IsNil(o.KeyData) {
		toSerialize["keyData"] = o.KeyData
	}
	if !IsNil(o.ComposedKeyData) {
		toSerialize["composedKeyData"] = o.ComposedKeyData
	}
	return toSerialize, nil
}

type NullableDnssecKey struct {
	value *DnssecKey
	isSet bool
}

func (v NullableDnssecKey) Get() *DnssecKey {
	return v.value
}

func (v *NullableDnssecKey) Set(val *DnssecKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDnssecKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDnssecKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnssecKey(val *DnssecKey) *NullableDnssecKey {
	return &NullableDnssecKey{value: val, isSet: true}
}

func (v NullableDnssecKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnssecKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
