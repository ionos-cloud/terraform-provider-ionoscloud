/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the RestoreSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreSnapshot{}

// RestoreSnapshot struct for RestoreSnapshot
type RestoreSnapshot struct {
	Properties *RestoreSnapshotProperties `json:"properties,omitempty"`
}

// NewRestoreSnapshot instantiates a new RestoreSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSnapshot() *RestoreSnapshot {
	this := RestoreSnapshot{}

	return &this
}

// NewRestoreSnapshotWithDefaults instantiates a new RestoreSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSnapshotWithDefaults() *RestoreSnapshot {
	this := RestoreSnapshot{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *RestoreSnapshot) GetProperties() RestoreSnapshotProperties {
	if o == nil || IsNil(o.Properties) {
		var ret RestoreSnapshotProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreSnapshot) GetPropertiesOk() (*RestoreSnapshotProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *RestoreSnapshot) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given RestoreSnapshotProperties and assigns it to the Properties field.
func (o *RestoreSnapshot) SetProperties(v RestoreSnapshotProperties) {
	o.Properties = &v
}

func (o RestoreSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableRestoreSnapshot struct {
	value *RestoreSnapshot
	isSet bool
}

func (v NullableRestoreSnapshot) Get() *RestoreSnapshot {
	return v.value
}

func (v *NullableRestoreSnapshot) Set(val *RestoreSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSnapshot(val *RestoreSnapshot) *NullableRestoreSnapshot {
	return &NullableRestoreSnapshot{value: val, isSet: true}
}

func (v NullableRestoreSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
