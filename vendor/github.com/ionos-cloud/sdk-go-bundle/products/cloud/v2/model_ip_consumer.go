/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the IpConsumer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpConsumer{}

// IpConsumer struct for IpConsumer
type IpConsumer struct {
	Ip              *string `json:"ip,omitempty"`
	Mac             *string `json:"mac,omitempty"`
	NicId           *string `json:"nicId,omitempty"`
	ServerId        *string `json:"serverId,omitempty"`
	ServerName      *string `json:"serverName,omitempty"`
	DatacenterId    *string `json:"datacenterId,omitempty"`
	DatacenterName  *string `json:"datacenterName,omitempty"`
	K8sNodePoolUuid *string `json:"k8sNodePoolUuid,omitempty"`
	K8sClusterUuid  *string `json:"k8sClusterUuid,omitempty"`
}

// NewIpConsumer instantiates a new IpConsumer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpConsumer() *IpConsumer {
	this := IpConsumer{}

	return &this
}

// NewIpConsumerWithDefaults instantiates a new IpConsumer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpConsumerWithDefaults() *IpConsumer {
	this := IpConsumer{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *IpConsumer) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *IpConsumer) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *IpConsumer) SetIp(v string) {
	o.Ip = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *IpConsumer) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *IpConsumer) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *IpConsumer) SetMac(v string) {
	o.Mac = &v
}

// GetNicId returns the NicId field value if set, zero value otherwise.
func (o *IpConsumer) GetNicId() string {
	if o == nil || IsNil(o.NicId) {
		var ret string
		return ret
	}
	return *o.NicId
}

// GetNicIdOk returns a tuple with the NicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetNicIdOk() (*string, bool) {
	if o == nil || IsNil(o.NicId) {
		return nil, false
	}
	return o.NicId, true
}

// HasNicId returns a boolean if a field has been set.
func (o *IpConsumer) HasNicId() bool {
	if o != nil && !IsNil(o.NicId) {
		return true
	}

	return false
}

// SetNicId gets a reference to the given string and assigns it to the NicId field.
func (o *IpConsumer) SetNicId(v string) {
	o.NicId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *IpConsumer) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *IpConsumer) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *IpConsumer) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *IpConsumer) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *IpConsumer) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *IpConsumer) SetServerName(v string) {
	o.ServerName = &v
}

// GetDatacenterId returns the DatacenterId field value if set, zero value otherwise.
func (o *IpConsumer) GetDatacenterId() string {
	if o == nil || IsNil(o.DatacenterId) {
		var ret string
		return ret
	}
	return *o.DatacenterId
}

// GetDatacenterIdOk returns a tuple with the DatacenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetDatacenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterId) {
		return nil, false
	}
	return o.DatacenterId, true
}

// HasDatacenterId returns a boolean if a field has been set.
func (o *IpConsumer) HasDatacenterId() bool {
	if o != nil && !IsNil(o.DatacenterId) {
		return true
	}

	return false
}

// SetDatacenterId gets a reference to the given string and assigns it to the DatacenterId field.
func (o *IpConsumer) SetDatacenterId(v string) {
	o.DatacenterId = &v
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *IpConsumer) GetDatacenterName() string {
	if o == nil || IsNil(o.DatacenterName) {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetDatacenterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterName) {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *IpConsumer) HasDatacenterName() bool {
	if o != nil && !IsNil(o.DatacenterName) {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *IpConsumer) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetK8sNodePoolUuid returns the K8sNodePoolUuid field value if set, zero value otherwise.
func (o *IpConsumer) GetK8sNodePoolUuid() string {
	if o == nil || IsNil(o.K8sNodePoolUuid) {
		var ret string
		return ret
	}
	return *o.K8sNodePoolUuid
}

// GetK8sNodePoolUuidOk returns a tuple with the K8sNodePoolUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetK8sNodePoolUuidOk() (*string, bool) {
	if o == nil || IsNil(o.K8sNodePoolUuid) {
		return nil, false
	}
	return o.K8sNodePoolUuid, true
}

// HasK8sNodePoolUuid returns a boolean if a field has been set.
func (o *IpConsumer) HasK8sNodePoolUuid() bool {
	if o != nil && !IsNil(o.K8sNodePoolUuid) {
		return true
	}

	return false
}

// SetK8sNodePoolUuid gets a reference to the given string and assigns it to the K8sNodePoolUuid field.
func (o *IpConsumer) SetK8sNodePoolUuid(v string) {
	o.K8sNodePoolUuid = &v
}

// GetK8sClusterUuid returns the K8sClusterUuid field value if set, zero value otherwise.
func (o *IpConsumer) GetK8sClusterUuid() string {
	if o == nil || IsNil(o.K8sClusterUuid) {
		var ret string
		return ret
	}
	return *o.K8sClusterUuid
}

// GetK8sClusterUuidOk returns a tuple with the K8sClusterUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpConsumer) GetK8sClusterUuidOk() (*string, bool) {
	if o == nil || IsNil(o.K8sClusterUuid) {
		return nil, false
	}
	return o.K8sClusterUuid, true
}

// HasK8sClusterUuid returns a boolean if a field has been set.
func (o *IpConsumer) HasK8sClusterUuid() bool {
	if o != nil && !IsNil(o.K8sClusterUuid) {
		return true
	}

	return false
}

// SetK8sClusterUuid gets a reference to the given string and assigns it to the K8sClusterUuid field.
func (o *IpConsumer) SetK8sClusterUuid(v string) {
	o.K8sClusterUuid = &v
}

func (o IpConsumer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpConsumer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.NicId) {
		toSerialize["nicId"] = o.NicId
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["serverName"] = o.ServerName
	}
	if !IsNil(o.DatacenterId) {
		toSerialize["datacenterId"] = o.DatacenterId
	}
	if !IsNil(o.DatacenterName) {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if !IsNil(o.K8sNodePoolUuid) {
		toSerialize["k8sNodePoolUuid"] = o.K8sNodePoolUuid
	}
	if !IsNil(o.K8sClusterUuid) {
		toSerialize["k8sClusterUuid"] = o.K8sClusterUuid
	}
	return toSerialize, nil
}

type NullableIpConsumer struct {
	value *IpConsumer
	isSet bool
}

func (v NullableIpConsumer) Get() *IpConsumer {
	return v.value
}

func (v *NullableIpConsumer) Set(val *IpConsumer) {
	v.value = val
	v.isSet = true
}

func (v NullableIpConsumer) IsSet() bool {
	return v.isSet
}

func (v *NullableIpConsumer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpConsumer(val *IpConsumer) *NullableIpConsumer {
	return &NullableIpConsumer{value: val, isSet: true}
}

func (v NullableIpConsumer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpConsumer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
