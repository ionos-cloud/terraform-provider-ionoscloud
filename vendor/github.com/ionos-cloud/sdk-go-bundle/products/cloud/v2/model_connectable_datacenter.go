/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the ConnectableDatacenter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectableDatacenter{}

// ConnectableDatacenter struct for ConnectableDatacenter
type ConnectableDatacenter struct {
	// Identifier of the virtual data center that can be connected to the Cross Connect.
	Id *string `json:"id,omitempty"`
	// Name of the virtual data center that can be connected to the Cross Connect.
	Name *string `json:"name,omitempty"`
	// Location of the virtual data center that can be connected to the Cross Connect.
	Location *string `json:"location,omitempty"`
}

// NewConnectableDatacenter instantiates a new ConnectableDatacenter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectableDatacenter() *ConnectableDatacenter {
	this := ConnectableDatacenter{}

	return &this
}

// NewConnectableDatacenterWithDefaults instantiates a new ConnectableDatacenter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectableDatacenterWithDefaults() *ConnectableDatacenter {
	this := ConnectableDatacenter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectableDatacenter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectableDatacenter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectableDatacenter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectableDatacenter) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectableDatacenter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectableDatacenter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectableDatacenter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectableDatacenter) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ConnectableDatacenter) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectableDatacenter) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ConnectableDatacenter) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ConnectableDatacenter) SetLocation(v string) {
	o.Location = &v
}

func (o ConnectableDatacenter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectableDatacenter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableConnectableDatacenter struct {
	value *ConnectableDatacenter
	isSet bool
}

func (v NullableConnectableDatacenter) Get() *ConnectableDatacenter {
	return v.value
}

func (v *NullableConnectableDatacenter) Set(val *ConnectableDatacenter) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectableDatacenter) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectableDatacenter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectableDatacenter(val *ConnectableDatacenter) *NullableConnectableDatacenter {
	return &NullableConnectableDatacenter{value: val, isSet: true}
}

func (v NullableConnectableDatacenter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectableDatacenter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
