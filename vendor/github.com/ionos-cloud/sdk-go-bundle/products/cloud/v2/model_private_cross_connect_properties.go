/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the PrivateCrossConnectProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateCrossConnectProperties{}

// PrivateCrossConnectProperties struct for PrivateCrossConnectProperties
type PrivateCrossConnectProperties struct {
	// The name of the Cross Connect.
	Name *string `json:"name,omitempty"`
	// Human-readable description of the Cross Connect.
	Description *string `json:"description,omitempty"`
	// Read-Only attribute. Lists LAN's connected to this Cross Connect.
	Peers []Peer `json:"peers,omitempty"`
	// Read-Only attribute. Lists data centers that can be connected to this Cross Connect. If the Cross Connect is not connected to any LANs it lists all VDCs the user has access to. If the Cross Connect is connected to at least 1 LAN it lists all VDCs the user has access to in the location of the connected LAN.
	ConnectableDatacenters []ConnectableDatacenter `json:"connectableDatacenters,omitempty"`
}

// NewPrivateCrossConnectProperties instantiates a new PrivateCrossConnectProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateCrossConnectProperties() *PrivateCrossConnectProperties {
	this := PrivateCrossConnectProperties{}

	return &this
}

// NewPrivateCrossConnectPropertiesWithDefaults instantiates a new PrivateCrossConnectProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateCrossConnectPropertiesWithDefaults() *PrivateCrossConnectProperties {
	this := PrivateCrossConnectProperties{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrivateCrossConnectProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateCrossConnectProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrivateCrossConnectProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrivateCrossConnectProperties) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PrivateCrossConnectProperties) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateCrossConnectProperties) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PrivateCrossConnectProperties) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PrivateCrossConnectProperties) SetDescription(v string) {
	o.Description = &v
}

// GetPeers returns the Peers field value if set, zero value otherwise.
func (o *PrivateCrossConnectProperties) GetPeers() []Peer {
	if o == nil || IsNil(o.Peers) {
		var ret []Peer
		return ret
	}
	return o.Peers
}

// GetPeersOk returns a tuple with the Peers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateCrossConnectProperties) GetPeersOk() ([]Peer, bool) {
	if o == nil || IsNil(o.Peers) {
		return nil, false
	}
	return o.Peers, true
}

// HasPeers returns a boolean if a field has been set.
func (o *PrivateCrossConnectProperties) HasPeers() bool {
	if o != nil && !IsNil(o.Peers) {
		return true
	}

	return false
}

// SetPeers gets a reference to the given []Peer and assigns it to the Peers field.
func (o *PrivateCrossConnectProperties) SetPeers(v []Peer) {
	o.Peers = v
}

// GetConnectableDatacenters returns the ConnectableDatacenters field value if set, zero value otherwise.
func (o *PrivateCrossConnectProperties) GetConnectableDatacenters() []ConnectableDatacenter {
	if o == nil || IsNil(o.ConnectableDatacenters) {
		var ret []ConnectableDatacenter
		return ret
	}
	return o.ConnectableDatacenters
}

// GetConnectableDatacentersOk returns a tuple with the ConnectableDatacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateCrossConnectProperties) GetConnectableDatacentersOk() ([]ConnectableDatacenter, bool) {
	if o == nil || IsNil(o.ConnectableDatacenters) {
		return nil, false
	}
	return o.ConnectableDatacenters, true
}

// HasConnectableDatacenters returns a boolean if a field has been set.
func (o *PrivateCrossConnectProperties) HasConnectableDatacenters() bool {
	if o != nil && !IsNil(o.ConnectableDatacenters) {
		return true
	}

	return false
}

// SetConnectableDatacenters gets a reference to the given []ConnectableDatacenter and assigns it to the ConnectableDatacenters field.
func (o *PrivateCrossConnectProperties) SetConnectableDatacenters(v []ConnectableDatacenter) {
	o.ConnectableDatacenters = v
}

func (o PrivateCrossConnectProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateCrossConnectProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Peers) {
		toSerialize["peers"] = o.Peers
	}
	if !IsNil(o.ConnectableDatacenters) {
		toSerialize["connectableDatacenters"] = o.ConnectableDatacenters
	}
	return toSerialize, nil
}

type NullablePrivateCrossConnectProperties struct {
	value *PrivateCrossConnectProperties
	isSet bool
}

func (v NullablePrivateCrossConnectProperties) Get() *PrivateCrossConnectProperties {
	return v.value
}

func (v *NullablePrivateCrossConnectProperties) Set(val *PrivateCrossConnectProperties) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateCrossConnectProperties) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateCrossConnectProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateCrossConnectProperties(val *PrivateCrossConnectProperties) *NullablePrivateCrossConnectProperties {
	return &NullablePrivateCrossConnectProperties{value: val, isSet: true}
}

func (v NullablePrivateCrossConnectProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateCrossConnectProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
