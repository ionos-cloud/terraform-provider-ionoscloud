/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the UserPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPost{}

// UserPost struct for UserPost
type UserPost struct {
	Properties UserPropertiesPost `json:"properties"`
}

// NewUserPost instantiates a new UserPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPost(properties UserPropertiesPost) *UserPost {
	this := UserPost{}

	this.Properties = properties

	return &this
}

// NewUserPostWithDefaults instantiates a new UserPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostWithDefaults() *UserPost {
	this := UserPost{}
	return &this
}

// GetProperties returns the Properties field value
func (o *UserPost) GetProperties() UserPropertiesPost {
	if o == nil {
		var ret UserPropertiesPost
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *UserPost) GetPropertiesOk() (*UserPropertiesPost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *UserPost) SetProperties(v UserPropertiesPost) {
	o.Properties = v
}

func (o UserPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableUserPost struct {
	value *UserPost
	isSet bool
}

func (v NullableUserPost) Get() *UserPost {
	return v.value
}

func (v *NullableUserPost) Set(val *UserPost) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPost) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPost(val *UserPost) *NullableUserPost {
	return &NullableUserPost{value: val, isSet: true}
}

func (v NullableUserPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
