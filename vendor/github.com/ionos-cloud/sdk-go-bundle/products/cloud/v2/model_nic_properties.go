/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the NicProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NicProperties{}

// NicProperties struct for NicProperties
type NicProperties struct {
	// The name of the  resource.
	Name *string `json:"name,omitempty"`
	// The MAC address of the NIC.
	Mac *string `json:"mac,omitempty"`
	// Collection of IP addresses, assigned to the NIC. Explicitly assigned public IPs need to come from reserved IP blocks. Passing value null or empty array will assign an IP address automatically.
	Ips []string `json:"ips,omitempty"`
	// Indicates if the NIC will reserve an IP using DHCP.
	Dhcp *bool `json:"dhcp,omitempty"`
	// If this NIC is connected to an IPv6 enabled LAN then this property contains the IPv6 IP addresses of the NIC. The maximum number of IPv6 IP addresses per NIC is 50, if you need more, contact support. If you leave this property 'null' when adding a NIC, when changing the NIC's IPv6 CIDR block, when changing the LAN's IPv6 CIDR block or when moving the NIC to a different IPv6 enabled LAN, then we will automatically assign the same number of IPv6 addresses which you had before from the NICs new CIDR block. If you leave this property 'null' while not changing the CIDR block, the IPv6 IP addresses won't be changed either. You can also provide your own self choosen IPv6 addresses, which then must be inside the IPv6 CIDR block of this NIC.
	Ipv6Ips []string `json:"ipv6Ips,omitempty"`
	// If this NIC is connected to an IPv6 enabled LAN then this property contains the /80 IPv6 CIDR block of the NIC. If you leave this property 'null' when adding a NIC to an IPv6-enabled LAN, then an IPv6 CIDR block will automatically be assigned to the NIC, but you can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique. This value can only be set, if the LAN already has an IPv6 CIDR block assigned. An IPv6-enabled LAN is limited to a maximum of 65,536 NICs.
	Ipv6CidrBlock NullableString `json:"ipv6CidrBlock,omitempty"`
	// Indicates if the NIC will receive an IPv6 using DHCP. It can be set to 'true' or 'false' only if this NIC is connected to an IPv6 enabled LAN.
	Dhcpv6 NullableBool `json:"dhcpv6,omitempty"`
	// The LAN ID the NIC will be on. If the LAN ID does not exist, it will be implicitly created.
	Lan int32 `json:"lan"`
	// Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
	FirewallActive *bool `json:"firewallActive,omitempty"`
	// The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
	FirewallType *string `json:"firewallType,omitempty"`
	// The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created using Cloud API and no DCD changes were performed on the Datacenter.
	DeviceNumber *int32 `json:"deviceNumber,omitempty"`
	// The PCI slot number for the NIC.
	PciSlot *int32 `json:"pciSlot,omitempty"`
	// The vnet ID that belongs to this NIC; Requires system privileges, for internal usage only
	Vnet *string `json:"vnet,omitempty"`
}

// NewNicProperties instantiates a new NicProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNicProperties(lan int32) *NicProperties {
	this := NicProperties{}

	var dhcp bool = true
	this.Dhcp = &dhcp
	this.Lan = lan

	return &this
}

// NewNicPropertiesWithDefaults instantiates a new NicProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNicPropertiesWithDefaults() *NicProperties {
	this := NicProperties{}
	var dhcp bool = true
	this.Dhcp = &dhcp
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NicProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NicProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NicProperties) SetName(v string) {
	o.Name = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *NicProperties) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *NicProperties) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *NicProperties) SetMac(v string) {
	o.Mac = &v
}

// GetIps returns the Ips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NicProperties) GetIps() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NicProperties) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *NicProperties) HasIps() bool {
	if o != nil && IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *NicProperties) SetIps(v []string) {
	o.Ips = v
}

// GetDhcp returns the Dhcp field value if set, zero value otherwise.
func (o *NicProperties) GetDhcp() bool {
	if o == nil || IsNil(o.Dhcp) {
		var ret bool
		return ret
	}
	return *o.Dhcp
}

// GetDhcpOk returns a tuple with the Dhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.Dhcp) {
		return nil, false
	}
	return o.Dhcp, true
}

// HasDhcp returns a boolean if a field has been set.
func (o *NicProperties) HasDhcp() bool {
	if o != nil && !IsNil(o.Dhcp) {
		return true
	}

	return false
}

// SetDhcp gets a reference to the given bool and assigns it to the Dhcp field.
func (o *NicProperties) SetDhcp(v bool) {
	o.Dhcp = &v
}

// GetIpv6Ips returns the Ipv6Ips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NicProperties) GetIpv6Ips() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ipv6Ips
}

// GetIpv6IpsOk returns a tuple with the Ipv6Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NicProperties) GetIpv6IpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ipv6Ips) {
		return nil, false
	}
	return o.Ipv6Ips, true
}

// HasIpv6Ips returns a boolean if a field has been set.
func (o *NicProperties) HasIpv6Ips() bool {
	if o != nil && IsNil(o.Ipv6Ips) {
		return true
	}

	return false
}

// SetIpv6Ips gets a reference to the given []string and assigns it to the Ipv6Ips field.
func (o *NicProperties) SetIpv6Ips(v []string) {
	o.Ipv6Ips = v
}

// GetIpv6CidrBlock returns the Ipv6CidrBlock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NicProperties) GetIpv6CidrBlock() string {
	if o == nil || IsNil(o.Ipv6CidrBlock.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv6CidrBlock.Get()
}

// GetIpv6CidrBlockOk returns a tuple with the Ipv6CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NicProperties) GetIpv6CidrBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6CidrBlock.Get(), o.Ipv6CidrBlock.IsSet()
}

// HasIpv6CidrBlock returns a boolean if a field has been set.
func (o *NicProperties) HasIpv6CidrBlock() bool {
	if o != nil && o.Ipv6CidrBlock.IsSet() {
		return true
	}

	return false
}

// SetIpv6CidrBlock gets a reference to the given NullableString and assigns it to the Ipv6CidrBlock field.
func (o *NicProperties) SetIpv6CidrBlock(v string) {
	o.Ipv6CidrBlock.Set(&v)
}

// SetIpv6CidrBlockNil sets the value for Ipv6CidrBlock to be an explicit nil
func (o *NicProperties) SetIpv6CidrBlockNil() {
	o.Ipv6CidrBlock.Set(nil)
}

// UnsetIpv6CidrBlock ensures that no value is present for Ipv6CidrBlock, not even an explicit nil
func (o *NicProperties) UnsetIpv6CidrBlock() {
	o.Ipv6CidrBlock.Unset()
}

// GetDhcpv6 returns the Dhcpv6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NicProperties) GetDhcpv6() bool {
	if o == nil || IsNil(o.Dhcpv6.Get()) {
		var ret bool
		return ret
	}
	return *o.Dhcpv6.Get()
}

// GetDhcpv6Ok returns a tuple with the Dhcpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NicProperties) GetDhcpv6Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dhcpv6.Get(), o.Dhcpv6.IsSet()
}

// HasDhcpv6 returns a boolean if a field has been set.
func (o *NicProperties) HasDhcpv6() bool {
	if o != nil && o.Dhcpv6.IsSet() {
		return true
	}

	return false
}

// SetDhcpv6 gets a reference to the given NullableBool and assigns it to the Dhcpv6 field.
func (o *NicProperties) SetDhcpv6(v bool) {
	o.Dhcpv6.Set(&v)
}

// SetDhcpv6Nil sets the value for Dhcpv6 to be an explicit nil
func (o *NicProperties) SetDhcpv6Nil() {
	o.Dhcpv6.Set(nil)
}

// UnsetDhcpv6 ensures that no value is present for Dhcpv6, not even an explicit nil
func (o *NicProperties) UnsetDhcpv6() {
	o.Dhcpv6.Unset()
}

// GetLan returns the Lan field value
func (o *NicProperties) GetLan() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lan
}

// GetLanOk returns a tuple with the Lan field value
// and a boolean to check if the value has been set.
func (o *NicProperties) GetLanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lan, true
}

// SetLan sets field value
func (o *NicProperties) SetLan(v int32) {
	o.Lan = v
}

// GetFirewallActive returns the FirewallActive field value if set, zero value otherwise.
func (o *NicProperties) GetFirewallActive() bool {
	if o == nil || IsNil(o.FirewallActive) {
		var ret bool
		return ret
	}
	return *o.FirewallActive
}

// GetFirewallActiveOk returns a tuple with the FirewallActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetFirewallActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.FirewallActive) {
		return nil, false
	}
	return o.FirewallActive, true
}

// HasFirewallActive returns a boolean if a field has been set.
func (o *NicProperties) HasFirewallActive() bool {
	if o != nil && !IsNil(o.FirewallActive) {
		return true
	}

	return false
}

// SetFirewallActive gets a reference to the given bool and assigns it to the FirewallActive field.
func (o *NicProperties) SetFirewallActive(v bool) {
	o.FirewallActive = &v
}

// GetFirewallType returns the FirewallType field value if set, zero value otherwise.
func (o *NicProperties) GetFirewallType() string {
	if o == nil || IsNil(o.FirewallType) {
		var ret string
		return ret
	}
	return *o.FirewallType
}

// GetFirewallTypeOk returns a tuple with the FirewallType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetFirewallTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FirewallType) {
		return nil, false
	}
	return o.FirewallType, true
}

// HasFirewallType returns a boolean if a field has been set.
func (o *NicProperties) HasFirewallType() bool {
	if o != nil && !IsNil(o.FirewallType) {
		return true
	}

	return false
}

// SetFirewallType gets a reference to the given string and assigns it to the FirewallType field.
func (o *NicProperties) SetFirewallType(v string) {
	o.FirewallType = &v
}

// GetDeviceNumber returns the DeviceNumber field value if set, zero value otherwise.
func (o *NicProperties) GetDeviceNumber() int32 {
	if o == nil || IsNil(o.DeviceNumber) {
		var ret int32
		return ret
	}
	return *o.DeviceNumber
}

// GetDeviceNumberOk returns a tuple with the DeviceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetDeviceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceNumber) {
		return nil, false
	}
	return o.DeviceNumber, true
}

// HasDeviceNumber returns a boolean if a field has been set.
func (o *NicProperties) HasDeviceNumber() bool {
	if o != nil && !IsNil(o.DeviceNumber) {
		return true
	}

	return false
}

// SetDeviceNumber gets a reference to the given int32 and assigns it to the DeviceNumber field.
func (o *NicProperties) SetDeviceNumber(v int32) {
	o.DeviceNumber = &v
}

// GetPciSlot returns the PciSlot field value if set, zero value otherwise.
func (o *NicProperties) GetPciSlot() int32 {
	if o == nil || IsNil(o.PciSlot) {
		var ret int32
		return ret
	}
	return *o.PciSlot
}

// GetPciSlotOk returns a tuple with the PciSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetPciSlotOk() (*int32, bool) {
	if o == nil || IsNil(o.PciSlot) {
		return nil, false
	}
	return o.PciSlot, true
}

// HasPciSlot returns a boolean if a field has been set.
func (o *NicProperties) HasPciSlot() bool {
	if o != nil && !IsNil(o.PciSlot) {
		return true
	}

	return false
}

// SetPciSlot gets a reference to the given int32 and assigns it to the PciSlot field.
func (o *NicProperties) SetPciSlot(v int32) {
	o.PciSlot = &v
}

// GetVnet returns the Vnet field value if set, zero value otherwise.
func (o *NicProperties) GetVnet() string {
	if o == nil || IsNil(o.Vnet) {
		var ret string
		return ret
	}
	return *o.Vnet
}

// GetVnetOk returns a tuple with the Vnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicProperties) GetVnetOk() (*string, bool) {
	if o == nil || IsNil(o.Vnet) {
		return nil, false
	}
	return o.Vnet, true
}

// HasVnet returns a boolean if a field has been set.
func (o *NicProperties) HasVnet() bool {
	if o != nil && !IsNil(o.Vnet) {
		return true
	}

	return false
}

// SetVnet gets a reference to the given string and assigns it to the Vnet field.
func (o *NicProperties) SetVnet(v string) {
	o.Vnet = &v
}

func (o NicProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NicProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if !IsNil(o.Dhcp) {
		toSerialize["dhcp"] = o.Dhcp
	}
	if o.Ipv6Ips != nil {
		toSerialize["ipv6Ips"] = o.Ipv6Ips
	}
	if o.Ipv6CidrBlock.IsSet() {
		toSerialize["ipv6CidrBlock"] = o.Ipv6CidrBlock.Get()
	}
	if o.Dhcpv6.IsSet() {
		toSerialize["dhcpv6"] = o.Dhcpv6.Get()
	}
	toSerialize["lan"] = o.Lan
	if !IsNil(o.FirewallActive) {
		toSerialize["firewallActive"] = o.FirewallActive
	}
	if !IsNil(o.FirewallType) {
		toSerialize["firewallType"] = o.FirewallType
	}
	if !IsNil(o.DeviceNumber) {
		toSerialize["deviceNumber"] = o.DeviceNumber
	}
	if !IsNil(o.PciSlot) {
		toSerialize["pciSlot"] = o.PciSlot
	}
	if !IsNil(o.Vnet) {
		toSerialize["vnet"] = o.Vnet
	}
	return toSerialize, nil
}

type NullableNicProperties struct {
	value *NicProperties
	isSet bool
}

func (v NullableNicProperties) Get() *NicProperties {
	return v.value
}

func (v *NullableNicProperties) Set(val *NicProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNicProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNicProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNicProperties(val *NicProperties) *NullableNicProperties {
	return &NullableNicProperties{value: val, isSet: true}
}

func (v NullableNicProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNicProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
