/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the S3KeyProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3KeyProperties{}

// S3KeyProperties struct for S3KeyProperties
type S3KeyProperties struct {
	// Secret of the Object storage key.
	SecretKey *string `json:"secretKey,omitempty"`
	// Denotes weather the Object storage key is active.
	Active *bool `json:"active,omitempty"`
}

// NewS3KeyProperties instantiates a new S3KeyProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3KeyProperties() *S3KeyProperties {
	this := S3KeyProperties{}

	return &this
}

// NewS3KeyPropertiesWithDefaults instantiates a new S3KeyProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3KeyPropertiesWithDefaults() *S3KeyProperties {
	this := S3KeyProperties{}
	return &this
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *S3KeyProperties) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3KeyProperties) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *S3KeyProperties) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *S3KeyProperties) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *S3KeyProperties) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3KeyProperties) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *S3KeyProperties) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *S3KeyProperties) SetActive(v bool) {
	o.Active = &v
}

func (o S3KeyProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3KeyProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecretKey) {
		toSerialize["secretKey"] = o.SecretKey
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableS3KeyProperties struct {
	value *S3KeyProperties
	isSet bool
}

func (v NullableS3KeyProperties) Get() *S3KeyProperties {
	return v.value
}

func (v *NullableS3KeyProperties) Set(val *S3KeyProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableS3KeyProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableS3KeyProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3KeyProperties(val *S3KeyProperties) *NullableS3KeyProperties {
	return &NullableS3KeyProperties{value: val, isSet: true}
}

func (v NullableS3KeyProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3KeyProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
