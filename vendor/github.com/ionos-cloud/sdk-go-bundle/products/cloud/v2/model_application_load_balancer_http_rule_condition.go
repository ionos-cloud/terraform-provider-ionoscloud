/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the ApplicationLoadBalancerHttpRuleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationLoadBalancerHttpRuleCondition{}

// ApplicationLoadBalancerHttpRuleCondition struct for ApplicationLoadBalancerHttpRuleCondition
type ApplicationLoadBalancerHttpRuleCondition struct {
	// The HTTP rule condition type.
	Type string `json:"type"`
	// The matching rule for the HTTP rule condition attribute; this parameter is mandatory for 'HEADER', 'PATH', 'QUERY', 'METHOD', 'HOST', and 'COOKIE' types. It must be 'null' if the type is 'SOURCE_IP'.
	Condition string `json:"condition"`
	// Specifies whether the condition should be negated; the default value is 'FALSE'.
	Negate *bool `json:"negate,omitempty"`
	// The key can only be set when the HTTP rule condition type is 'COOKIES', 'HEADER', or 'QUERY'. For the type 'PATH', 'METHOD', 'HOST', or 'SOURCE_IP' the value must be 'null'.
	Key *string `json:"key,omitempty"`
	// This parameter is mandatory for the conditions 'CONTAINS', 'EQUALS', 'MATCHES', 'STARTS_WITH', 'ENDS_WITH', or if the type is 'SOURCE_IP'. Specify a valid CIDR. If the condition is 'EXISTS', the value must be 'null'.
	Value *string `json:"value,omitempty"`
}

// NewApplicationLoadBalancerHttpRuleCondition instantiates a new ApplicationLoadBalancerHttpRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationLoadBalancerHttpRuleCondition(type_ string, condition string) *ApplicationLoadBalancerHttpRuleCondition {
	this := ApplicationLoadBalancerHttpRuleCondition{}

	this.Type = type_
	this.Condition = condition

	return &this
}

// NewApplicationLoadBalancerHttpRuleConditionWithDefaults instantiates a new ApplicationLoadBalancerHttpRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationLoadBalancerHttpRuleConditionWithDefaults() *ApplicationLoadBalancerHttpRuleCondition {
	this := ApplicationLoadBalancerHttpRuleCondition{}
	return &this
}

// GetType returns the Type field value
func (o *ApplicationLoadBalancerHttpRuleCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApplicationLoadBalancerHttpRuleCondition) SetType(v string) {
	o.Type = v
}

// GetCondition returns the Condition field value
func (o *ApplicationLoadBalancerHttpRuleCondition) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *ApplicationLoadBalancerHttpRuleCondition) SetCondition(v string) {
	o.Condition = v
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *ApplicationLoadBalancerHttpRuleCondition) SetNegate(v bool) {
	o.Negate = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ApplicationLoadBalancerHttpRuleCondition) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApplicationLoadBalancerHttpRuleCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApplicationLoadBalancerHttpRuleCondition) SetValue(v string) {
	o.Value = &v
}

func (o ApplicationLoadBalancerHttpRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationLoadBalancerHttpRuleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["condition"] = o.Condition
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableApplicationLoadBalancerHttpRuleCondition struct {
	value *ApplicationLoadBalancerHttpRuleCondition
	isSet bool
}

func (v NullableApplicationLoadBalancerHttpRuleCondition) Get() *ApplicationLoadBalancerHttpRuleCondition {
	return v.value
}

func (v *NullableApplicationLoadBalancerHttpRuleCondition) Set(val *ApplicationLoadBalancerHttpRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationLoadBalancerHttpRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationLoadBalancerHttpRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationLoadBalancerHttpRuleCondition(val *ApplicationLoadBalancerHttpRuleCondition) *NullableApplicationLoadBalancerHttpRuleCondition {
	return &NullableApplicationLoadBalancerHttpRuleCondition{value: val, isSet: true}
}

func (v NullableApplicationLoadBalancerHttpRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationLoadBalancerHttpRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
