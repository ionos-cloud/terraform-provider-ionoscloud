/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the ContractProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractProperties{}

// ContractProperties struct for ContractProperties
type ContractProperties struct {
	// The contract number.
	ContractNumber *int64 `json:"contractNumber,omitempty"`
	// The contract owner's user name.
	Owner *string `json:"owner,omitempty"`
	// The contract status.
	Status *string `json:"status,omitempty"`
	// The registration domain of the contract.
	RegDomain      *string         `json:"regDomain,omitempty"`
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
}

// NewContractProperties instantiates a new ContractProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractProperties() *ContractProperties {
	this := ContractProperties{}

	return &this
}

// NewContractPropertiesWithDefaults instantiates a new ContractProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractPropertiesWithDefaults() *ContractProperties {
	this := ContractProperties{}
	return &this
}

// GetContractNumber returns the ContractNumber field value if set, zero value otherwise.
func (o *ContractProperties) GetContractNumber() int64 {
	if o == nil || IsNil(o.ContractNumber) {
		var ret int64
		return ret
	}
	return *o.ContractNumber
}

// GetContractNumberOk returns a tuple with the ContractNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractProperties) GetContractNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.ContractNumber) {
		return nil, false
	}
	return o.ContractNumber, true
}

// HasContractNumber returns a boolean if a field has been set.
func (o *ContractProperties) HasContractNumber() bool {
	if o != nil && !IsNil(o.ContractNumber) {
		return true
	}

	return false
}

// SetContractNumber gets a reference to the given int64 and assigns it to the ContractNumber field.
func (o *ContractProperties) SetContractNumber(v int64) {
	o.ContractNumber = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ContractProperties) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractProperties) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ContractProperties) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ContractProperties) SetOwner(v string) {
	o.Owner = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContractProperties) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractProperties) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContractProperties) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContractProperties) SetStatus(v string) {
	o.Status = &v
}

// GetRegDomain returns the RegDomain field value if set, zero value otherwise.
func (o *ContractProperties) GetRegDomain() string {
	if o == nil || IsNil(o.RegDomain) {
		var ret string
		return ret
	}
	return *o.RegDomain
}

// GetRegDomainOk returns a tuple with the RegDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractProperties) GetRegDomainOk() (*string, bool) {
	if o == nil || IsNil(o.RegDomain) {
		return nil, false
	}
	return o.RegDomain, true
}

// HasRegDomain returns a boolean if a field has been set.
func (o *ContractProperties) HasRegDomain() bool {
	if o != nil && !IsNil(o.RegDomain) {
		return true
	}

	return false
}

// SetRegDomain gets a reference to the given string and assigns it to the RegDomain field.
func (o *ContractProperties) SetRegDomain(v string) {
	o.RegDomain = &v
}

// GetResourceLimits returns the ResourceLimits field value if set, zero value otherwise.
func (o *ContractProperties) GetResourceLimits() ResourceLimits {
	if o == nil || IsNil(o.ResourceLimits) {
		var ret ResourceLimits
		return ret
	}
	return *o.ResourceLimits
}

// GetResourceLimitsOk returns a tuple with the ResourceLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractProperties) GetResourceLimitsOk() (*ResourceLimits, bool) {
	if o == nil || IsNil(o.ResourceLimits) {
		return nil, false
	}
	return o.ResourceLimits, true
}

// HasResourceLimits returns a boolean if a field has been set.
func (o *ContractProperties) HasResourceLimits() bool {
	if o != nil && !IsNil(o.ResourceLimits) {
		return true
	}

	return false
}

// SetResourceLimits gets a reference to the given ResourceLimits and assigns it to the ResourceLimits field.
func (o *ContractProperties) SetResourceLimits(v ResourceLimits) {
	o.ResourceLimits = &v
}

func (o ContractProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractNumber) {
		toSerialize["contractNumber"] = o.ContractNumber
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RegDomain) {
		toSerialize["regDomain"] = o.RegDomain
	}
	if !IsNil(o.ResourceLimits) {
		toSerialize["resourceLimits"] = o.ResourceLimits
	}
	return toSerialize, nil
}

type NullableContractProperties struct {
	value *ContractProperties
	isSet bool
}

func (v NullableContractProperties) Get() *ContractProperties {
	return v.value
}

func (v *NullableContractProperties) Set(val *ContractProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableContractProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableContractProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractProperties(val *ContractProperties) *NullableContractProperties {
	return &NullableContractProperties{value: val, isSet: true}
}

func (v NullableContractProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
