/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the UserPropertiesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPropertiesPut{}

// UserPropertiesPut struct for UserPropertiesPut
type UserPropertiesPut struct {
	// The first name of the user.
	Firstname *string `json:"firstname,omitempty"`
	// The last name of the user.
	Lastname *string `json:"lastname,omitempty"`
	// The email address of the user.
	Email *string `json:"email,omitempty"`
	// password of the user
	Password *string `json:"password,omitempty"`
	// Indicates if the user has admin rights.
	Administrator *bool `json:"administrator,omitempty"`
	// Indicates if secure authentication should be forced on the user.
	ForceSecAuth *bool `json:"forceSecAuth,omitempty"`
	// Indicates if secure authentication is active for the user.
	SecAuthActive *bool `json:"secAuthActive,omitempty"`
	// Indicates if the user is active.
	Active *bool `json:"active,omitempty"`
}

// NewUserPropertiesPut instantiates a new UserPropertiesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPropertiesPut() *UserPropertiesPut {
	this := UserPropertiesPut{}

	return &this
}

// NewUserPropertiesPutWithDefaults instantiates a new UserPropertiesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPropertiesPutWithDefaults() *UserPropertiesPut {
	this := UserPropertiesPut{}
	return &this
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *UserPropertiesPut) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *UserPropertiesPut) SetLastname(v string) {
	o.Lastname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserPropertiesPut) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserPropertiesPut) SetPassword(v string) {
	o.Password = &v
}

// GetAdministrator returns the Administrator field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetAdministrator() bool {
	if o == nil || IsNil(o.Administrator) {
		var ret bool
		return ret
	}
	return *o.Administrator
}

// GetAdministratorOk returns a tuple with the Administrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.Administrator) {
		return nil, false
	}
	return o.Administrator, true
}

// HasAdministrator returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasAdministrator() bool {
	if o != nil && !IsNil(o.Administrator) {
		return true
	}

	return false
}

// SetAdministrator gets a reference to the given bool and assigns it to the Administrator field.
func (o *UserPropertiesPut) SetAdministrator(v bool) {
	o.Administrator = &v
}

// GetForceSecAuth returns the ForceSecAuth field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetForceSecAuth() bool {
	if o == nil || IsNil(o.ForceSecAuth) {
		var ret bool
		return ret
	}
	return *o.ForceSecAuth
}

// GetForceSecAuthOk returns a tuple with the ForceSecAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetForceSecAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceSecAuth) {
		return nil, false
	}
	return o.ForceSecAuth, true
}

// HasForceSecAuth returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasForceSecAuth() bool {
	if o != nil && !IsNil(o.ForceSecAuth) {
		return true
	}

	return false
}

// SetForceSecAuth gets a reference to the given bool and assigns it to the ForceSecAuth field.
func (o *UserPropertiesPut) SetForceSecAuth(v bool) {
	o.ForceSecAuth = &v
}

// GetSecAuthActive returns the SecAuthActive field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetSecAuthActive() bool {
	if o == nil || IsNil(o.SecAuthActive) {
		var ret bool
		return ret
	}
	return *o.SecAuthActive
}

// GetSecAuthActiveOk returns a tuple with the SecAuthActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetSecAuthActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.SecAuthActive) {
		return nil, false
	}
	return o.SecAuthActive, true
}

// HasSecAuthActive returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasSecAuthActive() bool {
	if o != nil && !IsNil(o.SecAuthActive) {
		return true
	}

	return false
}

// SetSecAuthActive gets a reference to the given bool and assigns it to the SecAuthActive field.
func (o *UserPropertiesPut) SetSecAuthActive(v bool) {
	o.SecAuthActive = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UserPropertiesPut) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPropertiesPut) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UserPropertiesPut) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UserPropertiesPut) SetActive(v bool) {
	o.Active = &v
}

func (o UserPropertiesPut) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPropertiesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Administrator) {
		toSerialize["administrator"] = o.Administrator
	}
	if !IsNil(o.ForceSecAuth) {
		toSerialize["forceSecAuth"] = o.ForceSecAuth
	}
	if !IsNil(o.SecAuthActive) {
		toSerialize["secAuthActive"] = o.SecAuthActive
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableUserPropertiesPut struct {
	value *UserPropertiesPut
	isSet bool
}

func (v NullableUserPropertiesPut) Get() *UserPropertiesPut {
	return v.value
}

func (v *NullableUserPropertiesPut) Set(val *UserPropertiesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPropertiesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPropertiesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPropertiesPut(val *UserPropertiesPut) *NullableUserPropertiesPut {
	return &NullableUserPropertiesPut{value: val, isSet: true}
}

func (v NullableUserPropertiesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPropertiesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
