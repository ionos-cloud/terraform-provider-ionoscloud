/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the KubernetesNodeProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNodeProperties{}

// KubernetesNodeProperties struct for KubernetesNodeProperties
type KubernetesNodeProperties struct {
	// The Kubernetes node name.
	Name string `json:"name"`
	// The public IP associated with the node.
	PublicIP *string `json:"publicIP,omitempty"`
	// The private IP associated with the node.
	PrivateIP *string `json:"privateIP,omitempty"`
	// The Kubernetes version running in the node pool. Note that this imposes restrictions on which Kubernetes versions can run in the node pools of a cluster. Also, not all Kubernetes versions are suitable upgrade targets for all earlier versions.
	K8sVersion string `json:"k8sVersion"`
}

// NewKubernetesNodeProperties instantiates a new KubernetesNodeProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNodeProperties(name string, k8sVersion string) *KubernetesNodeProperties {
	this := KubernetesNodeProperties{}

	this.Name = name
	this.K8sVersion = k8sVersion

	return &this
}

// NewKubernetesNodePropertiesWithDefaults instantiates a new KubernetesNodeProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNodePropertiesWithDefaults() *KubernetesNodeProperties {
	this := KubernetesNodeProperties{}
	return &this
}

// GetName returns the Name field value
func (o *KubernetesNodeProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodeProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesNodeProperties) SetName(v string) {
	o.Name = v
}

// GetPublicIP returns the PublicIP field value if set, zero value otherwise.
func (o *KubernetesNodeProperties) GetPublicIP() string {
	if o == nil || IsNil(o.PublicIP) {
		var ret string
		return ret
	}
	return *o.PublicIP
}

// GetPublicIPOk returns a tuple with the PublicIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeProperties) GetPublicIPOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIP) {
		return nil, false
	}
	return o.PublicIP, true
}

// HasPublicIP returns a boolean if a field has been set.
func (o *KubernetesNodeProperties) HasPublicIP() bool {
	if o != nil && !IsNil(o.PublicIP) {
		return true
	}

	return false
}

// SetPublicIP gets a reference to the given string and assigns it to the PublicIP field.
func (o *KubernetesNodeProperties) SetPublicIP(v string) {
	o.PublicIP = &v
}

// GetPrivateIP returns the PrivateIP field value if set, zero value otherwise.
func (o *KubernetesNodeProperties) GetPrivateIP() string {
	if o == nil || IsNil(o.PrivateIP) {
		var ret string
		return ret
	}
	return *o.PrivateIP
}

// GetPrivateIPOk returns a tuple with the PrivateIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesNodeProperties) GetPrivateIPOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateIP) {
		return nil, false
	}
	return o.PrivateIP, true
}

// HasPrivateIP returns a boolean if a field has been set.
func (o *KubernetesNodeProperties) HasPrivateIP() bool {
	if o != nil && !IsNil(o.PrivateIP) {
		return true
	}

	return false
}

// SetPrivateIP gets a reference to the given string and assigns it to the PrivateIP field.
func (o *KubernetesNodeProperties) SetPrivateIP(v string) {
	o.PrivateIP = &v
}

// GetK8sVersion returns the K8sVersion field value
func (o *KubernetesNodeProperties) GetK8sVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.K8sVersion
}

// GetK8sVersionOk returns a tuple with the K8sVersion field value
// and a boolean to check if the value has been set.
func (o *KubernetesNodeProperties) GetK8sVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K8sVersion, true
}

// SetK8sVersion sets field value
func (o *KubernetesNodeProperties) SetK8sVersion(v string) {
	o.K8sVersion = v
}

func (o KubernetesNodeProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNodeProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.PublicIP) {
		toSerialize["publicIP"] = o.PublicIP
	}
	if !IsNil(o.PrivateIP) {
		toSerialize["privateIP"] = o.PrivateIP
	}
	toSerialize["k8sVersion"] = o.K8sVersion
	return toSerialize, nil
}

type NullableKubernetesNodeProperties struct {
	value *KubernetesNodeProperties
	isSet bool
}

func (v NullableKubernetesNodeProperties) Get() *KubernetesNodeProperties {
	return v.value
}

func (v *NullableKubernetesNodeProperties) Set(val *KubernetesNodeProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNodeProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNodeProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNodeProperties(val *KubernetesNodeProperties) *NullableKubernetesNodeProperties {
	return &NullableKubernetesNodeProperties{value: val, isSet: true}
}

func (v NullableKubernetesNodeProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNodeProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
