/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the TargetGroupTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetGroupTarget{}

// TargetGroupTarget struct for TargetGroupTarget
type TargetGroupTarget struct {
	// The IP address of the balanced target.
	Ip string `json:"ip"`
	// The port of the balanced target service; the valid range is 1 to 65535.
	Port int32 `json:"port"`
	// The traffic is distributed proportionally to target weight, which is the ratio of the total weight of all targets. A target with higher weight receives a larger share of traffic. The valid range is from 0 to 256; the default value is '1'. Targets with a weight of '0' do not participate in load balancing but still accept persistent connections. We recommend using values in the middle range to leave room for later adjustments.
	Weight int32 `json:"weight"`
	// Proxy protocol version.
	ProxyProtocol *string `json:"proxyProtocol,omitempty"`
	// When the health check is enabled, the target is available only when it accepts regular TCP or HTTP connection attempts for state checking. The state check consists of one connection attempt with the target's address and port. The default value is 'TRUE'.
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty"`
	// When the maintenance mode is enabled, the target is prevented from receiving traffic; the default value is 'FALSE'.
	MaintenanceEnabled *bool `json:"maintenanceEnabled,omitempty"`
}

// NewTargetGroupTarget instantiates a new TargetGroupTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetGroupTarget(ip string, port int32, weight int32) *TargetGroupTarget {
	this := TargetGroupTarget{}

	this.Ip = ip
	this.Port = port
	this.Weight = weight
	var proxyProtocol string = "none"
	this.ProxyProtocol = &proxyProtocol

	return &this
}

// NewTargetGroupTargetWithDefaults instantiates a new TargetGroupTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetGroupTargetWithDefaults() *TargetGroupTarget {
	this := TargetGroupTarget{}
	var proxyProtocol string = "none"
	this.ProxyProtocol = &proxyProtocol
	return &this
}

// GetIp returns the Ip field value
func (o *TargetGroupTarget) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *TargetGroupTarget) SetIp(v string) {
	o.Ip = v
}

// GetPort returns the Port field value
func (o *TargetGroupTarget) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *TargetGroupTarget) SetPort(v int32) {
	o.Port = v
}

// GetWeight returns the Weight field value
func (o *TargetGroupTarget) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *TargetGroupTarget) SetWeight(v int32) {
	o.Weight = v
}

// GetProxyProtocol returns the ProxyProtocol field value if set, zero value otherwise.
func (o *TargetGroupTarget) GetProxyProtocol() string {
	if o == nil || IsNil(o.ProxyProtocol) {
		var ret string
		return ret
	}
	return *o.ProxyProtocol
}

// GetProxyProtocolOk returns a tuple with the ProxyProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetProxyProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyProtocol) {
		return nil, false
	}
	return o.ProxyProtocol, true
}

// HasProxyProtocol returns a boolean if a field has been set.
func (o *TargetGroupTarget) HasProxyProtocol() bool {
	if o != nil && !IsNil(o.ProxyProtocol) {
		return true
	}

	return false
}

// SetProxyProtocol gets a reference to the given string and assigns it to the ProxyProtocol field.
func (o *TargetGroupTarget) SetProxyProtocol(v string) {
	o.ProxyProtocol = &v
}

// GetHealthCheckEnabled returns the HealthCheckEnabled field value if set, zero value otherwise.
func (o *TargetGroupTarget) GetHealthCheckEnabled() bool {
	if o == nil || IsNil(o.HealthCheckEnabled) {
		var ret bool
		return ret
	}
	return *o.HealthCheckEnabled
}

// GetHealthCheckEnabledOk returns a tuple with the HealthCheckEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetHealthCheckEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HealthCheckEnabled) {
		return nil, false
	}
	return o.HealthCheckEnabled, true
}

// HasHealthCheckEnabled returns a boolean if a field has been set.
func (o *TargetGroupTarget) HasHealthCheckEnabled() bool {
	if o != nil && !IsNil(o.HealthCheckEnabled) {
		return true
	}

	return false
}

// SetHealthCheckEnabled gets a reference to the given bool and assigns it to the HealthCheckEnabled field.
func (o *TargetGroupTarget) SetHealthCheckEnabled(v bool) {
	o.HealthCheckEnabled = &v
}

// GetMaintenanceEnabled returns the MaintenanceEnabled field value if set, zero value otherwise.
func (o *TargetGroupTarget) GetMaintenanceEnabled() bool {
	if o == nil || IsNil(o.MaintenanceEnabled) {
		var ret bool
		return ret
	}
	return *o.MaintenanceEnabled
}

// GetMaintenanceEnabledOk returns a tuple with the MaintenanceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetGroupTarget) GetMaintenanceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MaintenanceEnabled) {
		return nil, false
	}
	return o.MaintenanceEnabled, true
}

// HasMaintenanceEnabled returns a boolean if a field has been set.
func (o *TargetGroupTarget) HasMaintenanceEnabled() bool {
	if o != nil && !IsNil(o.MaintenanceEnabled) {
		return true
	}

	return false
}

// SetMaintenanceEnabled gets a reference to the given bool and assigns it to the MaintenanceEnabled field.
func (o *TargetGroupTarget) SetMaintenanceEnabled(v bool) {
	o.MaintenanceEnabled = &v
}

func (o TargetGroupTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetGroupTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["port"] = o.Port
	toSerialize["weight"] = o.Weight
	if !IsNil(o.ProxyProtocol) {
		toSerialize["proxyProtocol"] = o.ProxyProtocol
	}
	if !IsNil(o.HealthCheckEnabled) {
		toSerialize["healthCheckEnabled"] = o.HealthCheckEnabled
	}
	if !IsNil(o.MaintenanceEnabled) {
		toSerialize["maintenanceEnabled"] = o.MaintenanceEnabled
	}
	return toSerialize, nil
}

type NullableTargetGroupTarget struct {
	value *TargetGroupTarget
	isSet bool
}

func (v NullableTargetGroupTarget) Get() *TargetGroupTarget {
	return v.value
}

func (v *NullableTargetGroupTarget) Set(val *TargetGroupTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetGroupTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetGroupTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetGroupTarget(val *TargetGroupTarget) *NullableTargetGroupTarget {
	return &NullableTargetGroupTarget{value: val, isSet: true}
}

func (v NullableTargetGroupTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetGroupTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
