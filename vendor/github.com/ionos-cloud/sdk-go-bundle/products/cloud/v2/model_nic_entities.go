/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the NicEntities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NicEntities{}

// NicEntities struct for NicEntities
type NicEntities struct {
	Flowlogs       *FlowLogs       `json:"flowlogs,omitempty"`
	Firewallrules  *FirewallRules  `json:"firewallrules,omitempty"`
	Securitygroups *SecurityGroups `json:"securitygroups,omitempty"`
}

// NewNicEntities instantiates a new NicEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNicEntities() *NicEntities {
	this := NicEntities{}

	return &this
}

// NewNicEntitiesWithDefaults instantiates a new NicEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNicEntitiesWithDefaults() *NicEntities {
	this := NicEntities{}
	return &this
}

// GetFlowlogs returns the Flowlogs field value if set, zero value otherwise.
func (o *NicEntities) GetFlowlogs() FlowLogs {
	if o == nil || IsNil(o.Flowlogs) {
		var ret FlowLogs
		return ret
	}
	return *o.Flowlogs
}

// GetFlowlogsOk returns a tuple with the Flowlogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicEntities) GetFlowlogsOk() (*FlowLogs, bool) {
	if o == nil || IsNil(o.Flowlogs) {
		return nil, false
	}
	return o.Flowlogs, true
}

// HasFlowlogs returns a boolean if a field has been set.
func (o *NicEntities) HasFlowlogs() bool {
	if o != nil && !IsNil(o.Flowlogs) {
		return true
	}

	return false
}

// SetFlowlogs gets a reference to the given FlowLogs and assigns it to the Flowlogs field.
func (o *NicEntities) SetFlowlogs(v FlowLogs) {
	o.Flowlogs = &v
}

// GetFirewallrules returns the Firewallrules field value if set, zero value otherwise.
func (o *NicEntities) GetFirewallrules() FirewallRules {
	if o == nil || IsNil(o.Firewallrules) {
		var ret FirewallRules
		return ret
	}
	return *o.Firewallrules
}

// GetFirewallrulesOk returns a tuple with the Firewallrules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicEntities) GetFirewallrulesOk() (*FirewallRules, bool) {
	if o == nil || IsNil(o.Firewallrules) {
		return nil, false
	}
	return o.Firewallrules, true
}

// HasFirewallrules returns a boolean if a field has been set.
func (o *NicEntities) HasFirewallrules() bool {
	if o != nil && !IsNil(o.Firewallrules) {
		return true
	}

	return false
}

// SetFirewallrules gets a reference to the given FirewallRules and assigns it to the Firewallrules field.
func (o *NicEntities) SetFirewallrules(v FirewallRules) {
	o.Firewallrules = &v
}

// GetSecuritygroups returns the Securitygroups field value if set, zero value otherwise.
func (o *NicEntities) GetSecuritygroups() SecurityGroups {
	if o == nil || IsNil(o.Securitygroups) {
		var ret SecurityGroups
		return ret
	}
	return *o.Securitygroups
}

// GetSecuritygroupsOk returns a tuple with the Securitygroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicEntities) GetSecuritygroupsOk() (*SecurityGroups, bool) {
	if o == nil || IsNil(o.Securitygroups) {
		return nil, false
	}
	return o.Securitygroups, true
}

// HasSecuritygroups returns a boolean if a field has been set.
func (o *NicEntities) HasSecuritygroups() bool {
	if o != nil && !IsNil(o.Securitygroups) {
		return true
	}

	return false
}

// SetSecuritygroups gets a reference to the given SecurityGroups and assigns it to the Securitygroups field.
func (o *NicEntities) SetSecuritygroups(v SecurityGroups) {
	o.Securitygroups = &v
}

func (o NicEntities) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NicEntities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flowlogs) {
		toSerialize["flowlogs"] = o.Flowlogs
	}
	if !IsNil(o.Firewallrules) {
		toSerialize["firewallrules"] = o.Firewallrules
	}
	if !IsNil(o.Securitygroups) {
		toSerialize["securitygroups"] = o.Securitygroups
	}
	return toSerialize, nil
}

type NullableNicEntities struct {
	value *NicEntities
	isSet bool
}

func (v NullableNicEntities) Get() *NicEntities {
	return v.value
}

func (v *NullableNicEntities) Set(val *NicEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableNicEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableNicEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNicEntities(val *NicEntities) *NullableNicEntities {
	return &NullableNicEntities{value: val, isSet: true}
}

func (v NullableNicEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNicEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
