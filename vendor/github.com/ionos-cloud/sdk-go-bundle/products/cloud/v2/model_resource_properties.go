/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the ResourceProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceProperties{}

// ResourceProperties struct for ResourceProperties
type ResourceProperties struct {
	// The name of the resource.
	Name *string `json:"name,omitempty"`
	// Boolean value representing if the resource is multi factor protected or not e.g. using two factor protection. Currently only data centers and snapshots are allowed to be multi factor protected, The value of attribute if null is intentional and it means that the resource doesn't support multi factor protection at all.
	SecAuthProtection *bool `json:"secAuthProtection,omitempty"`
}

// NewResourceProperties instantiates a new ResourceProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceProperties() *ResourceProperties {
	this := ResourceProperties{}

	return &this
}

// NewResourcePropertiesWithDefaults instantiates a new ResourceProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcePropertiesWithDefaults() *ResourceProperties {
	this := ResourceProperties{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceProperties) SetName(v string) {
	o.Name = &v
}

// GetSecAuthProtection returns the SecAuthProtection field value if set, zero value otherwise.
func (o *ResourceProperties) GetSecAuthProtection() bool {
	if o == nil || IsNil(o.SecAuthProtection) {
		var ret bool
		return ret
	}
	return *o.SecAuthProtection
}

// GetSecAuthProtectionOk returns a tuple with the SecAuthProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceProperties) GetSecAuthProtectionOk() (*bool, bool) {
	if o == nil || IsNil(o.SecAuthProtection) {
		return nil, false
	}
	return o.SecAuthProtection, true
}

// HasSecAuthProtection returns a boolean if a field has been set.
func (o *ResourceProperties) HasSecAuthProtection() bool {
	if o != nil && !IsNil(o.SecAuthProtection) {
		return true
	}

	return false
}

// SetSecAuthProtection gets a reference to the given bool and assigns it to the SecAuthProtection field.
func (o *ResourceProperties) SetSecAuthProtection(v bool) {
	o.SecAuthProtection = &v
}

func (o ResourceProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SecAuthProtection) {
		toSerialize["secAuthProtection"] = o.SecAuthProtection
	}
	return toSerialize, nil
}

type NullableResourceProperties struct {
	value *ResourceProperties
	isSet bool
}

func (v NullableResourceProperties) Get() *ResourceProperties {
	return v.value
}

func (v *NullableResourceProperties) Set(val *ResourceProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceProperties(val *ResourceProperties) *NullableResourceProperties {
	return &NullableResourceProperties{value: val, isSet: true}
}

func (v NullableResourceProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
