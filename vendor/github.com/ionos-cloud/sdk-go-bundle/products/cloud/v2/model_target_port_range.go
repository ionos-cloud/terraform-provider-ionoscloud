/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the TargetPortRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetPortRange{}

// TargetPortRange struct for TargetPortRange
type TargetPortRange struct {
	// Target port range start associated with the NAT Gateway rule.
	Start *int32 `json:"start,omitempty"`
	// Target port range end associated with the NAT Gateway rule.
	End *int32 `json:"end,omitempty"`
}

// NewTargetPortRange instantiates a new TargetPortRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetPortRange() *TargetPortRange {
	this := TargetPortRange{}

	return &this
}

// NewTargetPortRangeWithDefaults instantiates a new TargetPortRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetPortRangeWithDefaults() *TargetPortRange {
	this := TargetPortRange{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *TargetPortRange) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetPortRange) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *TargetPortRange) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *TargetPortRange) SetStart(v int32) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *TargetPortRange) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetPortRange) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *TargetPortRange) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *TargetPortRange) SetEnd(v int32) {
	o.End = &v
}

func (o TargetPortRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetPortRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableTargetPortRange struct {
	value *TargetPortRange
	isSet bool
}

func (v NullableTargetPortRange) Get() *TargetPortRange {
	return v.value
}

func (v *NullableTargetPortRange) Set(val *TargetPortRange) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetPortRange) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetPortRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetPortRange(val *TargetPortRange) *NullableTargetPortRange {
	return &NullableTargetPortRange{value: val, isSet: true}
}

func (v NullableTargetPortRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetPortRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
