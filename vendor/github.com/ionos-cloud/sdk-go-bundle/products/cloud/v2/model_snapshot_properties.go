/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the SnapshotProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotProperties{}

// SnapshotProperties struct for SnapshotProperties
type SnapshotProperties struct {
	// The name of the  resource.
	Name *string `json:"name,omitempty"`
	// Human-readable description.
	Description *string `json:"description,omitempty"`
	// Location of that image/snapshot.
	Location *string `json:"location,omitempty"`
	// The size of the image in GB.
	Size *float32 `json:"size,omitempty"`
	// Boolean value representing if the snapshot requires extra protection, such as two-step verification.
	SecAuthProtection *bool `json:"secAuthProtection,omitempty"`
	// Hot-plug capable CPU (no reboot required).
	CpuHotPlug *bool `json:"cpuHotPlug,omitempty"`
	// Hot-unplug capable CPU (no reboot required).
	CpuHotUnplug *bool `json:"cpuHotUnplug,omitempty"`
	// Hot-plug capable RAM (no reboot required).
	RamHotPlug *bool `json:"ramHotPlug,omitempty"`
	// Hot-unplug capable RAM (no reboot required).
	RamHotUnplug *bool `json:"ramHotUnplug,omitempty"`
	// Hot-plug capable NIC (no reboot required).
	NicHotPlug *bool `json:"nicHotPlug,omitempty"`
	// Hot-unplug capable NIC (no reboot required).
	NicHotUnplug *bool `json:"nicHotUnplug,omitempty"`
	// Hot-plug capable Virt-IO drive (no reboot required).
	DiscVirtioHotPlug *bool `json:"discVirtioHotPlug,omitempty"`
	// Hot-unplug capable Virt-IO drive (no reboot required). Not supported with Windows VMs.
	DiscVirtioHotUnplug *bool `json:"discVirtioHotUnplug,omitempty"`
	// Hot-plug capable SCSI drive (no reboot required).
	DiscScsiHotPlug *bool `json:"discScsiHotPlug,omitempty"`
	// If set to `true` will expose the serial id of the disk attached to the server. If set to `false` will not expose the serial id. Some operating systems or software solutions require the serial id to be exposed to work properly. Exposing the serial  can influence licensed software (e.g. Windows) behavior
	ExposeSerial *bool `json:"exposeSerial,omitempty"`
	// Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscScsiHotUnplug *bool `json:"discScsiHotUnplug,omitempty"`
	// OS type of this snapshot
	LicenceType *string `json:"licenceType,omitempty"`
}

// NewSnapshotProperties instantiates a new SnapshotProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotProperties() *SnapshotProperties {
	this := SnapshotProperties{}

	var exposeSerial bool = false
	this.ExposeSerial = &exposeSerial

	return &this
}

// NewSnapshotPropertiesWithDefaults instantiates a new SnapshotProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotPropertiesWithDefaults() *SnapshotProperties {
	this := SnapshotProperties{}
	var exposeSerial bool = false
	this.ExposeSerial = &exposeSerial
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SnapshotProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SnapshotProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SnapshotProperties) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SnapshotProperties) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SnapshotProperties) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SnapshotProperties) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SnapshotProperties) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SnapshotProperties) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SnapshotProperties) SetLocation(v string) {
	o.Location = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SnapshotProperties) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SnapshotProperties) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *SnapshotProperties) SetSize(v float32) {
	o.Size = &v
}

// GetSecAuthProtection returns the SecAuthProtection field value if set, zero value otherwise.
func (o *SnapshotProperties) GetSecAuthProtection() bool {
	if o == nil || IsNil(o.SecAuthProtection) {
		var ret bool
		return ret
	}
	return *o.SecAuthProtection
}

// GetSecAuthProtectionOk returns a tuple with the SecAuthProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetSecAuthProtectionOk() (*bool, bool) {
	if o == nil || IsNil(o.SecAuthProtection) {
		return nil, false
	}
	return o.SecAuthProtection, true
}

// HasSecAuthProtection returns a boolean if a field has been set.
func (o *SnapshotProperties) HasSecAuthProtection() bool {
	if o != nil && !IsNil(o.SecAuthProtection) {
		return true
	}

	return false
}

// SetSecAuthProtection gets a reference to the given bool and assigns it to the SecAuthProtection field.
func (o *SnapshotProperties) SetSecAuthProtection(v bool) {
	o.SecAuthProtection = &v
}

// GetCpuHotPlug returns the CpuHotPlug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetCpuHotPlug() bool {
	if o == nil || IsNil(o.CpuHotPlug) {
		var ret bool
		return ret
	}
	return *o.CpuHotPlug
}

// GetCpuHotPlugOk returns a tuple with the CpuHotPlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetCpuHotPlugOk() (*bool, bool) {
	if o == nil || IsNil(o.CpuHotPlug) {
		return nil, false
	}
	return o.CpuHotPlug, true
}

// HasCpuHotPlug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasCpuHotPlug() bool {
	if o != nil && !IsNil(o.CpuHotPlug) {
		return true
	}

	return false
}

// SetCpuHotPlug gets a reference to the given bool and assigns it to the CpuHotPlug field.
func (o *SnapshotProperties) SetCpuHotPlug(v bool) {
	o.CpuHotPlug = &v
}

// GetCpuHotUnplug returns the CpuHotUnplug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetCpuHotUnplug() bool {
	if o == nil || IsNil(o.CpuHotUnplug) {
		var ret bool
		return ret
	}
	return *o.CpuHotUnplug
}

// GetCpuHotUnplugOk returns a tuple with the CpuHotUnplug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetCpuHotUnplugOk() (*bool, bool) {
	if o == nil || IsNil(o.CpuHotUnplug) {
		return nil, false
	}
	return o.CpuHotUnplug, true
}

// HasCpuHotUnplug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasCpuHotUnplug() bool {
	if o != nil && !IsNil(o.CpuHotUnplug) {
		return true
	}

	return false
}

// SetCpuHotUnplug gets a reference to the given bool and assigns it to the CpuHotUnplug field.
func (o *SnapshotProperties) SetCpuHotUnplug(v bool) {
	o.CpuHotUnplug = &v
}

// GetRamHotPlug returns the RamHotPlug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetRamHotPlug() bool {
	if o == nil || IsNil(o.RamHotPlug) {
		var ret bool
		return ret
	}
	return *o.RamHotPlug
}

// GetRamHotPlugOk returns a tuple with the RamHotPlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetRamHotPlugOk() (*bool, bool) {
	if o == nil || IsNil(o.RamHotPlug) {
		return nil, false
	}
	return o.RamHotPlug, true
}

// HasRamHotPlug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasRamHotPlug() bool {
	if o != nil && !IsNil(o.RamHotPlug) {
		return true
	}

	return false
}

// SetRamHotPlug gets a reference to the given bool and assigns it to the RamHotPlug field.
func (o *SnapshotProperties) SetRamHotPlug(v bool) {
	o.RamHotPlug = &v
}

// GetRamHotUnplug returns the RamHotUnplug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetRamHotUnplug() bool {
	if o == nil || IsNil(o.RamHotUnplug) {
		var ret bool
		return ret
	}
	return *o.RamHotUnplug
}

// GetRamHotUnplugOk returns a tuple with the RamHotUnplug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetRamHotUnplugOk() (*bool, bool) {
	if o == nil || IsNil(o.RamHotUnplug) {
		return nil, false
	}
	return o.RamHotUnplug, true
}

// HasRamHotUnplug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasRamHotUnplug() bool {
	if o != nil && !IsNil(o.RamHotUnplug) {
		return true
	}

	return false
}

// SetRamHotUnplug gets a reference to the given bool and assigns it to the RamHotUnplug field.
func (o *SnapshotProperties) SetRamHotUnplug(v bool) {
	o.RamHotUnplug = &v
}

// GetNicHotPlug returns the NicHotPlug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetNicHotPlug() bool {
	if o == nil || IsNil(o.NicHotPlug) {
		var ret bool
		return ret
	}
	return *o.NicHotPlug
}

// GetNicHotPlugOk returns a tuple with the NicHotPlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetNicHotPlugOk() (*bool, bool) {
	if o == nil || IsNil(o.NicHotPlug) {
		return nil, false
	}
	return o.NicHotPlug, true
}

// HasNicHotPlug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasNicHotPlug() bool {
	if o != nil && !IsNil(o.NicHotPlug) {
		return true
	}

	return false
}

// SetNicHotPlug gets a reference to the given bool and assigns it to the NicHotPlug field.
func (o *SnapshotProperties) SetNicHotPlug(v bool) {
	o.NicHotPlug = &v
}

// GetNicHotUnplug returns the NicHotUnplug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetNicHotUnplug() bool {
	if o == nil || IsNil(o.NicHotUnplug) {
		var ret bool
		return ret
	}
	return *o.NicHotUnplug
}

// GetNicHotUnplugOk returns a tuple with the NicHotUnplug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetNicHotUnplugOk() (*bool, bool) {
	if o == nil || IsNil(o.NicHotUnplug) {
		return nil, false
	}
	return o.NicHotUnplug, true
}

// HasNicHotUnplug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasNicHotUnplug() bool {
	if o != nil && !IsNil(o.NicHotUnplug) {
		return true
	}

	return false
}

// SetNicHotUnplug gets a reference to the given bool and assigns it to the NicHotUnplug field.
func (o *SnapshotProperties) SetNicHotUnplug(v bool) {
	o.NicHotUnplug = &v
}

// GetDiscVirtioHotPlug returns the DiscVirtioHotPlug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetDiscVirtioHotPlug() bool {
	if o == nil || IsNil(o.DiscVirtioHotPlug) {
		var ret bool
		return ret
	}
	return *o.DiscVirtioHotPlug
}

// GetDiscVirtioHotPlugOk returns a tuple with the DiscVirtioHotPlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetDiscVirtioHotPlugOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscVirtioHotPlug) {
		return nil, false
	}
	return o.DiscVirtioHotPlug, true
}

// HasDiscVirtioHotPlug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasDiscVirtioHotPlug() bool {
	if o != nil && !IsNil(o.DiscVirtioHotPlug) {
		return true
	}

	return false
}

// SetDiscVirtioHotPlug gets a reference to the given bool and assigns it to the DiscVirtioHotPlug field.
func (o *SnapshotProperties) SetDiscVirtioHotPlug(v bool) {
	o.DiscVirtioHotPlug = &v
}

// GetDiscVirtioHotUnplug returns the DiscVirtioHotUnplug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetDiscVirtioHotUnplug() bool {
	if o == nil || IsNil(o.DiscVirtioHotUnplug) {
		var ret bool
		return ret
	}
	return *o.DiscVirtioHotUnplug
}

// GetDiscVirtioHotUnplugOk returns a tuple with the DiscVirtioHotUnplug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetDiscVirtioHotUnplugOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscVirtioHotUnplug) {
		return nil, false
	}
	return o.DiscVirtioHotUnplug, true
}

// HasDiscVirtioHotUnplug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasDiscVirtioHotUnplug() bool {
	if o != nil && !IsNil(o.DiscVirtioHotUnplug) {
		return true
	}

	return false
}

// SetDiscVirtioHotUnplug gets a reference to the given bool and assigns it to the DiscVirtioHotUnplug field.
func (o *SnapshotProperties) SetDiscVirtioHotUnplug(v bool) {
	o.DiscVirtioHotUnplug = &v
}

// GetDiscScsiHotPlug returns the DiscScsiHotPlug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetDiscScsiHotPlug() bool {
	if o == nil || IsNil(o.DiscScsiHotPlug) {
		var ret bool
		return ret
	}
	return *o.DiscScsiHotPlug
}

// GetDiscScsiHotPlugOk returns a tuple with the DiscScsiHotPlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetDiscScsiHotPlugOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscScsiHotPlug) {
		return nil, false
	}
	return o.DiscScsiHotPlug, true
}

// HasDiscScsiHotPlug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasDiscScsiHotPlug() bool {
	if o != nil && !IsNil(o.DiscScsiHotPlug) {
		return true
	}

	return false
}

// SetDiscScsiHotPlug gets a reference to the given bool and assigns it to the DiscScsiHotPlug field.
func (o *SnapshotProperties) SetDiscScsiHotPlug(v bool) {
	o.DiscScsiHotPlug = &v
}

// GetExposeSerial returns the ExposeSerial field value if set, zero value otherwise.
func (o *SnapshotProperties) GetExposeSerial() bool {
	if o == nil || IsNil(o.ExposeSerial) {
		var ret bool
		return ret
	}
	return *o.ExposeSerial
}

// GetExposeSerialOk returns a tuple with the ExposeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetExposeSerialOk() (*bool, bool) {
	if o == nil || IsNil(o.ExposeSerial) {
		return nil, false
	}
	return o.ExposeSerial, true
}

// HasExposeSerial returns a boolean if a field has been set.
func (o *SnapshotProperties) HasExposeSerial() bool {
	if o != nil && !IsNil(o.ExposeSerial) {
		return true
	}

	return false
}

// SetExposeSerial gets a reference to the given bool and assigns it to the ExposeSerial field.
func (o *SnapshotProperties) SetExposeSerial(v bool) {
	o.ExposeSerial = &v
}

// GetDiscScsiHotUnplug returns the DiscScsiHotUnplug field value if set, zero value otherwise.
func (o *SnapshotProperties) GetDiscScsiHotUnplug() bool {
	if o == nil || IsNil(o.DiscScsiHotUnplug) {
		var ret bool
		return ret
	}
	return *o.DiscScsiHotUnplug
}

// GetDiscScsiHotUnplugOk returns a tuple with the DiscScsiHotUnplug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetDiscScsiHotUnplugOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscScsiHotUnplug) {
		return nil, false
	}
	return o.DiscScsiHotUnplug, true
}

// HasDiscScsiHotUnplug returns a boolean if a field has been set.
func (o *SnapshotProperties) HasDiscScsiHotUnplug() bool {
	if o != nil && !IsNil(o.DiscScsiHotUnplug) {
		return true
	}

	return false
}

// SetDiscScsiHotUnplug gets a reference to the given bool and assigns it to the DiscScsiHotUnplug field.
func (o *SnapshotProperties) SetDiscScsiHotUnplug(v bool) {
	o.DiscScsiHotUnplug = &v
}

// GetLicenceType returns the LicenceType field value if set, zero value otherwise.
func (o *SnapshotProperties) GetLicenceType() string {
	if o == nil || IsNil(o.LicenceType) {
		var ret string
		return ret
	}
	return *o.LicenceType
}

// GetLicenceTypeOk returns a tuple with the LicenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotProperties) GetLicenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenceType) {
		return nil, false
	}
	return o.LicenceType, true
}

// HasLicenceType returns a boolean if a field has been set.
func (o *SnapshotProperties) HasLicenceType() bool {
	if o != nil && !IsNil(o.LicenceType) {
		return true
	}

	return false
}

// SetLicenceType gets a reference to the given string and assigns it to the LicenceType field.
func (o *SnapshotProperties) SetLicenceType(v string) {
	o.LicenceType = &v
}

func (o SnapshotProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.SecAuthProtection) {
		toSerialize["secAuthProtection"] = o.SecAuthProtection
	}
	if !IsNil(o.CpuHotPlug) {
		toSerialize["cpuHotPlug"] = o.CpuHotPlug
	}
	if !IsNil(o.CpuHotUnplug) {
		toSerialize["cpuHotUnplug"] = o.CpuHotUnplug
	}
	if !IsNil(o.RamHotPlug) {
		toSerialize["ramHotPlug"] = o.RamHotPlug
	}
	if !IsNil(o.RamHotUnplug) {
		toSerialize["ramHotUnplug"] = o.RamHotUnplug
	}
	if !IsNil(o.NicHotPlug) {
		toSerialize["nicHotPlug"] = o.NicHotPlug
	}
	if !IsNil(o.NicHotUnplug) {
		toSerialize["nicHotUnplug"] = o.NicHotUnplug
	}
	if !IsNil(o.DiscVirtioHotPlug) {
		toSerialize["discVirtioHotPlug"] = o.DiscVirtioHotPlug
	}
	if !IsNil(o.DiscVirtioHotUnplug) {
		toSerialize["discVirtioHotUnplug"] = o.DiscVirtioHotUnplug
	}
	if !IsNil(o.DiscScsiHotPlug) {
		toSerialize["discScsiHotPlug"] = o.DiscScsiHotPlug
	}
	if !IsNil(o.ExposeSerial) {
		toSerialize["exposeSerial"] = o.ExposeSerial
	}
	if !IsNil(o.DiscScsiHotUnplug) {
		toSerialize["discScsiHotUnplug"] = o.DiscScsiHotUnplug
	}
	if !IsNil(o.LicenceType) {
		toSerialize["licenceType"] = o.LicenceType
	}
	return toSerialize, nil
}

type NullableSnapshotProperties struct {
	value *SnapshotProperties
	isSet bool
}

func (v NullableSnapshotProperties) Get() *SnapshotProperties {
	return v.value
}

func (v *NullableSnapshotProperties) Set(val *SnapshotProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotProperties(val *SnapshotProperties) *NullableSnapshotProperties {
	return &NullableSnapshotProperties{value: val, isSet: true}
}

func (v NullableSnapshotProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
