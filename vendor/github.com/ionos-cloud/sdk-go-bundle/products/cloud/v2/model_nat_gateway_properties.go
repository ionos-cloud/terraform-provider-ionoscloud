/*
 * CLOUD API
 *
 *  IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// checks if the NatGatewayProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatGatewayProperties{}

// NatGatewayProperties struct for NatGatewayProperties
type NatGatewayProperties struct {
	// Name of the NAT Gateway.
	Name string `json:"name"`
	// Collection of public IP addresses of the NAT Gateway. Should be customer reserved IP addresses in that location.
	PublicIps []string `json:"publicIps"`
	// Collection of LANs connected to the NAT Gateway. IPs must contain a valid subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	Lans []NatGatewayLanProperties `json:"lans,omitempty"`
}

// NewNatGatewayProperties instantiates a new NatGatewayProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatGatewayProperties(name string, publicIps []string) *NatGatewayProperties {
	this := NatGatewayProperties{}

	this.Name = name
	this.PublicIps = publicIps

	return &this
}

// NewNatGatewayPropertiesWithDefaults instantiates a new NatGatewayProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatGatewayPropertiesWithDefaults() *NatGatewayProperties {
	this := NatGatewayProperties{}
	return &this
}

// GetName returns the Name field value
func (o *NatGatewayProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NatGatewayProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NatGatewayProperties) SetName(v string) {
	o.Name = v
}

// GetPublicIps returns the PublicIps field value
func (o *NatGatewayProperties) GetPublicIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PublicIps
}

// GetPublicIpsOk returns a tuple with the PublicIps field value
// and a boolean to check if the value has been set.
func (o *NatGatewayProperties) GetPublicIpsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIps, true
}

// SetPublicIps sets field value
func (o *NatGatewayProperties) SetPublicIps(v []string) {
	o.PublicIps = v
}

// GetLans returns the Lans field value if set, zero value otherwise.
func (o *NatGatewayProperties) GetLans() []NatGatewayLanProperties {
	if o == nil || IsNil(o.Lans) {
		var ret []NatGatewayLanProperties
		return ret
	}
	return o.Lans
}

// GetLansOk returns a tuple with the Lans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatGatewayProperties) GetLansOk() ([]NatGatewayLanProperties, bool) {
	if o == nil || IsNil(o.Lans) {
		return nil, false
	}
	return o.Lans, true
}

// HasLans returns a boolean if a field has been set.
func (o *NatGatewayProperties) HasLans() bool {
	if o != nil && !IsNil(o.Lans) {
		return true
	}

	return false
}

// SetLans gets a reference to the given []NatGatewayLanProperties and assigns it to the Lans field.
func (o *NatGatewayProperties) SetLans(v []NatGatewayLanProperties) {
	o.Lans = v
}

func (o NatGatewayProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatGatewayProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["publicIps"] = o.PublicIps
	if !IsNil(o.Lans) {
		toSerialize["lans"] = o.Lans
	}
	return toSerialize, nil
}

type NullableNatGatewayProperties struct {
	value *NatGatewayProperties
	isSet bool
}

func (v NullableNatGatewayProperties) Get() *NatGatewayProperties {
	return v.value
}

func (v *NullableNatGatewayProperties) Set(val *NatGatewayProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNatGatewayProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNatGatewayProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatGatewayProperties(val *NatGatewayProperties) *NullableNatGatewayProperties {
	return &NullableNatGatewayProperties{value: val, isSet: true}
}

func (v NullableNatGatewayProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatGatewayProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
