/*
 * IONOS Cloud - Monitoring REST API
 *
 * The monitoring service offers a centralized platform to collect and store metrics.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the KeyRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyRead{}

// KeyRead Generates a new key for a pipeline invalidating the old one. The key is used for authentication when sending metrics.
type KeyRead struct {
	Key string `json:"key"`
}

// NewKeyRead instantiates a new KeyRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyRead(key string) *KeyRead {
	this := KeyRead{}

	this.Key = key

	return &this
}

// NewKeyReadWithDefaults instantiates a new KeyRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyReadWithDefaults() *KeyRead {
	this := KeyRead{}
	return &this
}

// GetKey returns the Key field value
func (o *KeyRead) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyRead) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyRead) SetKey(v string) {
	o.Key = v
}

func (o KeyRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableKeyRead struct {
	value *KeyRead
	isSet bool
}

func (v NullableKeyRead) Get() *KeyRead {
	return v.value
}

func (v *NullableKeyRead) Set(val *KeyRead) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyRead) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyRead(val *KeyRead) *NullableKeyRead {
	return &NullableKeyRead{value: val, isSet: true}
}

func (v NullableKeyRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
