/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the JSONOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONOutput{}

// JSONOutput Specifies JSON as request's output serialization format.
type JSONOutput struct {
	XMLName xml.Name `xml:"JSONOutput"`
	// The value used to separate individual records in the output. If no value is specified, IONOS Object Storage uses a newline character ('\\n').
	RecordDelimiter *string `json:"RecordDelimiter,omitempty" xml:"RecordDelimiter"`
}

// NewJSONOutput instantiates a new JSONOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONOutput() *JSONOutput {
	this := JSONOutput{}

	return &this
}

// NewJSONOutputWithDefaults instantiates a new JSONOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONOutputWithDefaults() *JSONOutput {
	this := JSONOutput{}
	return &this
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *JSONOutput) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONOutput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *JSONOutput) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *JSONOutput) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

func (o JSONOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	return toSerialize, nil
}

type NullableJSONOutput struct {
	value *JSONOutput
	isSet bool
}

func (v NullableJSONOutput) Get() *JSONOutput {
	return v.value
}

func (v *NullableJSONOutput) Set(val *JSONOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONOutput(val *JSONOutput) *NullableJSONOutput {
	return &NullableJSONOutput{value: val, isSet: true}
}

func (v NullableJSONOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
