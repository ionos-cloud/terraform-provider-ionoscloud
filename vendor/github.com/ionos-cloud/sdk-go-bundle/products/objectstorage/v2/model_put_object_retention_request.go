/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the PutObjectRetentionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutObjectRetentionRequest{}

// PutObjectRetentionRequest A Retention configuration for an object.
type PutObjectRetentionRequest struct {
	XMLName xml.Name `xml:"Retention"`
	// Indicates the Retention mode for the specified object.
	Mode *string `json:"Mode,omitempty" xml:"Mode"`
	// The date on which this Object Lock Retention will expire.
	RetainUntilDate *string `json:"RetainUntilDate,omitempty" xml:"RetainUntilDate"`
}

// NewPutObjectRetentionRequest instantiates a new PutObjectRetentionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutObjectRetentionRequest() *PutObjectRetentionRequest {
	this := PutObjectRetentionRequest{}

	return &this
}

// NewPutObjectRetentionRequestWithDefaults instantiates a new PutObjectRetentionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutObjectRetentionRequestWithDefaults() *PutObjectRetentionRequest {
	this := PutObjectRetentionRequest{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *PutObjectRetentionRequest) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectRetentionRequest) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *PutObjectRetentionRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *PutObjectRetentionRequest) SetMode(v string) {
	o.Mode = &v
}

// GetRetainUntilDate returns the RetainUntilDate field value if set, zero value otherwise.
func (o *PutObjectRetentionRequest) GetRetainUntilDate() string {
	if o == nil || IsNil(o.RetainUntilDate) {
		var ret string
		return ret
	}
	return *o.RetainUntilDate
}

// GetRetainUntilDateOk returns a tuple with the RetainUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectRetentionRequest) GetRetainUntilDateOk() (*string, bool) {
	if o == nil || IsNil(o.RetainUntilDate) {
		return nil, false
	}
	return o.RetainUntilDate, true
}

// HasRetainUntilDate returns a boolean if a field has been set.
func (o *PutObjectRetentionRequest) HasRetainUntilDate() bool {
	if o != nil && !IsNil(o.RetainUntilDate) {
		return true
	}

	return false
}

// SetRetainUntilDate gets a reference to the given string and assigns it to the RetainUntilDate field.
func (o *PutObjectRetentionRequest) SetRetainUntilDate(v string) {
	o.RetainUntilDate = &v
}

func (o PutObjectRetentionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutObjectRetentionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["Mode"] = o.Mode
	}
	if !IsNil(o.RetainUntilDate) {
		toSerialize["RetainUntilDate"] = o.RetainUntilDate
	}
	return toSerialize, nil
}

type NullablePutObjectRetentionRequest struct {
	value *PutObjectRetentionRequest
	isSet bool
}

func (v NullablePutObjectRetentionRequest) Get() *PutObjectRetentionRequest {
	return v.value
}

func (v *NullablePutObjectRetentionRequest) Set(val *PutObjectRetentionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutObjectRetentionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutObjectRetentionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutObjectRetentionRequest(val *PutObjectRetentionRequest) *NullablePutObjectRetentionRequest {
	return &NullablePutObjectRetentionRequest{value: val, isSet: true}
}

func (v NullablePutObjectRetentionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutObjectRetentionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
