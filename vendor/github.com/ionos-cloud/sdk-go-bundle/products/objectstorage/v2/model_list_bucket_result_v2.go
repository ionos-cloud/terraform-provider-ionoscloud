/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the ListBucketResultV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBucketResultV2{}

// ListBucketResultV2 A container for the data.
type ListBucketResultV2 struct {
	XMLName xml.Name `xml:"ListBucketResult"`
	// The bucket name.
	Name string `json:"Name" xml:"Name"`
	// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Prefix string `json:"Prefix" xml:"Prefix"`
	// The maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more.
	MaxKeys int32 `json:"MaxKeys" xml:"MaxKeys"`
	// A flag that indicates whether IONOS Object Storage returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
	IsTruncated bool  `json:"IsTruncated" xml:"IsTruncated"`
	KeyCount    int32 `json:"KeyCount" xml:"KeyCount"`
	// Metadata about each object returned.
	Contents  []Object `json:"Contents" xml:"Contents"`
	Delimiter *string  `json:"Delimiter,omitempty" xml:"Delimiter"`
	// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
	CommonPrefixes []CommonPrefix `json:"CommonPrefixes,omitempty" xml:"CommonPrefixes"`
	EncodingType   *EncodingType  `json:"EncodingType,omitempty" xml:"EncodingType"`
	// If ContinuationToken was sent with the request, it is included in the response.
	ContinuationToken *string `json:"ContinuationToken,omitempty" xml:"ContinuationToken"`
	// `NextContinuationToken` is sent when `isTruncated` is true, which means there are more keys in the bucket that can be listed. The next list requests to IONOS Object Storage can be continued with this `NextContinuationToken`. `NextContinuationToken` is obfuscated and is not a real key.
	NextContinuationToken *string `json:"NextContinuationToken,omitempty" xml:"NextContinuationToken"`
	// If StartAfter was sent with the request, it is included in the response.
	StartAfter *string `json:"StartAfter,omitempty" xml:"StartAfter"`
}

// NewListBucketResultV2 instantiates a new ListBucketResultV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBucketResultV2(name string, prefix string, maxKeys int32, isTruncated bool, keyCount int32, contents []Object) *ListBucketResultV2 {
	this := ListBucketResultV2{}

	this.Name = name
	this.Prefix = prefix
	this.MaxKeys = maxKeys
	this.IsTruncated = isTruncated
	this.KeyCount = keyCount
	this.Contents = contents

	return &this
}

// NewListBucketResultV2WithDefaults instantiates a new ListBucketResultV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBucketResultV2WithDefaults() *ListBucketResultV2 {
	this := ListBucketResultV2{}
	var maxKeys int32 = 1000
	this.MaxKeys = maxKeys
	return &this
}

// GetName returns the Name field value
func (o *ListBucketResultV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListBucketResultV2) SetName(v string) {
	o.Name = v
}

// GetPrefix returns the Prefix field value
func (o *ListBucketResultV2) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *ListBucketResultV2) SetPrefix(v string) {
	o.Prefix = v
}

// GetMaxKeys returns the MaxKeys field value
func (o *ListBucketResultV2) GetMaxKeys() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxKeys
}

// GetMaxKeysOk returns a tuple with the MaxKeys field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetMaxKeysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxKeys, true
}

// SetMaxKeys sets field value
func (o *ListBucketResultV2) SetMaxKeys(v int32) {
	o.MaxKeys = v
}

// GetIsTruncated returns the IsTruncated field value
func (o *ListBucketResultV2) GetIsTruncated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTruncated
}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetIsTruncatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTruncated, true
}

// SetIsTruncated sets field value
func (o *ListBucketResultV2) SetIsTruncated(v bool) {
	o.IsTruncated = v
}

// GetKeyCount returns the KeyCount field value
func (o *ListBucketResultV2) GetKeyCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeyCount
}

// GetKeyCountOk returns a tuple with the KeyCount field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetKeyCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyCount, true
}

// SetKeyCount sets field value
func (o *ListBucketResultV2) SetKeyCount(v int32) {
	o.KeyCount = v
}

// GetContents returns the Contents field value
func (o *ListBucketResultV2) GetContents() []Object {
	if o == nil {
		var ret []Object
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetContentsOk() ([]Object, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *ListBucketResultV2) SetContents(v []Object) {
	o.Contents = v
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *ListBucketResultV2) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetCommonPrefixes returns the CommonPrefixes field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetCommonPrefixes() []CommonPrefix {
	if o == nil || IsNil(o.CommonPrefixes) {
		var ret []CommonPrefix
		return ret
	}
	return o.CommonPrefixes
}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetCommonPrefixesOk() ([]CommonPrefix, bool) {
	if o == nil || IsNil(o.CommonPrefixes) {
		return nil, false
	}
	return o.CommonPrefixes, true
}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasCommonPrefixes() bool {
	if o != nil && !IsNil(o.CommonPrefixes) {
		return true
	}

	return false
}

// SetCommonPrefixes gets a reference to the given []CommonPrefix and assigns it to the CommonPrefixes field.
func (o *ListBucketResultV2) SetCommonPrefixes(v []CommonPrefix) {
	o.CommonPrefixes = v
}

// GetEncodingType returns the EncodingType field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetEncodingType() EncodingType {
	if o == nil || IsNil(o.EncodingType) {
		var ret EncodingType
		return ret
	}
	return *o.EncodingType
}

// GetEncodingTypeOk returns a tuple with the EncodingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil || IsNil(o.EncodingType) {
		return nil, false
	}
	return o.EncodingType, true
}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasEncodingType() bool {
	if o != nil && !IsNil(o.EncodingType) {
		return true
	}

	return false
}

// SetEncodingType gets a reference to the given EncodingType and assigns it to the EncodingType field.
func (o *ListBucketResultV2) SetEncodingType(v EncodingType) {
	o.EncodingType = &v
}

// GetContinuationToken returns the ContinuationToken field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetContinuationToken() string {
	if o == nil || IsNil(o.ContinuationToken) {
		var ret string
		return ret
	}
	return *o.ContinuationToken
}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuationToken) {
		return nil, false
	}
	return o.ContinuationToken, true
}

// HasContinuationToken returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasContinuationToken() bool {
	if o != nil && !IsNil(o.ContinuationToken) {
		return true
	}

	return false
}

// SetContinuationToken gets a reference to the given string and assigns it to the ContinuationToken field.
func (o *ListBucketResultV2) SetContinuationToken(v string) {
	o.ContinuationToken = &v
}

// GetNextContinuationToken returns the NextContinuationToken field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetNextContinuationToken() string {
	if o == nil || IsNil(o.NextContinuationToken) {
		var ret string
		return ret
	}
	return *o.NextContinuationToken
}

// GetNextContinuationTokenOk returns a tuple with the NextContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetNextContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextContinuationToken) {
		return nil, false
	}
	return o.NextContinuationToken, true
}

// HasNextContinuationToken returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasNextContinuationToken() bool {
	if o != nil && !IsNil(o.NextContinuationToken) {
		return true
	}

	return false
}

// SetNextContinuationToken gets a reference to the given string and assigns it to the NextContinuationToken field.
func (o *ListBucketResultV2) SetNextContinuationToken(v string) {
	o.NextContinuationToken = &v
}

// GetStartAfter returns the StartAfter field value if set, zero value otherwise.
func (o *ListBucketResultV2) GetStartAfter() string {
	if o == nil || IsNil(o.StartAfter) {
		var ret string
		return ret
	}
	return *o.StartAfter
}

// GetStartAfterOk returns a tuple with the StartAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListBucketResultV2) GetStartAfterOk() (*string, bool) {
	if o == nil || IsNil(o.StartAfter) {
		return nil, false
	}
	return o.StartAfter, true
}

// HasStartAfter returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasStartAfter() bool {
	if o != nil && !IsNil(o.StartAfter) {
		return true
	}

	return false
}

// SetStartAfter gets a reference to the given string and assigns it to the StartAfter field.
func (o *ListBucketResultV2) SetStartAfter(v string) {
	o.StartAfter = &v
}

func (o ListBucketResultV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBucketResultV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	toSerialize["Prefix"] = o.Prefix
	toSerialize["MaxKeys"] = o.MaxKeys
	toSerialize["IsTruncated"] = o.IsTruncated
	toSerialize["KeyCount"] = o.KeyCount
	toSerialize["Contents"] = o.Contents
	if !IsNil(o.Delimiter) {
		toSerialize["Delimiter"] = o.Delimiter
	}
	if !IsNil(o.CommonPrefixes) {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}
	if !IsNil(o.EncodingType) {
		toSerialize["EncodingType"] = o.EncodingType
	}
	if !IsNil(o.ContinuationToken) {
		toSerialize["ContinuationToken"] = o.ContinuationToken
	}
	if !IsNil(o.NextContinuationToken) {
		toSerialize["NextContinuationToken"] = o.NextContinuationToken
	}
	if !IsNil(o.StartAfter) {
		toSerialize["StartAfter"] = o.StartAfter
	}
	return toSerialize, nil
}

type NullableListBucketResultV2 struct {
	value *ListBucketResultV2
	isSet bool
}

func (v NullableListBucketResultV2) Get() *ListBucketResultV2 {
	return v.value
}

func (v *NullableListBucketResultV2) Set(val *ListBucketResultV2) {
	v.value = val
	v.isSet = true
}

func (v NullableListBucketResultV2) IsSet() bool {
	return v.isSet
}

func (v *NullableListBucketResultV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBucketResultV2(val *ListBucketResultV2) *NullableListBucketResultV2 {
	return &NullableListBucketResultV2{value: val, isSet: true}
}

func (v NullableListBucketResultV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBucketResultV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
