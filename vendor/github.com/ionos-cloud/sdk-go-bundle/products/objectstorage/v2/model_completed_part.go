/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the CompletedPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletedPart{}

// CompletedPart Details of the parts that were uploaded.
type CompletedPart struct {
	XMLName xml.Name `xml:"CompletedPart"`
	// Entity tag that identifies the object's data. Objects with different object data will have different entity tags. The entity tag is an opaque string. The entity tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5 digest of the object data, it will contain one or more nonhexadecimal characters and/or will consist of less than 32 or more than 32 hexadecimal digits.
	ETag *string `json:"ETag,omitempty" xml:"ETag"`
	// Part number that identifies the part.
	PartNumber *int32 `json:"PartNumber,omitempty" xml:"PartNumber"`
}

// NewCompletedPart instantiates a new CompletedPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletedPart() *CompletedPart {
	this := CompletedPart{}

	return &this
}

// NewCompletedPartWithDefaults instantiates a new CompletedPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletedPartWithDefaults() *CompletedPart {
	this := CompletedPart{}
	return &this
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *CompletedPart) GetETag() string {
	if o == nil || IsNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPart) GetETagOk() (*string, bool) {
	if o == nil || IsNil(o.ETag) {
		return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *CompletedPart) HasETag() bool {
	if o != nil && !IsNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *CompletedPart) SetETag(v string) {
	o.ETag = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *CompletedPart) GetPartNumber() int32 {
	if o == nil || IsNil(o.PartNumber) {
		var ret int32
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPart) GetPartNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PartNumber) {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *CompletedPart) HasPartNumber() bool {
	if o != nil && !IsNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given int32 and assigns it to the PartNumber field.
func (o *CompletedPart) SetPartNumber(v int32) {
	o.PartNumber = &v
}

func (o CompletedPart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletedPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ETag) {
		toSerialize["ETag"] = o.ETag
	}
	if !IsNil(o.PartNumber) {
		toSerialize["PartNumber"] = o.PartNumber
	}
	return toSerialize, nil
}

type NullableCompletedPart struct {
	value *CompletedPart
	isSet bool
}

func (v NullableCompletedPart) Get() *CompletedPart {
	return v.value
}

func (v *NullableCompletedPart) Set(val *CompletedPart) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletedPart) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletedPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletedPart(val *CompletedPart) *NullableCompletedPart {
	return &NullableCompletedPart{value: val, isSet: true}
}

func (v NullableCompletedPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletedPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
