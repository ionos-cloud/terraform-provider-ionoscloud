/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the ListAllMyBucketsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAllMyBucketsResult{}

// ListAllMyBucketsResult struct for ListAllMyBucketsResult
type ListAllMyBucketsResult struct {
	XMLName xml.Name `xml:"ListAllMyBucketsResult"`
	Owner   *Owner   `json:"Owner,omitempty" xml:"Owner"`
	Buckets []Bucket `json:"Buckets,omitempty" xml:"Buckets>Bucket"`
}

// NewListAllMyBucketsResult instantiates a new ListAllMyBucketsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAllMyBucketsResult() *ListAllMyBucketsResult {
	this := ListAllMyBucketsResult{}

	return &this
}

// NewListAllMyBucketsResultWithDefaults instantiates a new ListAllMyBucketsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAllMyBucketsResultWithDefaults() *ListAllMyBucketsResult {
	this := ListAllMyBucketsResult{}
	return &this
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ListAllMyBucketsResult) GetOwner() Owner {
	if o == nil || IsNil(o.Owner) {
		var ret Owner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListAllMyBucketsResult) GetOwnerOk() (*Owner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ListAllMyBucketsResult) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Owner and assigns it to the Owner field.
func (o *ListAllMyBucketsResult) SetOwner(v Owner) {
	o.Owner = &v
}

// GetBuckets returns the Buckets field value if set, zero value otherwise.
func (o *ListAllMyBucketsResult) GetBuckets() []Bucket {
	if o == nil || IsNil(o.Buckets) {
		var ret []Bucket
		return ret
	}
	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListAllMyBucketsResult) GetBucketsOk() ([]Bucket, bool) {
	if o == nil || IsNil(o.Buckets) {
		return nil, false
	}
	return o.Buckets, true
}

// HasBuckets returns a boolean if a field has been set.
func (o *ListAllMyBucketsResult) HasBuckets() bool {
	if o != nil && !IsNil(o.Buckets) {
		return true
	}

	return false
}

// SetBuckets gets a reference to the given []Bucket and assigns it to the Buckets field.
func (o *ListAllMyBucketsResult) SetBuckets(v []Bucket) {
	o.Buckets = v
}

func (o ListAllMyBucketsResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAllMyBucketsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Owner) {
		toSerialize["Owner"] = o.Owner
	}
	if !IsNil(o.Buckets) {
		toSerialize["Buckets"] = o.Buckets
	}
	return toSerialize, nil
}

type NullableListAllMyBucketsResult struct {
	value *ListAllMyBucketsResult
	isSet bool
}

func (v NullableListAllMyBucketsResult) Get() *ListAllMyBucketsResult {
	return v.value
}

func (v *NullableListAllMyBucketsResult) Set(val *ListAllMyBucketsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllMyBucketsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllMyBucketsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllMyBucketsResult(val *ListAllMyBucketsResult) *NullableListAllMyBucketsResult {
	return &NullableListAllMyBucketsResult{value: val, isSet: true}
}

func (v NullableListAllMyBucketsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllMyBucketsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
