/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the InputSerialization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputSerialization{}

// InputSerialization Describes the serialization format of the object.
type InputSerialization struct {
	XMLName xml.Name  `xml:"InputSerialization"`
	CSV     *CSVInput `json:"CSV,omitempty" xml:"CSV"`
	// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
	CompressionType *string                 `json:"CompressionType,omitempty" xml:"CompressionType"`
	JSON            *InputSerializationJSON `json:"JSON,omitempty" xml:"JSON"`
	// Specifies Parquet as object's input serialization format.
	Parquet map[string]interface{} `json:"Parquet,omitempty" xml:"Parquet"`
}

// NewInputSerialization instantiates a new InputSerialization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSerialization() *InputSerialization {
	this := InputSerialization{}

	return &this
}

// NewInputSerializationWithDefaults instantiates a new InputSerialization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSerializationWithDefaults() *InputSerialization {
	this := InputSerialization{}
	return &this
}

// GetCSV returns the CSV field value if set, zero value otherwise.
func (o *InputSerialization) GetCSV() CSVInput {
	if o == nil || IsNil(o.CSV) {
		var ret CSVInput
		return ret
	}
	return *o.CSV
}

// GetCSVOk returns a tuple with the CSV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerialization) GetCSVOk() (*CSVInput, bool) {
	if o == nil || IsNil(o.CSV) {
		return nil, false
	}
	return o.CSV, true
}

// HasCSV returns a boolean if a field has been set.
func (o *InputSerialization) HasCSV() bool {
	if o != nil && !IsNil(o.CSV) {
		return true
	}

	return false
}

// SetCSV gets a reference to the given CSVInput and assigns it to the CSV field.
func (o *InputSerialization) SetCSV(v CSVInput) {
	o.CSV = &v
}

// GetCompressionType returns the CompressionType field value if set, zero value otherwise.
func (o *InputSerialization) GetCompressionType() string {
	if o == nil || IsNil(o.CompressionType) {
		var ret string
		return ret
	}
	return *o.CompressionType
}

// GetCompressionTypeOk returns a tuple with the CompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerialization) GetCompressionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CompressionType) {
		return nil, false
	}
	return o.CompressionType, true
}

// HasCompressionType returns a boolean if a field has been set.
func (o *InputSerialization) HasCompressionType() bool {
	if o != nil && !IsNil(o.CompressionType) {
		return true
	}

	return false
}

// SetCompressionType gets a reference to the given string and assigns it to the CompressionType field.
func (o *InputSerialization) SetCompressionType(v string) {
	o.CompressionType = &v
}

// GetJSON returns the JSON field value if set, zero value otherwise.
func (o *InputSerialization) GetJSON() InputSerializationJSON {
	if o == nil || IsNil(o.JSON) {
		var ret InputSerializationJSON
		return ret
	}
	return *o.JSON
}

// GetJSONOk returns a tuple with the JSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerialization) GetJSONOk() (*InputSerializationJSON, bool) {
	if o == nil || IsNil(o.JSON) {
		return nil, false
	}
	return o.JSON, true
}

// HasJSON returns a boolean if a field has been set.
func (o *InputSerialization) HasJSON() bool {
	if o != nil && !IsNil(o.JSON) {
		return true
	}

	return false
}

// SetJSON gets a reference to the given InputSerializationJSON and assigns it to the JSON field.
func (o *InputSerialization) SetJSON(v InputSerializationJSON) {
	o.JSON = &v
}

// GetParquet returns the Parquet field value if set, zero value otherwise.
func (o *InputSerialization) GetParquet() map[string]interface{} {
	if o == nil || IsNil(o.Parquet) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parquet
}

// GetParquetOk returns a tuple with the Parquet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSerialization) GetParquetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parquet) {
		return map[string]interface{}{}, false
	}
	return o.Parquet, true
}

// HasParquet returns a boolean if a field has been set.
func (o *InputSerialization) HasParquet() bool {
	if o != nil && !IsNil(o.Parquet) {
		return true
	}

	return false
}

// SetParquet gets a reference to the given map[string]interface{} and assigns it to the Parquet field.
func (o *InputSerialization) SetParquet(v map[string]interface{}) {
	o.Parquet = v
}

func (o InputSerialization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputSerialization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CSV) {
		toSerialize["CSV"] = o.CSV
	}
	if !IsNil(o.CompressionType) {
		toSerialize["CompressionType"] = o.CompressionType
	}
	if !IsNil(o.JSON) {
		toSerialize["JSON"] = o.JSON
	}
	if !IsNil(o.Parquet) {
		toSerialize["Parquet"] = o.Parquet
	}
	return toSerialize, nil
}

type NullableInputSerialization struct {
	value *InputSerialization
	isSet bool
}

func (v NullableInputSerialization) Get() *InputSerialization {
	return v.value
}

func (v *NullableInputSerialization) Set(val *InputSerialization) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSerialization) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSerialization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSerialization(val *InputSerialization) *NullableInputSerialization {
	return &NullableInputSerialization{value: val, isSet: true}
}

func (v NullableInputSerialization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSerialization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
