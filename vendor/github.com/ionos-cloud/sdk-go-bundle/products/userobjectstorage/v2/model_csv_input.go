/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logroño, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the CSVInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSVInput{}

// CSVInput Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
type CSVInput struct {
	XMLName xml.Name `xml:"CSVInput"`
	// <p>Describes the first line of input. Valid values are:</p> <ul> <li> <p> `NONE`: First line is not a header.</p> </li> <li> <p> `IGNORE`: First line is a header, but you can't use the header values to indicate the column in an expression. You can use column position (such as _1, _2, …) to indicate the column (`SELECT s._1 FROM OBJECT s`).</p> </li> <li> <p> `Use`: First line is a header, and you can use the header value to identify a column in an expression (`SELECT \"name\" FROM OBJECT`). </p> </li> </ul>
	FileHeaderInfo *string `json:"FileHeaderInfo,omitempty" xml:"FileHeaderInfo"`
	// A single character used to indicate that a row should be ignored when the character is present at the start of that row. You can specify any character to indicate a comment line.
	Comments *string `json:"Comments,omitempty" xml:"Comments"`
	// A single character used for escaping the quotation mark character inside an already escaped value. For example, the value \"\"\" a , b \"\"\" is parsed as \" a , b \".
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty" xml:"QuoteEscapeCharacter"`
	// A single character used to separate individual records in the input. Instead of the default value, you can specify an arbitrary delimiter.
	RecordDelimiter *string `json:"RecordDelimiter,omitempty" xml:"RecordDelimiter"`
	// A single character used to separate individual fields in a record. You can specify an arbitrary delimiter.
	FieldDelimiter *string `json:"FieldDelimiter,omitempty" xml:"FieldDelimiter"`
	// <p>A single character used for escaping when the field delimiter is part of the value. For example, if the value is `a, b`, IONOS Object Storage wraps this field value in quotation marks, as follows: `\" a , b \"`.</p> <p>Type: String</p> <p>Default: `\"` </p> <p>Ancestors: `CSV` </p>
	QuoteCharacter *string `json:"QuoteCharacter,omitempty" xml:"QuoteCharacter"`
	// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
	AllowQuotedRecordDelimiter *bool `json:"AllowQuotedRecordDelimiter,omitempty" xml:"AllowQuotedRecordDelimiter"`
}

// NewCSVInput instantiates a new CSVInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVInput() *CSVInput {
	this := CSVInput{}

	return &this
}

// NewCSVInputWithDefaults instantiates a new CSVInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVInputWithDefaults() *CSVInput {
	this := CSVInput{}
	return &this
}

// GetFileHeaderInfo returns the FileHeaderInfo field value if set, zero value otherwise.
func (o *CSVInput) GetFileHeaderInfo() string {
	if o == nil || IsNil(o.FileHeaderInfo) {
		var ret string
		return ret
	}
	return *o.FileHeaderInfo
}

// GetFileHeaderInfoOk returns a tuple with the FileHeaderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetFileHeaderInfoOk() (*string, bool) {
	if o == nil || IsNil(o.FileHeaderInfo) {
		return nil, false
	}
	return o.FileHeaderInfo, true
}

// HasFileHeaderInfo returns a boolean if a field has been set.
func (o *CSVInput) HasFileHeaderInfo() bool {
	if o != nil && !IsNil(o.FileHeaderInfo) {
		return true
	}

	return false
}

// SetFileHeaderInfo gets a reference to the given string and assigns it to the FileHeaderInfo field.
func (o *CSVInput) SetFileHeaderInfo(v string) {
	o.FileHeaderInfo = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *CSVInput) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *CSVInput) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *CSVInput) SetComments(v string) {
	o.Comments = &v
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value if set, zero value otherwise.
func (o *CSVInput) GetQuoteEscapeCharacter() string {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteEscapeCharacter
}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		return nil, false
	}
	return o.QuoteEscapeCharacter, true
}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *CSVInput) HasQuoteEscapeCharacter() bool {
	if o != nil && !IsNil(o.QuoteEscapeCharacter) {
		return true
	}

	return false
}

// SetQuoteEscapeCharacter gets a reference to the given string and assigns it to the QuoteEscapeCharacter field.
func (o *CSVInput) SetQuoteEscapeCharacter(v string) {
	o.QuoteEscapeCharacter = &v
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *CSVInput) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *CSVInput) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

// GetFieldDelimiter returns the FieldDelimiter field value if set, zero value otherwise.
func (o *CSVInput) GetFieldDelimiter() string {
	if o == nil || IsNil(o.FieldDelimiter) {
		var ret string
		return ret
	}
	return *o.FieldDelimiter
}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetFieldDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.FieldDelimiter) {
		return nil, false
	}
	return o.FieldDelimiter, true
}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasFieldDelimiter() bool {
	if o != nil && !IsNil(o.FieldDelimiter) {
		return true
	}

	return false
}

// SetFieldDelimiter gets a reference to the given string and assigns it to the FieldDelimiter field.
func (o *CSVInput) SetFieldDelimiter(v string) {
	o.FieldDelimiter = &v
}

// GetQuoteCharacter returns the QuoteCharacter field value if set, zero value otherwise.
func (o *CSVInput) GetQuoteCharacter() string {
	if o == nil || IsNil(o.QuoteCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteCharacter
}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetQuoteCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCharacter) {
		return nil, false
	}
	return o.QuoteCharacter, true
}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *CSVInput) HasQuoteCharacter() bool {
	if o != nil && !IsNil(o.QuoteCharacter) {
		return true
	}

	return false
}

// SetQuoteCharacter gets a reference to the given string and assigns it to the QuoteCharacter field.
func (o *CSVInput) SetQuoteCharacter(v string) {
	o.QuoteCharacter = &v
}

// GetAllowQuotedRecordDelimiter returns the AllowQuotedRecordDelimiter field value if set, zero value otherwise.
func (o *CSVInput) GetAllowQuotedRecordDelimiter() bool {
	if o == nil || IsNil(o.AllowQuotedRecordDelimiter) {
		var ret bool
		return ret
	}
	return *o.AllowQuotedRecordDelimiter
}

// GetAllowQuotedRecordDelimiterOk returns a tuple with the AllowQuotedRecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVInput) GetAllowQuotedRecordDelimiterOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQuotedRecordDelimiter) {
		return nil, false
	}
	return o.AllowQuotedRecordDelimiter, true
}

// HasAllowQuotedRecordDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasAllowQuotedRecordDelimiter() bool {
	if o != nil && !IsNil(o.AllowQuotedRecordDelimiter) {
		return true
	}

	return false
}

// SetAllowQuotedRecordDelimiter gets a reference to the given bool and assigns it to the AllowQuotedRecordDelimiter field.
func (o *CSVInput) SetAllowQuotedRecordDelimiter(v bool) {
	o.AllowQuotedRecordDelimiter = &v
}

func (o CSVInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSVInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileHeaderInfo) {
		toSerialize["FileHeaderInfo"] = o.FileHeaderInfo
	}
	if !IsNil(o.Comments) {
		toSerialize["Comments"] = o.Comments
	}
	if !IsNil(o.QuoteEscapeCharacter) {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	if !IsNil(o.FieldDelimiter) {
		toSerialize["FieldDelimiter"] = o.FieldDelimiter
	}
	if !IsNil(o.QuoteCharacter) {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}
	if !IsNil(o.AllowQuotedRecordDelimiter) {
		toSerialize["AllowQuotedRecordDelimiter"] = o.AllowQuotedRecordDelimiter
	}
	return toSerialize, nil
}

type NullableCSVInput struct {
	value *CSVInput
	isSet bool
}

func (v NullableCSVInput) Get() *CSVInput {
	return v.value
}

func (v *NullableCSVInput) Set(val *CSVInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVInput(val *CSVInput) *NullableCSVInput {
	return &NullableCSVInput{value: val, isSet: true}
}

func (v NullableCSVInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
