/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
	"time"
)

import "encoding/xml"

// checks if the MultipartUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipartUpload{}

// MultipartUpload Container for the `MultipartUpload` for the IONOS Object Storage object.
type MultipartUpload struct {
	XMLName xml.Name `xml:"MultipartUpload"`
	// ID of the multipart upload.
	UploadId *string `json:"UploadId,omitempty" xml:"UploadId"`
	// The object key.
	Key *string `json:"Key,omitempty" xml:"Key"`
	// Date and time at which the multipart upload was initiated.
	Initiated    *IonosTime    `json:"Initiated,omitempty" xml:"Initiated"`
	StorageClass *StorageClass `json:"StorageClass,omitempty" xml:"StorageClass"`
	Owner        *Owner        `json:"Owner,omitempty" xml:"Owner"`
	Initiator    *Initiator    `json:"Initiator,omitempty" xml:"Initiator"`
}

// NewMultipartUpload instantiates a new MultipartUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipartUpload() *MultipartUpload {
	this := MultipartUpload{}

	return &this
}

// NewMultipartUploadWithDefaults instantiates a new MultipartUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipartUploadWithDefaults() *MultipartUpload {
	this := MultipartUpload{}
	return &this
}

// GetUploadId returns the UploadId field value if set, zero value otherwise.
func (o *MultipartUpload) GetUploadId() string {
	if o == nil || IsNil(o.UploadId) {
		var ret string
		return ret
	}
	return *o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetUploadIdOk() (*string, bool) {
	if o == nil || IsNil(o.UploadId) {
		return nil, false
	}
	return o.UploadId, true
}

// HasUploadId returns a boolean if a field has been set.
func (o *MultipartUpload) HasUploadId() bool {
	if o != nil && !IsNil(o.UploadId) {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given string and assigns it to the UploadId field.
func (o *MultipartUpload) SetUploadId(v string) {
	o.UploadId = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MultipartUpload) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MultipartUpload) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MultipartUpload) SetKey(v string) {
	o.Key = &v
}

// GetInitiated returns the Initiated field value if set, zero value otherwise.
func (o *MultipartUpload) GetInitiated() time.Time {
	if o == nil || IsNil(o.Initiated) {
		var ret time.Time
		return ret
	}
	return o.Initiated.Time
}

// GetInitiatedOk returns a tuple with the Initiated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetInitiatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Initiated) {
		return nil, false
	}
	return &o.Initiated.Time, true
}

// HasInitiated returns a boolean if a field has been set.
func (o *MultipartUpload) HasInitiated() bool {
	if o != nil && !IsNil(o.Initiated) {
		return true
	}

	return false
}

// SetInitiated gets a reference to the given time.Time and assigns it to the Initiated field.
func (o *MultipartUpload) SetInitiated(v time.Time) {
	o.Initiated = &IonosTime{v}
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *MultipartUpload) GetStorageClass() StorageClass {
	if o == nil || IsNil(o.StorageClass) {
		var ret StorageClass
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetStorageClassOk() (*StorageClass, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *MultipartUpload) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given StorageClass and assigns it to the StorageClass field.
func (o *MultipartUpload) SetStorageClass(v StorageClass) {
	o.StorageClass = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *MultipartUpload) GetOwner() Owner {
	if o == nil || IsNil(o.Owner) {
		var ret Owner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetOwnerOk() (*Owner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MultipartUpload) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Owner and assigns it to the Owner field.
func (o *MultipartUpload) SetOwner(v Owner) {
	o.Owner = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *MultipartUpload) GetInitiator() Initiator {
	if o == nil || IsNil(o.Initiator) {
		var ret Initiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartUpload) GetInitiatorOk() (*Initiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *MultipartUpload) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given Initiator and assigns it to the Initiator field.
func (o *MultipartUpload) SetInitiator(v Initiator) {
	o.Initiator = &v
}

func (o MultipartUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipartUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UploadId) {
		toSerialize["UploadId"] = o.UploadId
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.Initiated) {
		toSerialize["Initiated"] = o.Initiated
	}
	if !IsNil(o.StorageClass) {
		toSerialize["StorageClass"] = o.StorageClass
	}
	if !IsNil(o.Owner) {
		toSerialize["Owner"] = o.Owner
	}
	if !IsNil(o.Initiator) {
		toSerialize["Initiator"] = o.Initiator
	}
	return toSerialize, nil
}

type NullableMultipartUpload struct {
	value *MultipartUpload
	isSet bool
}

func (v NullableMultipartUpload) Get() *MultipartUpload {
	return v.value
}

func (v *NullableMultipartUpload) Set(val *MultipartUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipartUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipartUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipartUpload(val *MultipartUpload) *NullableMultipartUpload {
	return &NullableMultipartUpload{value: val, isSet: true}
}

func (v NullableMultipartUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipartUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
