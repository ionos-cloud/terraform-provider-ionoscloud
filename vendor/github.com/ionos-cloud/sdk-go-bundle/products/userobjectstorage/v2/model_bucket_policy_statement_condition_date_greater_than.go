/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **LogroÃ±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"

	"fmt"
)

// BucketPolicyStatementConditionDateGreaterThan - struct for BucketPolicyStatementConditionDateGreaterThan
type BucketPolicyStatementConditionDateGreaterThan struct {
	BucketPolicyStatementConditionDateGreaterThanOneOf  *BucketPolicyStatementConditionDateGreaterThanOneOf
	BucketPolicyStatementConditionDateGreaterThanOneOf1 *BucketPolicyStatementConditionDateGreaterThanOneOf1
}

// BucketPolicyStatementConditionDateGreaterThanOneOfAsBucketPolicyStatementConditionDateGreaterThan is a convenience function that returns BucketPolicyStatementConditionDateGreaterThanOneOf wrapped in BucketPolicyStatementConditionDateGreaterThan
func BucketPolicyStatementConditionDateGreaterThanOneOfAsBucketPolicyStatementConditionDateGreaterThan(v *BucketPolicyStatementConditionDateGreaterThanOneOf) BucketPolicyStatementConditionDateGreaterThan {
	return BucketPolicyStatementConditionDateGreaterThan{BucketPolicyStatementConditionDateGreaterThanOneOf: v}
}

// BucketPolicyStatementConditionDateGreaterThanOneOf1AsBucketPolicyStatementConditionDateGreaterThan is a convenience function that returns BucketPolicyStatementConditionDateGreaterThanOneOf1 wrapped in BucketPolicyStatementConditionDateGreaterThan
func BucketPolicyStatementConditionDateGreaterThanOneOf1AsBucketPolicyStatementConditionDateGreaterThan(v *BucketPolicyStatementConditionDateGreaterThanOneOf1) BucketPolicyStatementConditionDateGreaterThan {
	return BucketPolicyStatementConditionDateGreaterThan{BucketPolicyStatementConditionDateGreaterThanOneOf1: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BucketPolicyStatementConditionDateGreaterThan) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BucketPolicyStatementConditionDateGreaterThanOneOf
	err = json.Unmarshal(data, &dst.BucketPolicyStatementConditionDateGreaterThanOneOf)
	if err == nil {
		jsonBucketPolicyStatementConditionDateGreaterThanOneOf, _ := json.Marshal(dst.BucketPolicyStatementConditionDateGreaterThanOneOf)
		if string(jsonBucketPolicyStatementConditionDateGreaterThanOneOf) == "{}" { // empty struct
			dst.BucketPolicyStatementConditionDateGreaterThanOneOf = nil
		} else {
			match++
		}
	} else {
		dst.BucketPolicyStatementConditionDateGreaterThanOneOf = nil
	}

	// try to unmarshal data into BucketPolicyStatementConditionDateGreaterThanOneOf1
	err = json.Unmarshal(data, &dst.BucketPolicyStatementConditionDateGreaterThanOneOf1)
	if err == nil {
		jsonBucketPolicyStatementConditionDateGreaterThanOneOf1, _ := json.Marshal(dst.BucketPolicyStatementConditionDateGreaterThanOneOf1)
		if string(jsonBucketPolicyStatementConditionDateGreaterThanOneOf1) == "{}" { // empty struct
			dst.BucketPolicyStatementConditionDateGreaterThanOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.BucketPolicyStatementConditionDateGreaterThanOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BucketPolicyStatementConditionDateGreaterThanOneOf = nil
		dst.BucketPolicyStatementConditionDateGreaterThanOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(BucketPolicyStatementConditionDateGreaterThan)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(BucketPolicyStatementConditionDateGreaterThan)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BucketPolicyStatementConditionDateGreaterThan) MarshalJSON() ([]byte, error) {
	if src.BucketPolicyStatementConditionDateGreaterThanOneOf != nil {
		return json.Marshal(&src.BucketPolicyStatementConditionDateGreaterThanOneOf)
	}

	if src.BucketPolicyStatementConditionDateGreaterThanOneOf1 != nil {
		return json.Marshal(&src.BucketPolicyStatementConditionDateGreaterThanOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BucketPolicyStatementConditionDateGreaterThan) GetActualInstance() interface{} {
	if obj.BucketPolicyStatementConditionDateGreaterThanOneOf != nil {
		return obj.BucketPolicyStatementConditionDateGreaterThanOneOf
	}

	if obj.BucketPolicyStatementConditionDateGreaterThanOneOf1 != nil {
		return obj.BucketPolicyStatementConditionDateGreaterThanOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableBucketPolicyStatementConditionDateGreaterThan struct {
	value *BucketPolicyStatementConditionDateGreaterThan
	isSet bool
}

func (v NullableBucketPolicyStatementConditionDateGreaterThan) Get() *BucketPolicyStatementConditionDateGreaterThan {
	return v.value
}

func (v *NullableBucketPolicyStatementConditionDateGreaterThan) Set(val *BucketPolicyStatementConditionDateGreaterThan) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicyStatementConditionDateGreaterThan) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicyStatementConditionDateGreaterThan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicyStatementConditionDateGreaterThan(val *BucketPolicyStatementConditionDateGreaterThan) *NullableBucketPolicyStatementConditionDateGreaterThan {
	return &NullableBucketPolicyStatementConditionDateGreaterThan{value: val, isSet: true}
}

func (v NullableBucketPolicyStatementConditionDateGreaterThan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicyStatementConditionDateGreaterThan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
