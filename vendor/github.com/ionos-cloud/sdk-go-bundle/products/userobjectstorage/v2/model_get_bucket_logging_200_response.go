/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

// checks if the GetBucketLogging200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBucketLogging200Response{}

// GetBucketLogging200Response Describes where logs are stored and the prefix that IONOS Object Storage assigns to all log object keys for a bucket.
type GetBucketLogging200Response struct {
	// Specifies the bucket where you want IONOS Object Storage to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case, you should choose a different <code>TargetPrefix</code> for each source bucket so that the delivered log files can be distinguished by key.
	TargetBucket *string `json:"TargetBucket,omitempty"`
	// A prefix for all log object keys. If you store log files from multiple IONOS Object Storage buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
	TargetPrefix *string `json:"TargetPrefix,omitempty"`
}

// NewGetBucketLogging200Response instantiates a new GetBucketLogging200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBucketLogging200Response() *GetBucketLogging200Response {
	this := GetBucketLogging200Response{}

	return &this
}

// NewGetBucketLogging200ResponseWithDefaults instantiates a new GetBucketLogging200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBucketLogging200ResponseWithDefaults() *GetBucketLogging200Response {
	this := GetBucketLogging200Response{}
	return &this
}

// GetTargetBucket returns the TargetBucket field value if set, zero value otherwise.
func (o *GetBucketLogging200Response) GetTargetBucket() string {
	if o == nil || IsNil(o.TargetBucket) {
		var ret string
		return ret
	}
	return *o.TargetBucket
}

// GetTargetBucketOk returns a tuple with the TargetBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBucketLogging200Response) GetTargetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.TargetBucket) {
		return nil, false
	}
	return o.TargetBucket, true
}

// HasTargetBucket returns a boolean if a field has been set.
func (o *GetBucketLogging200Response) HasTargetBucket() bool {
	if o != nil && !IsNil(o.TargetBucket) {
		return true
	}

	return false
}

// SetTargetBucket gets a reference to the given string and assigns it to the TargetBucket field.
func (o *GetBucketLogging200Response) SetTargetBucket(v string) {
	o.TargetBucket = &v
}

// GetTargetPrefix returns the TargetPrefix field value if set, zero value otherwise.
func (o *GetBucketLogging200Response) GetTargetPrefix() string {
	if o == nil || IsNil(o.TargetPrefix) {
		var ret string
		return ret
	}
	return *o.TargetPrefix
}

// GetTargetPrefixOk returns a tuple with the TargetPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBucketLogging200Response) GetTargetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPrefix) {
		return nil, false
	}
	return o.TargetPrefix, true
}

// HasTargetPrefix returns a boolean if a field has been set.
func (o *GetBucketLogging200Response) HasTargetPrefix() bool {
	if o != nil && !IsNil(o.TargetPrefix) {
		return true
	}

	return false
}

// SetTargetPrefix gets a reference to the given string and assigns it to the TargetPrefix field.
func (o *GetBucketLogging200Response) SetTargetPrefix(v string) {
	o.TargetPrefix = &v
}

func (o GetBucketLogging200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBucketLogging200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetBucket) {
		toSerialize["TargetBucket"] = o.TargetBucket
	}
	if !IsNil(o.TargetPrefix) {
		toSerialize["TargetPrefix"] = o.TargetPrefix
	}
	return toSerialize, nil
}

type NullableGetBucketLogging200Response struct {
	value *GetBucketLogging200Response
	isSet bool
}

func (v NullableGetBucketLogging200Response) Get() *GetBucketLogging200Response {
	return v.value
}

func (v *NullableGetBucketLogging200Response) Set(val *GetBucketLogging200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBucketLogging200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBucketLogging200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBucketLogging200Response(val *GetBucketLogging200Response) *NullableGetBucketLogging200Response {
	return &NullableGetBucketLogging200Response{value: val, isSet: true}
}

func (v NullableGetBucketLogging200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBucketLogging200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
