/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the RoutingRuleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRuleCondition{}

// RoutingRuleCondition A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the `/docs` folder, redirect to the `/documents` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
type RoutingRuleCondition struct {
	XMLName xml.Name `xml:"Condition"`
	// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element `Condition` is specified and sibling `KeyPrefixEquals` is not specified. If both are specified, then both must be true for the redirect to be applied.
	HttpErrorCodeReturnedEquals *string `json:"HttpErrorCodeReturnedEquals,omitempty" xml:"HttpErrorCodeReturnedEquals"`
	// <p>The object key name prefix when the redirect is applied. For example, to redirect requests for `ExamplePage.html`, the key prefix will be `ExamplePage.html`. To redirect request for all pages with the prefix `docs/`, the key prefix will be `/docs`, which identifies all objects in the `docs/` folder. Required when the parent element `Condition` is specified and sibling `HttpErrorCodeReturnedEquals` is not specified. If both conditions are specified, both must be true for the redirect to be applied.</p> <important> <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.</p> </important>
	KeyPrefixEquals *string `json:"KeyPrefixEquals,omitempty" xml:"KeyPrefixEquals"`
}

// NewRoutingRuleCondition instantiates a new RoutingRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRuleCondition() *RoutingRuleCondition {
	this := RoutingRuleCondition{}

	return &this
}

// NewRoutingRuleConditionWithDefaults instantiates a new RoutingRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleConditionWithDefaults() *RoutingRuleCondition {
	this := RoutingRuleCondition{}
	return &this
}

// GetHttpErrorCodeReturnedEquals returns the HttpErrorCodeReturnedEquals field value if set, zero value otherwise.
func (o *RoutingRuleCondition) GetHttpErrorCodeReturnedEquals() string {
	if o == nil || IsNil(o.HttpErrorCodeReturnedEquals) {
		var ret string
		return ret
	}
	return *o.HttpErrorCodeReturnedEquals
}

// GetHttpErrorCodeReturnedEqualsOk returns a tuple with the HttpErrorCodeReturnedEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRuleCondition) GetHttpErrorCodeReturnedEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.HttpErrorCodeReturnedEquals) {
		return nil, false
	}
	return o.HttpErrorCodeReturnedEquals, true
}

// HasHttpErrorCodeReturnedEquals returns a boolean if a field has been set.
func (o *RoutingRuleCondition) HasHttpErrorCodeReturnedEquals() bool {
	if o != nil && !IsNil(o.HttpErrorCodeReturnedEquals) {
		return true
	}

	return false
}

// SetHttpErrorCodeReturnedEquals gets a reference to the given string and assigns it to the HttpErrorCodeReturnedEquals field.
func (o *RoutingRuleCondition) SetHttpErrorCodeReturnedEquals(v string) {
	o.HttpErrorCodeReturnedEquals = &v
}

// GetKeyPrefixEquals returns the KeyPrefixEquals field value if set, zero value otherwise.
func (o *RoutingRuleCondition) GetKeyPrefixEquals() string {
	if o == nil || IsNil(o.KeyPrefixEquals) {
		var ret string
		return ret
	}
	return *o.KeyPrefixEquals
}

// GetKeyPrefixEqualsOk returns a tuple with the KeyPrefixEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRuleCondition) GetKeyPrefixEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.KeyPrefixEquals) {
		return nil, false
	}
	return o.KeyPrefixEquals, true
}

// HasKeyPrefixEquals returns a boolean if a field has been set.
func (o *RoutingRuleCondition) HasKeyPrefixEquals() bool {
	if o != nil && !IsNil(o.KeyPrefixEquals) {
		return true
	}

	return false
}

// SetKeyPrefixEquals gets a reference to the given string and assigns it to the KeyPrefixEquals field.
func (o *RoutingRuleCondition) SetKeyPrefixEquals(v string) {
	o.KeyPrefixEquals = &v
}

func (o RoutingRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRuleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpErrorCodeReturnedEquals) {
		toSerialize["HttpErrorCodeReturnedEquals"] = o.HttpErrorCodeReturnedEquals
	}
	if !IsNil(o.KeyPrefixEquals) {
		toSerialize["KeyPrefixEquals"] = o.KeyPrefixEquals
	}
	return toSerialize, nil
}

type NullableRoutingRuleCondition struct {
	value *RoutingRuleCondition
	isSet bool
}

func (v NullableRoutingRuleCondition) Get() *RoutingRuleCondition {
	return v.value
}

func (v *NullableRoutingRuleCondition) Set(val *RoutingRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleCondition(val *RoutingRuleCondition) *NullableRoutingRuleCondition {
	return &NullableRoutingRuleCondition{value: val, isSet: true}
}

func (v NullableRoutingRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
