/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the LifecycleExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleExpiration{}

// LifecycleExpiration Specifies when the object expires based on the values defined in the lifecycle configuration.
type LifecycleExpiration struct {
	XMLName xml.Name `xml:"Expiration"`
	// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
	Date *string `json:"Date,omitempty" xml:"Date"`
	// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
	Days *int32 `json:"Days,omitempty" xml:"Days"`
	// Indicates whether IONOS Object Storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no operation. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	ExpiredObjectDeleteMarker *bool `json:"ExpiredObjectDeleteMarker,omitempty" xml:"ExpiredObjectDeleteMarker"`
}

// NewLifecycleExpiration instantiates a new LifecycleExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleExpiration() *LifecycleExpiration {
	this := LifecycleExpiration{}

	return &this
}

// NewLifecycleExpirationWithDefaults instantiates a new LifecycleExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleExpirationWithDefaults() *LifecycleExpiration {
	this := LifecycleExpiration{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *LifecycleExpiration) SetDate(v string) {
	o.Date = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *LifecycleExpiration) SetDays(v int32) {
	o.Days = &v
}

// GetExpiredObjectDeleteMarker returns the ExpiredObjectDeleteMarker field value if set, zero value otherwise.
func (o *LifecycleExpiration) GetExpiredObjectDeleteMarker() bool {
	if o == nil || IsNil(o.ExpiredObjectDeleteMarker) {
		var ret bool
		return ret
	}
	return *o.ExpiredObjectDeleteMarker
}

// GetExpiredObjectDeleteMarkerOk returns a tuple with the ExpiredObjectDeleteMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleExpiration) GetExpiredObjectDeleteMarkerOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpiredObjectDeleteMarker) {
		return nil, false
	}
	return o.ExpiredObjectDeleteMarker, true
}

// HasExpiredObjectDeleteMarker returns a boolean if a field has been set.
func (o *LifecycleExpiration) HasExpiredObjectDeleteMarker() bool {
	if o != nil && !IsNil(o.ExpiredObjectDeleteMarker) {
		return true
	}

	return false
}

// SetExpiredObjectDeleteMarker gets a reference to the given bool and assigns it to the ExpiredObjectDeleteMarker field.
func (o *LifecycleExpiration) SetExpiredObjectDeleteMarker(v bool) {
	o.ExpiredObjectDeleteMarker = &v
}

func (o LifecycleExpiration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.Days) {
		toSerialize["Days"] = o.Days
	}
	if !IsNil(o.ExpiredObjectDeleteMarker) {
		toSerialize["ExpiredObjectDeleteMarker"] = o.ExpiredObjectDeleteMarker
	}
	return toSerialize, nil
}

type NullableLifecycleExpiration struct {
	value *LifecycleExpiration
	isSet bool
}

func (v NullableLifecycleExpiration) Get() *LifecycleExpiration {
	return v.value
}

func (v *NullableLifecycleExpiration) Set(val *LifecycleExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleExpiration(val *LifecycleExpiration) *NullableLifecycleExpiration {
	return &NullableLifecycleExpiration{value: val, isSet: true}
}

func (v NullableLifecycleExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
