/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the CSVOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSVOutput{}

// CSVOutput Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
type CSVOutput struct {
	XMLName xml.Name `xml:"CSVOutput"`
	// <p>Indicates whether to use quotation marks around output fields. </p> <ul> <li> <p> `ALWAYS`: Always use quotation marks for output fields.</p> </li> <li> <p> `ASNEEDED`: Use quotation marks for output fields when needed.</p> </li> </ul>
	QuoteFields *string `json:"QuoteFields,omitempty" xml:"QuoteFields"`
	// The single character used for escaping the quote character inside an already escaped value.
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty" xml:"QuoteEscapeCharacter"`
	// A single character used to separate individual records in the output. Instead of the default value, you can specify an arbitrary delimiter.
	RecordDelimiter *string `json:"RecordDelimiter,omitempty" xml:"RecordDelimiter"`
	// The value used to separate individual fields in a record. You can specify an arbitrary delimiter.
	FieldDelimiter interface{} `json:"FieldDelimiter,omitempty" xml:"FieldDelimiter"`
	// A single character used for escaping when the field delimiter is part of the value. For example, if the value is `a, b`, IONOS Object Storage wraps this field value in quotation marks, as follows: `\" a , b \"`.
	QuoteCharacter *string `json:"QuoteCharacter,omitempty" xml:"QuoteCharacter"`
}

// NewCSVOutput instantiates a new CSVOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVOutput() *CSVOutput {
	this := CSVOutput{}

	return &this
}

// NewCSVOutputWithDefaults instantiates a new CSVOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVOutputWithDefaults() *CSVOutput {
	this := CSVOutput{}
	return &this
}

// GetQuoteFields returns the QuoteFields field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteFields() string {
	if o == nil || IsNil(o.QuoteFields) {
		var ret string
		return ret
	}
	return *o.QuoteFields
}

// GetQuoteFieldsOk returns a tuple with the QuoteFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteFields) {
		return nil, false
	}
	return o.QuoteFields, true
}

// HasQuoteFields returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteFields() bool {
	if o != nil && !IsNil(o.QuoteFields) {
		return true
	}

	return false
}

// SetQuoteFields gets a reference to the given string and assigns it to the QuoteFields field.
func (o *CSVOutput) SetQuoteFields(v string) {
	o.QuoteFields = &v
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteEscapeCharacter() string {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteEscapeCharacter
}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteEscapeCharacter) {
		return nil, false
	}
	return o.QuoteEscapeCharacter, true
}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteEscapeCharacter() bool {
	if o != nil && !IsNil(o.QuoteEscapeCharacter) {
		return true
	}

	return false
}

// SetQuoteEscapeCharacter gets a reference to the given string and assigns it to the QuoteEscapeCharacter field.
func (o *CSVOutput) SetQuoteEscapeCharacter(v string) {
	o.QuoteEscapeCharacter = &v
}

// GetRecordDelimiter returns the RecordDelimiter field value if set, zero value otherwise.
func (o *CSVOutput) GetRecordDelimiter() string {
	if o == nil || IsNil(o.RecordDelimiter) {
		var ret string
		return ret
	}
	return *o.RecordDelimiter
}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.RecordDelimiter) {
		return nil, false
	}
	return o.RecordDelimiter, true
}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasRecordDelimiter() bool {
	if o != nil && !IsNil(o.RecordDelimiter) {
		return true
	}

	return false
}

// SetRecordDelimiter gets a reference to the given string and assigns it to the RecordDelimiter field.
func (o *CSVOutput) SetRecordDelimiter(v string) {
	o.RecordDelimiter = &v
}

// GetFieldDelimiter returns the FieldDelimiter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSVOutput) GetFieldDelimiter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldDelimiter
}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetFieldDelimiterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldDelimiter) {
		return nil, false
	}
	return &o.FieldDelimiter, true
}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasFieldDelimiter() bool {
	if o != nil && !IsNil(o.FieldDelimiter) {
		return true
	}

	return false
}

// SetFieldDelimiter gets a reference to the given interface{} and assigns it to the FieldDelimiter field.
func (o *CSVOutput) SetFieldDelimiter(v interface{}) {
	o.FieldDelimiter = v
}

// GetQuoteCharacter returns the QuoteCharacter field value if set, zero value otherwise.
func (o *CSVOutput) GetQuoteCharacter() string {
	if o == nil || IsNil(o.QuoteCharacter) {
		var ret string
		return ret
	}
	return *o.QuoteCharacter
}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSVOutput) GetQuoteCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteCharacter) {
		return nil, false
	}
	return o.QuoteCharacter, true
}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteCharacter() bool {
	if o != nil && !IsNil(o.QuoteCharacter) {
		return true
	}

	return false
}

// SetQuoteCharacter gets a reference to the given string and assigns it to the QuoteCharacter field.
func (o *CSVOutput) SetQuoteCharacter(v string) {
	o.QuoteCharacter = &v
}

func (o CSVOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSVOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuoteFields) {
		toSerialize["QuoteFields"] = o.QuoteFields
	}
	if !IsNil(o.QuoteEscapeCharacter) {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}
	if !IsNil(o.RecordDelimiter) {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}
	if o.FieldDelimiter != nil {
		toSerialize["FieldDelimiter"] = o.FieldDelimiter
	}
	if !IsNil(o.QuoteCharacter) {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}
	return toSerialize, nil
}

type NullableCSVOutput struct {
	value *CSVOutput
	isSet bool
}

func (v NullableCSVOutput) Get() *CSVOutput {
	return v.value
}

func (v *NullableCSVOutput) Set(val *CSVOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVOutput(val *CSVOutput) *NullableCSVOutput {
	return &NullableCSVOutput{value: val, isSet: true}
}

func (v NullableCSVOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
