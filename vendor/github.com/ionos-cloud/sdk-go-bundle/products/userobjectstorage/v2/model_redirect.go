/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the Redirect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Redirect{}

// Redirect Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
type Redirect struct {
	XMLName xml.Name `xml:"Redirect"`
	// The host name to use in the redirect request.
	HostName *string `json:"HostName,omitempty" xml:"HostName"`
	// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
	HttpRedirectCode *string `json:"HttpRedirectCode,omitempty" xml:"HttpRedirectCode"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol"`
	// <p>The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a condition block with `KeyPrefixEquals` set to `docs/` and in the Redirect set `ReplaceKeyPrefixWith` to `/documents`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyWith` is not provided.</p> <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. </p>
	ReplaceKeyPrefixWith *string `json:"ReplaceKeyPrefixWith,omitempty" xml:"ReplaceKeyPrefixWith"`
	// The specific object key to use in the redirect request. For example, redirect request to `error.html`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyPrefixWith` is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ReplaceKeyWith *string `json:"ReplaceKeyWith,omitempty" xml:"ReplaceKeyWith"`
}

// NewRedirect instantiates a new Redirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirect() *Redirect {
	this := Redirect{}

	return &this
}

// NewRedirectWithDefaults instantiates a new Redirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectWithDefaults() *Redirect {
	this := Redirect{}
	return &this
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *Redirect) GetHostName() string {
	if o == nil || IsNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.HostName) {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *Redirect) HasHostName() bool {
	if o != nil && !IsNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *Redirect) SetHostName(v string) {
	o.HostName = &v
}

// GetHttpRedirectCode returns the HttpRedirectCode field value if set, zero value otherwise.
func (o *Redirect) GetHttpRedirectCode() string {
	if o == nil || IsNil(o.HttpRedirectCode) {
		var ret string
		return ret
	}
	return *o.HttpRedirectCode
}

// GetHttpRedirectCodeOk returns a tuple with the HttpRedirectCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetHttpRedirectCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HttpRedirectCode) {
		return nil, false
	}
	return o.HttpRedirectCode, true
}

// HasHttpRedirectCode returns a boolean if a field has been set.
func (o *Redirect) HasHttpRedirectCode() bool {
	if o != nil && !IsNil(o.HttpRedirectCode) {
		return true
	}

	return false
}

// SetHttpRedirectCode gets a reference to the given string and assigns it to the HttpRedirectCode field.
func (o *Redirect) SetHttpRedirectCode(v string) {
	o.HttpRedirectCode = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Redirect) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Redirect) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Redirect) SetProtocol(v string) {
	o.Protocol = &v
}

// GetReplaceKeyPrefixWith returns the ReplaceKeyPrefixWith field value if set, zero value otherwise.
func (o *Redirect) GetReplaceKeyPrefixWith() string {
	if o == nil || IsNil(o.ReplaceKeyPrefixWith) {
		var ret string
		return ret
	}
	return *o.ReplaceKeyPrefixWith
}

// GetReplaceKeyPrefixWithOk returns a tuple with the ReplaceKeyPrefixWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetReplaceKeyPrefixWithOk() (*string, bool) {
	if o == nil || IsNil(o.ReplaceKeyPrefixWith) {
		return nil, false
	}
	return o.ReplaceKeyPrefixWith, true
}

// HasReplaceKeyPrefixWith returns a boolean if a field has been set.
func (o *Redirect) HasReplaceKeyPrefixWith() bool {
	if o != nil && !IsNil(o.ReplaceKeyPrefixWith) {
		return true
	}

	return false
}

// SetReplaceKeyPrefixWith gets a reference to the given string and assigns it to the ReplaceKeyPrefixWith field.
func (o *Redirect) SetReplaceKeyPrefixWith(v string) {
	o.ReplaceKeyPrefixWith = &v
}

// GetReplaceKeyWith returns the ReplaceKeyWith field value if set, zero value otherwise.
func (o *Redirect) GetReplaceKeyWith() string {
	if o == nil || IsNil(o.ReplaceKeyWith) {
		var ret string
		return ret
	}
	return *o.ReplaceKeyWith
}

// GetReplaceKeyWithOk returns a tuple with the ReplaceKeyWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Redirect) GetReplaceKeyWithOk() (*string, bool) {
	if o == nil || IsNil(o.ReplaceKeyWith) {
		return nil, false
	}
	return o.ReplaceKeyWith, true
}

// HasReplaceKeyWith returns a boolean if a field has been set.
func (o *Redirect) HasReplaceKeyWith() bool {
	if o != nil && !IsNil(o.ReplaceKeyWith) {
		return true
	}

	return false
}

// SetReplaceKeyWith gets a reference to the given string and assigns it to the ReplaceKeyWith field.
func (o *Redirect) SetReplaceKeyWith(v string) {
	o.ReplaceKeyWith = &v
}

func (o Redirect) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Redirect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostName) {
		toSerialize["HostName"] = o.HostName
	}
	if !IsNil(o.HttpRedirectCode) {
		toSerialize["HttpRedirectCode"] = o.HttpRedirectCode
	}
	if !IsNil(o.Protocol) {
		toSerialize["Protocol"] = o.Protocol
	}
	if !IsNil(o.ReplaceKeyPrefixWith) {
		toSerialize["ReplaceKeyPrefixWith"] = o.ReplaceKeyPrefixWith
	}
	if !IsNil(o.ReplaceKeyWith) {
		toSerialize["ReplaceKeyWith"] = o.ReplaceKeyWith
	}
	return toSerialize, nil
}

type NullableRedirect struct {
	value *Redirect
	isSet bool
}

func (v NullableRedirect) Get() *Redirect {
	return v.value
}

func (v *NullableRedirect) Set(val *Redirect) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirect) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirect(val *Redirect) *NullableRedirect {
	return &NullableRedirect{value: val, isSet: true}
}

func (v NullableRedirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
