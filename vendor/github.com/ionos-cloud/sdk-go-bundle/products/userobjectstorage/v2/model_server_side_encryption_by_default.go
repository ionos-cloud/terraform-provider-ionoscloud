/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the ServerSideEncryptionByDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSideEncryptionByDefault{}

// ServerSideEncryptionByDefault Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
type ServerSideEncryptionByDefault struct {
	XMLName      xml.Name             `xml:"ApplyServerSideEncryptionByDefault"`
	SSEAlgorithm ServerSideEncryption `json:"SSEAlgorithm" xml:"SSEAlgorithm"`
}

// NewServerSideEncryptionByDefault instantiates a new ServerSideEncryptionByDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSideEncryptionByDefault(sSEAlgorithm ServerSideEncryption) *ServerSideEncryptionByDefault {
	this := ServerSideEncryptionByDefault{}

	this.SSEAlgorithm = sSEAlgorithm

	return &this
}

// NewServerSideEncryptionByDefaultWithDefaults instantiates a new ServerSideEncryptionByDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSideEncryptionByDefaultWithDefaults() *ServerSideEncryptionByDefault {
	this := ServerSideEncryptionByDefault{}
	return &this
}

// GetSSEAlgorithm returns the SSEAlgorithm field value
func (o *ServerSideEncryptionByDefault) GetSSEAlgorithm() ServerSideEncryption {
	if o == nil {
		var ret ServerSideEncryption
		return ret
	}

	return o.SSEAlgorithm
}

// GetSSEAlgorithmOk returns a tuple with the SSEAlgorithm field value
// and a boolean to check if the value has been set.
func (o *ServerSideEncryptionByDefault) GetSSEAlgorithmOk() (*ServerSideEncryption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SSEAlgorithm, true
}

// SetSSEAlgorithm sets field value
func (o *ServerSideEncryptionByDefault) SetSSEAlgorithm(v ServerSideEncryption) {
	o.SSEAlgorithm = v
}

func (o ServerSideEncryptionByDefault) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSideEncryptionByDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SSEAlgorithm"] = o.SSEAlgorithm
	return toSerialize, nil
}

type NullableServerSideEncryptionByDefault struct {
	value *ServerSideEncryptionByDefault
	isSet bool
}

func (v NullableServerSideEncryptionByDefault) Get() *ServerSideEncryptionByDefault {
	return v.value
}

func (v *NullableServerSideEncryptionByDefault) Set(val *ServerSideEncryptionByDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSideEncryptionByDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSideEncryptionByDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSideEncryptionByDefault(val *ServerSideEncryptionByDefault) *NullableServerSideEncryptionByDefault {
	return &NullableServerSideEncryptionByDefault{value: val, isSet: true}
}

func (v NullableServerSideEncryptionByDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSideEncryptionByDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
