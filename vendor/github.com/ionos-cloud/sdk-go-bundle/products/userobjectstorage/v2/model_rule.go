/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule Specifies lifecycle rules for an IONOS Object Storage bucket.
type Rule struct {
	XMLName xml.Name `xml:"Rule"`
	// Unique identifier for the rule. The value can't be longer than 255 characters.
	ID *string `json:"ID,omitempty" xml:"ID"`
	// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Prefix                         string                          `json:"Prefix" xml:"Prefix"`
	Filter                         *Filter                         `json:"Filter,omitempty" xml:"Filter"`
	Status                         ExpirationStatus                `json:"Status" xml:"Status"`
	Expiration                     *LifecycleExpiration            `json:"Expiration,omitempty" xml:"Expiration"`
	NoncurrentVersionExpiration    *NoncurrentVersionExpiration    `json:"NoncurrentVersionExpiration,omitempty" xml:"NoncurrentVersionExpiration"`
	AbortIncompleteMultipartUpload *AbortIncompleteMultipartUpload `json:"AbortIncompleteMultipartUpload,omitempty" xml:"AbortIncompleteMultipartUpload"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule(prefix string, status ExpirationStatus) *Rule {
	this := Rule{}

	this.Prefix = prefix
	this.Status = status

	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *Rule) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *Rule) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *Rule) SetID(v string) {
	o.ID = &v
}

// GetPrefix returns the Prefix field value
func (o *Rule) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *Rule) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *Rule) SetPrefix(v string) {
	o.Prefix = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Rule) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Rule) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *Rule) SetFilter(v Filter) {
	o.Filter = &v
}

// GetStatus returns the Status field value
func (o *Rule) GetStatus() ExpirationStatus {
	if o == nil {
		var ret ExpirationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Rule) GetStatusOk() (*ExpirationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Rule) SetStatus(v ExpirationStatus) {
	o.Status = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Rule) GetExpiration() LifecycleExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret LifecycleExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetExpirationOk() (*LifecycleExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Rule) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given LifecycleExpiration and assigns it to the Expiration field.
func (o *Rule) SetExpiration(v LifecycleExpiration) {
	o.Expiration = &v
}

// GetNoncurrentVersionExpiration returns the NoncurrentVersionExpiration field value if set, zero value otherwise.
func (o *Rule) GetNoncurrentVersionExpiration() NoncurrentVersionExpiration {
	if o == nil || IsNil(o.NoncurrentVersionExpiration) {
		var ret NoncurrentVersionExpiration
		return ret
	}
	return *o.NoncurrentVersionExpiration
}

// GetNoncurrentVersionExpirationOk returns a tuple with the NoncurrentVersionExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetNoncurrentVersionExpirationOk() (*NoncurrentVersionExpiration, bool) {
	if o == nil || IsNil(o.NoncurrentVersionExpiration) {
		return nil, false
	}
	return o.NoncurrentVersionExpiration, true
}

// HasNoncurrentVersionExpiration returns a boolean if a field has been set.
func (o *Rule) HasNoncurrentVersionExpiration() bool {
	if o != nil && !IsNil(o.NoncurrentVersionExpiration) {
		return true
	}

	return false
}

// SetNoncurrentVersionExpiration gets a reference to the given NoncurrentVersionExpiration and assigns it to the NoncurrentVersionExpiration field.
func (o *Rule) SetNoncurrentVersionExpiration(v NoncurrentVersionExpiration) {
	o.NoncurrentVersionExpiration = &v
}

// GetAbortIncompleteMultipartUpload returns the AbortIncompleteMultipartUpload field value if set, zero value otherwise.
func (o *Rule) GetAbortIncompleteMultipartUpload() AbortIncompleteMultipartUpload {
	if o == nil || IsNil(o.AbortIncompleteMultipartUpload) {
		var ret AbortIncompleteMultipartUpload
		return ret
	}
	return *o.AbortIncompleteMultipartUpload
}

// GetAbortIncompleteMultipartUploadOk returns a tuple with the AbortIncompleteMultipartUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetAbortIncompleteMultipartUploadOk() (*AbortIncompleteMultipartUpload, bool) {
	if o == nil || IsNil(o.AbortIncompleteMultipartUpload) {
		return nil, false
	}
	return o.AbortIncompleteMultipartUpload, true
}

// HasAbortIncompleteMultipartUpload returns a boolean if a field has been set.
func (o *Rule) HasAbortIncompleteMultipartUpload() bool {
	if o != nil && !IsNil(o.AbortIncompleteMultipartUpload) {
		return true
	}

	return false
}

// SetAbortIncompleteMultipartUpload gets a reference to the given AbortIncompleteMultipartUpload and assigns it to the AbortIncompleteMultipartUpload field.
func (o *Rule) SetAbortIncompleteMultipartUpload(v AbortIncompleteMultipartUpload) {
	o.AbortIncompleteMultipartUpload = &v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	toSerialize["Prefix"] = o.Prefix
	if !IsNil(o.Filter) {
		toSerialize["Filter"] = o.Filter
	}
	toSerialize["Status"] = o.Status
	if !IsNil(o.Expiration) {
		toSerialize["Expiration"] = o.Expiration
	}
	if !IsNil(o.NoncurrentVersionExpiration) {
		toSerialize["NoncurrentVersionExpiration"] = o.NoncurrentVersionExpiration
	}
	if !IsNil(o.AbortIncompleteMultipartUpload) {
		toSerialize["AbortIncompleteMultipartUpload"] = o.AbortIncompleteMultipartUpload
	}
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
