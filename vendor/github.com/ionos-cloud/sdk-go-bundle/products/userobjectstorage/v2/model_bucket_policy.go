/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the BucketPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketPolicy{}

// BucketPolicy struct for BucketPolicy
type BucketPolicy struct {
	XMLName xml.Name `xml:"BucketPolicy"`
	// Specifies an optional identifier for the policy.
	Id *string `json:"Id,omitempty" xml:"Id"`
	// Policy version
	Version   *string                 `json:"Version,omitempty" xml:"Version"`
	Statement []BucketPolicyStatement `json:"Statement" xml:"Statement"`
}

// NewBucketPolicy instantiates a new BucketPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketPolicy(statement []BucketPolicyStatement) *BucketPolicy {
	this := BucketPolicy{}

	this.Statement = statement

	return &this
}

// NewBucketPolicyWithDefaults instantiates a new BucketPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketPolicyWithDefaults() *BucketPolicy {
	this := BucketPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BucketPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BucketPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BucketPolicy) SetId(v string) {
	o.Id = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *BucketPolicy) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicy) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *BucketPolicy) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *BucketPolicy) SetVersion(v string) {
	o.Version = &v
}

// GetStatement returns the Statement field value
func (o *BucketPolicy) GetStatement() []BucketPolicyStatement {
	if o == nil {
		var ret []BucketPolicyStatement
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *BucketPolicy) GetStatementOk() ([]BucketPolicyStatement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Statement, true
}

// SetStatement sets field value
func (o *BucketPolicy) SetStatement(v []BucketPolicyStatement) {
	o.Statement = v
}

func (o BucketPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	toSerialize["Statement"] = o.Statement
	return toSerialize, nil
}

type NullableBucketPolicy struct {
	value *BucketPolicy
	isSet bool
}

func (v NullableBucketPolicy) Get() *BucketPolicy {
	return v.value
}

func (v *NullableBucketPolicy) Set(val *BucketPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicy(val *BucketPolicy) *NullableBucketPolicy {
	return &NullableBucketPolicy{value: val, isSet: true}
}

func (v NullableBucketPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
