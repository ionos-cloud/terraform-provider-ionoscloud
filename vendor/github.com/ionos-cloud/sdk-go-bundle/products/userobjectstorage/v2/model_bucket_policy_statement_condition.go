/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"
)

// checks if the BucketPolicyStatementCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketPolicyStatementCondition{}

// BucketPolicyStatementCondition Conditions for when a policy is in effect.   IONOS Object Storage supports only the following condition operators and keys. Bucket policy does not yet support string interpolation.  **Condition Operators** - ForAllValues:StringLike - ForAnyValue:StringLike - IpAddress - NotIpAddress - NumericEquals - NumericNotEquals - NumericLessThan - NumericLessThanEquals - NumericGreaterThan - NumericGreaterThanEquals - StringEquals - StringNotEquals - StringEqualsIgnoreCase - StringNotEqualsIgnoreCase - StringLike - StringNotLike  **Condition Keys** - s3:delimiter - s3:ExistingObjectTag/<tag-key> - s3:max-keys - s3:object-lock-legal-hold - s3:object-lock-mode - s3:object-lock-remaining-retention-days - s3:object-lock-retain-until-date - s3:prefix - s3:RequestObjectTag/<tag-keys> - s3:RequestObjectTagKeys - s3:VersionId - s3:x-amz-acl - s3:x-amz-copy-source - s3:x-amz-grant-full-control - s3:x-amz-grant-read - s3:x-amz-grant-read-acp - s3:x-amz-grant-write - s3:x-amz-grant-write-acp - s3:x-amz-metadata-directive - s3:x-amz-server-side-encryption
type BucketPolicyStatementCondition struct {
	IpAddress       *BucketPolicyStatementConditionIpAddress       `json:"IpAddress,omitempty"`
	NotIpAddress    *BucketPolicyStatementConditionIpAddress       `json:"NotIpAddress,omitempty"`
	DateGreaterThan *BucketPolicyStatementConditionDateGreaterThan `json:"DateGreaterThan,omitempty"`
	DateLessThan    *BucketPolicyStatementConditionDateLessThan    `json:"DateLessThan,omitempty"`
}

// NewBucketPolicyStatementCondition instantiates a new BucketPolicyStatementCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketPolicyStatementCondition() *BucketPolicyStatementCondition {
	this := BucketPolicyStatementCondition{}

	return &this
}

// NewBucketPolicyStatementConditionWithDefaults instantiates a new BucketPolicyStatementCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketPolicyStatementConditionWithDefaults() *BucketPolicyStatementCondition {
	this := BucketPolicyStatementCondition{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *BucketPolicyStatementCondition) GetIpAddress() BucketPolicyStatementConditionIpAddress {
	if o == nil || IsNil(o.IpAddress) {
		var ret BucketPolicyStatementConditionIpAddress
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicyStatementCondition) GetIpAddressOk() (*BucketPolicyStatementConditionIpAddress, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *BucketPolicyStatementCondition) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given BucketPolicyStatementConditionIpAddress and assigns it to the IpAddress field.
func (o *BucketPolicyStatementCondition) SetIpAddress(v BucketPolicyStatementConditionIpAddress) {
	o.IpAddress = &v
}

// GetNotIpAddress returns the NotIpAddress field value if set, zero value otherwise.
func (o *BucketPolicyStatementCondition) GetNotIpAddress() BucketPolicyStatementConditionIpAddress {
	if o == nil || IsNil(o.NotIpAddress) {
		var ret BucketPolicyStatementConditionIpAddress
		return ret
	}
	return *o.NotIpAddress
}

// GetNotIpAddressOk returns a tuple with the NotIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicyStatementCondition) GetNotIpAddressOk() (*BucketPolicyStatementConditionIpAddress, bool) {
	if o == nil || IsNil(o.NotIpAddress) {
		return nil, false
	}
	return o.NotIpAddress, true
}

// HasNotIpAddress returns a boolean if a field has been set.
func (o *BucketPolicyStatementCondition) HasNotIpAddress() bool {
	if o != nil && !IsNil(o.NotIpAddress) {
		return true
	}

	return false
}

// SetNotIpAddress gets a reference to the given BucketPolicyStatementConditionIpAddress and assigns it to the NotIpAddress field.
func (o *BucketPolicyStatementCondition) SetNotIpAddress(v BucketPolicyStatementConditionIpAddress) {
	o.NotIpAddress = &v
}

// GetDateGreaterThan returns the DateGreaterThan field value if set, zero value otherwise.
func (o *BucketPolicyStatementCondition) GetDateGreaterThan() BucketPolicyStatementConditionDateGreaterThan {
	if o == nil || IsNil(o.DateGreaterThan) {
		var ret BucketPolicyStatementConditionDateGreaterThan
		return ret
	}
	return *o.DateGreaterThan
}

// GetDateGreaterThanOk returns a tuple with the DateGreaterThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicyStatementCondition) GetDateGreaterThanOk() (*BucketPolicyStatementConditionDateGreaterThan, bool) {
	if o == nil || IsNil(o.DateGreaterThan) {
		return nil, false
	}
	return o.DateGreaterThan, true
}

// HasDateGreaterThan returns a boolean if a field has been set.
func (o *BucketPolicyStatementCondition) HasDateGreaterThan() bool {
	if o != nil && !IsNil(o.DateGreaterThan) {
		return true
	}

	return false
}

// SetDateGreaterThan gets a reference to the given BucketPolicyStatementConditionDateGreaterThan and assigns it to the DateGreaterThan field.
func (o *BucketPolicyStatementCondition) SetDateGreaterThan(v BucketPolicyStatementConditionDateGreaterThan) {
	o.DateGreaterThan = &v
}

// GetDateLessThan returns the DateLessThan field value if set, zero value otherwise.
func (o *BucketPolicyStatementCondition) GetDateLessThan() BucketPolicyStatementConditionDateLessThan {
	if o == nil || IsNil(o.DateLessThan) {
		var ret BucketPolicyStatementConditionDateLessThan
		return ret
	}
	return *o.DateLessThan
}

// GetDateLessThanOk returns a tuple with the DateLessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketPolicyStatementCondition) GetDateLessThanOk() (*BucketPolicyStatementConditionDateLessThan, bool) {
	if o == nil || IsNil(o.DateLessThan) {
		return nil, false
	}
	return o.DateLessThan, true
}

// HasDateLessThan returns a boolean if a field has been set.
func (o *BucketPolicyStatementCondition) HasDateLessThan() bool {
	if o != nil && !IsNil(o.DateLessThan) {
		return true
	}

	return false
}

// SetDateLessThan gets a reference to the given BucketPolicyStatementConditionDateLessThan and assigns it to the DateLessThan field.
func (o *BucketPolicyStatementCondition) SetDateLessThan(v BucketPolicyStatementConditionDateLessThan) {
	o.DateLessThan = &v
}

func (o BucketPolicyStatementCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketPolicyStatementCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpAddress) {
		toSerialize["IpAddress"] = o.IpAddress
	}
	if !IsNil(o.NotIpAddress) {
		toSerialize["NotIpAddress"] = o.NotIpAddress
	}
	if !IsNil(o.DateGreaterThan) {
		toSerialize["DateGreaterThan"] = o.DateGreaterThan
	}
	if !IsNil(o.DateLessThan) {
		toSerialize["DateLessThan"] = o.DateLessThan
	}
	return toSerialize, nil
}

type NullableBucketPolicyStatementCondition struct {
	value *BucketPolicyStatementCondition
	isSet bool
}

func (v NullableBucketPolicyStatementCondition) Get() *BucketPolicyStatementCondition {
	return v.value
}

func (v *NullableBucketPolicyStatementCondition) Set(val *BucketPolicyStatementCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicyStatementCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicyStatementCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicyStatementCondition(val *BucketPolicyStatementCondition) *NullableBucketPolicyStatementCondition {
	return &NullableBucketPolicyStatementCondition{value: val, isSet: true}
}

func (v NullableBucketPolicyStatementCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicyStatementCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
