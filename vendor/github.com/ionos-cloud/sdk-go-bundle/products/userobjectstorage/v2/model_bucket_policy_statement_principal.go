/*
 * IONOS Object Storage API for user-owned buckets
 *
 * ## Overview The IONOS Object Storage API for user-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - [Object Storage API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) - Object Storage API Reference for user-owned buckets - current document  ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for user-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Frankfurt, Germany** | **de** | User-owned | `https://s3.eu-central-1.ionoscloud.com`, <br/><br/>**s3 legacy endpoint:** `https://s3-de-central.profitbricks.com`  | | **Berlin, Germany** | **eu-central-2** | User-owned | `https://s3.eu-central-2.ionoscloud.com` | | **Logro√±o, Spain** | **eu-south-2** | User-owned | `https://s3.eu-south-2.ionoscloud.com` |  ## Changelog - **30.05.2024** Renaming to Storage Object API for user-owned buckets - **25.09.2023** Storage object operation names are now used for headlines. - **20.09.2023** Improved description for [HeadBucket](#tag/Basic-Operations/operation/HeadBucket) and [GetBucketLocation](#tag/Location/operation/GetBucketLocation). - **13.09.2023** Improved description for [Bucket Policy-related operations](#tag/Policy/operation/PutBucketPolicy). - **06.09.2023** Improved description for [Bucket ACL-related operations](#tag/ACL/operation/GetBucketAcl). - **30.08.2023** Improved description for [Object Lock-related operations](#tag/Object-Lock/operation/GetObjectLockConfiguration). - **24.07.2023** Improved description for [ListObjectsV2](#tag/Basic-Operations/operation/ListObjectsV2). - **17.07.2023** Improved description for [ListBuckets](#tag/Basic-Operations/operation/ListBuckets). - **07.07.2023** Improved description for [PutBucketReplication](#tag/Replication/operation/PutBucketReplication),   [GetBucketReplication](#tag/Replication/operation/GetBucketReplication), [DeleteBucketReplication](#tag/Replication/operation/DeleteBucketReplication). - **05.07.2023** Improved description for [PutBucketVersioning](#tag/Versioning/operation/PutBucketVersioning)   and [GetBucketVersioning](#tag/Versioning/operation/GetBucketVersioning). - **29.06.2023** Improved description for [PutBucketLifecycleConfiguration](#tag/Lifecycle/operation/PutBucketLifecycle). - **19.04.2023** Improved description on how to use the encryption with IONOS Object Storage managed (SSE-S3) and customer managed keys (SSE-C)   for [PutBucketEncryption](#tag/Encryption/operation/PutBucketEncryption) and [PutObject](#tag/Basic-Operations/operation/PutObject).
 *
 * API version: 2.0.15
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package userobjectstorage

import (
	"encoding/json"

	"fmt"
)

// BucketPolicyStatementPrincipal struct for BucketPolicyStatementPrincipal
type BucketPolicyStatementPrincipal struct {
	BucketPolicyStatementPrincipalAnyOf *BucketPolicyStatementPrincipalAnyOf
	string                              *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BucketPolicyStatementPrincipal) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BucketPolicyStatementPrincipalAnyOf
	err = json.Unmarshal(data, &dst.BucketPolicyStatementPrincipalAnyOf)
	if err == nil {
		jsonBucketPolicyStatementPrincipalAnyOf, _ := json.Marshal(dst.BucketPolicyStatementPrincipalAnyOf)
		if string(jsonBucketPolicyStatementPrincipalAnyOf) == "{}" { // empty struct
			dst.BucketPolicyStatementPrincipalAnyOf = nil
		} else {
			return nil // data stored in dst.BucketPolicyStatementPrincipalAnyOf, return on the first match
		}
	} else {
		dst.BucketPolicyStatementPrincipalAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(BucketPolicyStatementPrincipal)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *BucketPolicyStatementPrincipal) MarshalJSON() ([]byte, error) {
	if src.BucketPolicyStatementPrincipalAnyOf != nil {
		return json.Marshal(&src.BucketPolicyStatementPrincipalAnyOf)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBucketPolicyStatementPrincipal struct {
	value *BucketPolicyStatementPrincipal
	isSet bool
}

func (v NullableBucketPolicyStatementPrincipal) Get() *BucketPolicyStatementPrincipal {
	return v.value
}

func (v *NullableBucketPolicyStatementPrincipal) Set(val *BucketPolicyStatementPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicyStatementPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicyStatementPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicyStatementPrincipal(val *BucketPolicyStatementPrincipal) *NullableBucketPolicyStatementPrincipal {
	return &NullableBucketPolicyStatementPrincipal{value: val, isSet: true}
}

func (v NullableBucketPolicyStatementPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicyStatementPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
