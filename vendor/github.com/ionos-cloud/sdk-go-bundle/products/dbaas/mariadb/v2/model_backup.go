/*
 * IONOS DBaaS MariaDB REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"

	"time"
)

// checks if the Backup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Backup{}

// Backup A backup object.
type Backup struct {
	// The unique ID of the cluster that was backed up.
	ClusterId *string `json:"clusterId,omitempty"`
	// The oldest available timestamp to which you can restore.
	EarliestRecoveryTargetTime *IonosTime `json:"earliestRecoveryTargetTime,omitempty"`
	// Size of all base backups in MiB. This is at least the sum of all base backup sizes.
	Size        *int32       `json:"size,omitempty"`
	BaseBackups []BaseBackup `json:"baseBackups,omitempty"`
}

// NewBackup instantiates a new Backup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackup() *Backup {
	this := Backup{}

	return &this
}

// NewBackupWithDefaults instantiates a new Backup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupWithDefaults() *Backup {
	this := Backup{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *Backup) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *Backup) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *Backup) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetEarliestRecoveryTargetTime returns the EarliestRecoveryTargetTime field value if set, zero value otherwise.
func (o *Backup) GetEarliestRecoveryTargetTime() time.Time {
	if o == nil || IsNil(o.EarliestRecoveryTargetTime) {
		var ret time.Time
		return ret
	}
	return o.EarliestRecoveryTargetTime.Time
}

// GetEarliestRecoveryTargetTimeOk returns a tuple with the EarliestRecoveryTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetEarliestRecoveryTargetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EarliestRecoveryTargetTime) {
		return nil, false
	}
	return &o.EarliestRecoveryTargetTime.Time, true
}

// HasEarliestRecoveryTargetTime returns a boolean if a field has been set.
func (o *Backup) HasEarliestRecoveryTargetTime() bool {
	if o != nil && !IsNil(o.EarliestRecoveryTargetTime) {
		return true
	}

	return false
}

// SetEarliestRecoveryTargetTime gets a reference to the given time.Time and assigns it to the EarliestRecoveryTargetTime field.
func (o *Backup) SetEarliestRecoveryTargetTime(v time.Time) {
	o.EarliestRecoveryTargetTime = &IonosTime{v}
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Backup) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Backup) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Backup) SetSize(v int32) {
	o.Size = &v
}

// GetBaseBackups returns the BaseBackups field value if set, zero value otherwise.
func (o *Backup) GetBaseBackups() []BaseBackup {
	if o == nil || IsNil(o.BaseBackups) {
		var ret []BaseBackup
		return ret
	}
	return o.BaseBackups
}

// GetBaseBackupsOk returns a tuple with the BaseBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Backup) GetBaseBackupsOk() ([]BaseBackup, bool) {
	if o == nil || IsNil(o.BaseBackups) {
		return nil, false
	}
	return o.BaseBackups, true
}

// HasBaseBackups returns a boolean if a field has been set.
func (o *Backup) HasBaseBackups() bool {
	if o != nil && !IsNil(o.BaseBackups) {
		return true
	}

	return false
}

// SetBaseBackups gets a reference to the given []BaseBackup and assigns it to the BaseBackups field.
func (o *Backup) SetBaseBackups(v []BaseBackup) {
	o.BaseBackups = v
}

func (o Backup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.EarliestRecoveryTargetTime) {
		toSerialize["earliestRecoveryTargetTime"] = o.EarliestRecoveryTargetTime
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.BaseBackups) {
		toSerialize["baseBackups"] = o.BaseBackups
	}
	return toSerialize, nil
}

type NullableBackup struct {
	value *Backup
	isSet bool
}

func (v NullableBackup) Get() *Backup {
	return v.value
}

func (v *NullableBackup) Set(val *Backup) {
	v.value = val
	v.isSet = true
}

func (v NullableBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackup(val *Backup) *NullableBackup {
	return &NullableBackup{value: val, isSet: true}
}

func (v NullableBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
