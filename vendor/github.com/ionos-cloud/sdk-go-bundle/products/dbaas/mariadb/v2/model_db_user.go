/*
 * IONOS DBaaS MariaDB REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
)

// checks if the DBUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBUser{}

// DBUser Credentials for the database user to be created.
type DBUser struct {
	// The username for the initial MariaDB user. Some system usernames are restricted (e.g. \"mariadb\", \"admin\", \"standby\").  The username should be compliant with the following rules: - Must not exceed 16 characters - Must start with a letter - Must contain only letters, numbers, or underscores
	Username string `json:"username"`
	// The password for a MariaDB user.
	Password string `json:"password"`
}

// NewDBUser instantiates a new DBUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBUser(username string, password string) *DBUser {
	this := DBUser{}

	this.Username = username
	this.Password = password

	return &this
}

// NewDBUserWithDefaults instantiates a new DBUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBUserWithDefaults() *DBUser {
	this := DBUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *DBUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *DBUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *DBUser) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *DBUser) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *DBUser) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *DBUser) SetPassword(v string) {
	o.Password = v
}

func (o DBUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableDBUser struct {
	value *DBUser
	isSet bool
}

func (v NullableDBUser) Get() *DBUser {
	return v.value
}

func (v *NullableDBUser) Set(val *DBUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDBUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDBUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBUser(val *DBUser) *NullableDBUser {
	return &NullableDBUser{value: val, isSet: true}
}

func (v NullableDBUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
