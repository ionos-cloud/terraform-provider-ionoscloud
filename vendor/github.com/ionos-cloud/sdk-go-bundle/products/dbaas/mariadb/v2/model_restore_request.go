/*
 * IONOS DBaaS MariaDB REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"

	"time"
)

// checks if the RestoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreRequest{}

// RestoreRequest Request payload to restore a cluster from a backup.
type RestoreRequest struct {
	// The unique ID of the resource.
	BackupId string `json:"backupId"`
	// The timestamp to which the cluster should be restored. If empty, the backup will be applied to the latest timestamp.  This value must be supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.  Must be within the earliestRecoveryTargetTime and now.  The earliestRecoveryTargetTime can be looked up in the  backup object.
	RecoveryTargetTime *IonosTime `json:"recoveryTargetTime,omitempty"`
}

// NewRestoreRequest instantiates a new RestoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreRequest(backupId string) *RestoreRequest {
	this := RestoreRequest{}

	this.BackupId = backupId

	return &this
}

// NewRestoreRequestWithDefaults instantiates a new RestoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreRequestWithDefaults() *RestoreRequest {
	this := RestoreRequest{}
	return &this
}

// GetBackupId returns the BackupId field value
func (o *RestoreRequest) GetBackupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupId
}

// GetBackupIdOk returns a tuple with the BackupId field value
// and a boolean to check if the value has been set.
func (o *RestoreRequest) GetBackupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupId, true
}

// SetBackupId sets field value
func (o *RestoreRequest) SetBackupId(v string) {
	o.BackupId = v
}

// GetRecoveryTargetTime returns the RecoveryTargetTime field value if set, zero value otherwise.
func (o *RestoreRequest) GetRecoveryTargetTime() time.Time {
	if o == nil || IsNil(o.RecoveryTargetTime) {
		var ret time.Time
		return ret
	}
	return o.RecoveryTargetTime.Time
}

// GetRecoveryTargetTimeOk returns a tuple with the RecoveryTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreRequest) GetRecoveryTargetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecoveryTargetTime) {
		return nil, false
	}
	return &o.RecoveryTargetTime.Time, true
}

// HasRecoveryTargetTime returns a boolean if a field has been set.
func (o *RestoreRequest) HasRecoveryTargetTime() bool {
	if o != nil && !IsNil(o.RecoveryTargetTime) {
		return true
	}

	return false
}

// SetRecoveryTargetTime gets a reference to the given time.Time and assigns it to the RecoveryTargetTime field.
func (o *RestoreRequest) SetRecoveryTargetTime(v time.Time) {
	o.RecoveryTargetTime = &IonosTime{v}
}

func (o RestoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupId"] = o.BackupId
	if !IsNil(o.RecoveryTargetTime) {
		toSerialize["recoveryTargetTime"] = o.RecoveryTargetTime
	}
	return toSerialize, nil
}

type NullableRestoreRequest struct {
	value *RestoreRequest
	isSet bool
}

func (v NullableRestoreRequest) Get() *RestoreRequest {
	return v.value
}

func (v *NullableRestoreRequest) Set(val *RestoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreRequest(val *RestoreRequest) *NullableRestoreRequest {
	return &NullableRestoreRequest{value: val, isSet: true}
}

func (v NullableRestoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
