/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psql

import (
	"encoding/json"
)

// checks if the DatabaseList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseList{}

// DatabaseList struct for DatabaseList
type DatabaseList struct {
	// The offset specified in the request (if none was specified, the default offset is 0).
	Offset *int32 `json:"offset,omitempty"`
	// The limit specified in the request (if none was specified, the default limit is 100).
	Limit *int32           `json:"limit,omitempty"`
	Links *PaginationLinks `json:"_links,omitempty"`
	Type  ResourceType     `json:"type"`
	// The unique ID of the resource.
	Id string `json:"id"`
	// Absolute URL of the resource.
	Href  string             `json:"href"`
	Items []DatabaseResource `json:"items"`
}

// NewDatabaseList instantiates a new DatabaseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseList(type_ ResourceType, id string, href string, items []DatabaseResource) *DatabaseList {
	this := DatabaseList{}

	var offset int32 = 0
	this.Offset = &offset
	var limit int32 = 100
	this.Limit = &limit
	this.Type = type_
	this.Id = id
	this.Href = href
	this.Items = items

	return &this
}

// NewDatabaseListWithDefaults instantiates a new DatabaseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseListWithDefaults() *DatabaseList {
	this := DatabaseList{}
	var offset int32 = 0
	this.Offset = &offset
	var limit int32 = 100
	this.Limit = &limit
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *DatabaseList) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *DatabaseList) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *DatabaseList) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *DatabaseList) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *DatabaseList) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *DatabaseList) SetLimit(v int32) {
	o.Limit = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DatabaseList) GetLinks() PaginationLinks {
	if o == nil || IsNil(o.Links) {
		var ret PaginationLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetLinksOk() (*PaginationLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DatabaseList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PaginationLinks and assigns it to the Links field.
func (o *DatabaseList) SetLinks(v PaginationLinks) {
	o.Links = &v
}

// GetType returns the Type field value
func (o *DatabaseList) GetType() ResourceType {
	if o == nil {
		var ret ResourceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetTypeOk() (*ResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatabaseList) SetType(v ResourceType) {
	o.Type = v
}

// GetId returns the Id field value
func (o *DatabaseList) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DatabaseList) SetId(v string) {
	o.Id = v
}

// GetHref returns the Href field value
func (o *DatabaseList) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *DatabaseList) SetHref(v string) {
	o.Href = v
}

// GetItems returns the Items field value
func (o *DatabaseList) GetItems() []DatabaseResource {
	if o == nil {
		var ret []DatabaseResource
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *DatabaseList) GetItemsOk() ([]DatabaseResource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *DatabaseList) SetItems(v []DatabaseResource) {
	o.Items = v
}

func (o DatabaseList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["href"] = o.Href
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

type NullableDatabaseList struct {
	value *DatabaseList
	isSet bool
}

func (v NullableDatabaseList) Get() *DatabaseList {
	return v.value
}

func (v *NullableDatabaseList) Set(val *DatabaseList) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseList) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseList(val *DatabaseList) *NullableDatabaseList {
	return &NullableDatabaseList{value: val, isSet: true}
}

func (v NullableDatabaseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
