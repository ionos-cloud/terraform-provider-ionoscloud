/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psql

import (
	"encoding/json"
)

// checks if the PatchClusterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchClusterRequest{}

// PatchClusterRequest Request payload to change a cluster.
type PatchClusterRequest struct {
	Metadata   *ClusterMetadata        `json:"metadata,omitempty"`
	Properties *PatchClusterProperties `json:"properties,omitempty"`
}

// NewPatchClusterRequest instantiates a new PatchClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchClusterRequest() *PatchClusterRequest {
	this := PatchClusterRequest{}

	return &this
}

// NewPatchClusterRequestWithDefaults instantiates a new PatchClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchClusterRequestWithDefaults() *PatchClusterRequest {
	this := PatchClusterRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PatchClusterRequest) GetMetadata() ClusterMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ClusterMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchClusterRequest) GetMetadataOk() (*ClusterMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PatchClusterRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ClusterMetadata and assigns it to the Metadata field.
func (o *PatchClusterRequest) SetMetadata(v ClusterMetadata) {
	o.Metadata = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PatchClusterRequest) GetProperties() PatchClusterProperties {
	if o == nil || IsNil(o.Properties) {
		var ret PatchClusterProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchClusterRequest) GetPropertiesOk() (*PatchClusterProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PatchClusterRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given PatchClusterProperties and assigns it to the Properties field.
func (o *PatchClusterRequest) SetProperties(v PatchClusterProperties) {
	o.Properties = &v
}

func (o PatchClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchClusterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullablePatchClusterRequest struct {
	value *PatchClusterRequest
	isSet bool
}

func (v NullablePatchClusterRequest) Get() *PatchClusterRequest {
	return v.value
}

func (v *NullablePatchClusterRequest) Set(val *PatchClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchClusterRequest(val *PatchClusterRequest) *NullablePatchClusterRequest {
	return &NullablePatchClusterRequest{value: val, isSet: true}
}

func (v NullablePatchClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
