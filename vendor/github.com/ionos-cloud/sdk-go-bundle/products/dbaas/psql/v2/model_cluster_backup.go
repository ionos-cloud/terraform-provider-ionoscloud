/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psql

import (
	"encoding/json"

	"time"
)

// checks if the ClusterBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterBackup{}

// ClusterBackup A backup object.
type ClusterBackup struct {
	// The unique ID of the resource.
	Id *string `json:"id,omitempty"`
	// The unique ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	// The PostgreSQL version this backup was created from.
	Version *string `json:"version,omitempty"`
	// Whether a cluster currently backs up data to this backup.
	IsActive *bool `json:"isActive,omitempty"`
	// The oldest available timestamp to which you can restore.
	EarliestRecoveryTargetTime *IonosTime `json:"earliestRecoveryTargetTime,omitempty"`
	// Size of all base backups including the wal size in MB.
	Size *int32 `json:"size,omitempty"`
	// The S3 location where the backups will be stored.
	Location *string `json:"location,omitempty"`
}

// NewClusterBackup instantiates a new ClusterBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterBackup() *ClusterBackup {
	this := ClusterBackup{}

	return &this
}

// NewClusterBackupWithDefaults instantiates a new ClusterBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterBackupWithDefaults() *ClusterBackup {
	this := ClusterBackup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClusterBackup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClusterBackup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClusterBackup) SetId(v string) {
	o.Id = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ClusterBackup) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClusterBackup) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *ClusterBackup) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ClusterBackup) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ClusterBackup) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ClusterBackup) SetVersion(v string) {
	o.Version = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ClusterBackup) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ClusterBackup) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *ClusterBackup) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEarliestRecoveryTargetTime returns the EarliestRecoveryTargetTime field value if set, zero value otherwise.
func (o *ClusterBackup) GetEarliestRecoveryTargetTime() time.Time {
	if o == nil || IsNil(o.EarliestRecoveryTargetTime) {
		var ret time.Time
		return ret
	}
	return o.EarliestRecoveryTargetTime.Time
}

// GetEarliestRecoveryTargetTimeOk returns a tuple with the EarliestRecoveryTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetEarliestRecoveryTargetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EarliestRecoveryTargetTime) {
		return nil, false
	}
	return &o.EarliestRecoveryTargetTime.Time, true
}

// HasEarliestRecoveryTargetTime returns a boolean if a field has been set.
func (o *ClusterBackup) HasEarliestRecoveryTargetTime() bool {
	if o != nil && !IsNil(o.EarliestRecoveryTargetTime) {
		return true
	}

	return false
}

// SetEarliestRecoveryTargetTime gets a reference to the given time.Time and assigns it to the EarliestRecoveryTargetTime field.
func (o *ClusterBackup) SetEarliestRecoveryTargetTime(v time.Time) {
	o.EarliestRecoveryTargetTime = &IonosTime{v}
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ClusterBackup) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ClusterBackup) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ClusterBackup) SetSize(v int32) {
	o.Size = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ClusterBackup) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterBackup) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ClusterBackup) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ClusterBackup) SetLocation(v string) {
	o.Location = &v
}

func (o ClusterBackup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.EarliestRecoveryTargetTime) {
		toSerialize["earliestRecoveryTargetTime"] = o.EarliestRecoveryTargetTime
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableClusterBackup struct {
	value *ClusterBackup
	isSet bool
}

func (v NullableClusterBackup) Get() *ClusterBackup {
	return v.value
}

func (v *NullableClusterBackup) Set(val *ClusterBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterBackup(val *ClusterBackup) *NullableClusterBackup {
	return &NullableClusterBackup{value: val, isSet: true}
}

func (v NullableClusterBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
