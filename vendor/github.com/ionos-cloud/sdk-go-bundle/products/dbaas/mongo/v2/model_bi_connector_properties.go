/*
 * IONOS DBaaS MongoDB REST API
 *
 * With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.  MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongo

import (
	"encoding/json"
)

// checks if the BiConnectorProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BiConnectorProperties{}

// BiConnectorProperties struct for BiConnectorProperties
type BiConnectorProperties struct {
	// The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	Enabled *bool `json:"enabled,omitempty"`
	// The host where this new BI Connector is installed.
	Host *string `json:"host,omitempty"`
	// Port number used when connecting to this new BI Connector.
	Port *string `json:"port,omitempty"`
}

// NewBiConnectorProperties instantiates a new BiConnectorProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiConnectorProperties() *BiConnectorProperties {
	this := BiConnectorProperties{}

	var enabled bool = false
	this.Enabled = &enabled

	return &this
}

// NewBiConnectorPropertiesWithDefaults instantiates a new BiConnectorProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiConnectorPropertiesWithDefaults() *BiConnectorProperties {
	this := BiConnectorProperties{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BiConnectorProperties) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorProperties) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BiConnectorProperties) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BiConnectorProperties) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *BiConnectorProperties) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorProperties) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *BiConnectorProperties) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *BiConnectorProperties) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *BiConnectorProperties) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorProperties) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *BiConnectorProperties) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *BiConnectorProperties) SetPort(v string) {
	o.Port = &v
}

func (o BiConnectorProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BiConnectorProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableBiConnectorProperties struct {
	value *BiConnectorProperties
	isSet bool
}

func (v NullableBiConnectorProperties) Get() *BiConnectorProperties {
	return v.value
}

func (v *NullableBiConnectorProperties) Set(val *BiConnectorProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableBiConnectorProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableBiConnectorProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiConnectorProperties(val *BiConnectorProperties) *NullableBiConnectorProperties {
	return &NullableBiConnectorProperties{value: val, isSet: true}
}

func (v NullableBiConnectorProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiConnectorProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
