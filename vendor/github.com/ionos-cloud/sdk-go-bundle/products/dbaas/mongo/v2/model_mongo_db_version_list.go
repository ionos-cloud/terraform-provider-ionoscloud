/*
 * IONOS DBaaS MongoDB REST API
 *
 * With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.  MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongo

import (
	"encoding/json"
)

// checks if the MongoDBVersionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongoDBVersionList{}

// MongoDBVersionList List of MongoDB versions.
type MongoDBVersionList struct {
	Data []MongoDBVersionListData `json:"data,omitempty"`
}

// NewMongoDBVersionList instantiates a new MongoDBVersionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBVersionList() *MongoDBVersionList {
	this := MongoDBVersionList{}

	return &this
}

// NewMongoDBVersionListWithDefaults instantiates a new MongoDBVersionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBVersionListWithDefaults() *MongoDBVersionList {
	this := MongoDBVersionList{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MongoDBVersionList) GetData() []MongoDBVersionListData {
	if o == nil || IsNil(o.Data) {
		var ret []MongoDBVersionListData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBVersionList) GetDataOk() ([]MongoDBVersionListData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MongoDBVersionList) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []MongoDBVersionListData and assigns it to the Data field.
func (o *MongoDBVersionList) SetData(v []MongoDBVersionListData) {
	o.Data = v
}

func (o MongoDBVersionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MongoDBVersionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableMongoDBVersionList struct {
	value *MongoDBVersionList
	isSet bool
}

func (v NullableMongoDBVersionList) Get() *MongoDBVersionList {
	return v.value
}

func (v *NullableMongoDBVersionList) Set(val *MongoDBVersionList) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBVersionList) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBVersionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBVersionList(val *MongoDBVersionList) *NullableMongoDBVersionList {
	return &NullableMongoDBVersionList{value: val, isSet: true}
}

func (v NullableMongoDBVersionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBVersionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
