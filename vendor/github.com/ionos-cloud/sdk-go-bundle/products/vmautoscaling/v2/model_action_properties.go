/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the ActionProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionProperties{}

// ActionProperties The properties of the resource; the content depends on the resource type.
type ActionProperties struct {
	ActionStatus ActionStatus `json:"actionStatus"`
	ActionType   ActionType   `json:"actionType"`
}

// NewActionProperties instantiates a new ActionProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionProperties(actionStatus ActionStatus, actionType ActionType) *ActionProperties {
	this := ActionProperties{}

	this.ActionStatus = actionStatus
	this.ActionType = actionType

	return &this
}

// NewActionPropertiesWithDefaults instantiates a new ActionProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionPropertiesWithDefaults() *ActionProperties {
	this := ActionProperties{}
	return &this
}

// GetActionStatus returns the ActionStatus field value
func (o *ActionProperties) GetActionStatus() ActionStatus {
	if o == nil {
		var ret ActionStatus
		return ret
	}

	return o.ActionStatus
}

// GetActionStatusOk returns a tuple with the ActionStatus field value
// and a boolean to check if the value has been set.
func (o *ActionProperties) GetActionStatusOk() (*ActionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionStatus, true
}

// SetActionStatus sets field value
func (o *ActionProperties) SetActionStatus(v ActionStatus) {
	o.ActionStatus = v
}

// GetActionType returns the ActionType field value
func (o *ActionProperties) GetActionType() ActionType {
	if o == nil {
		var ret ActionType
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *ActionProperties) GetActionTypeOk() (*ActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *ActionProperties) SetActionType(v ActionType) {
	o.ActionType = v
}

func (o ActionProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionStatus"] = o.ActionStatus
	toSerialize["actionType"] = o.ActionType
	return toSerialize, nil
}

type NullableActionProperties struct {
	value *ActionProperties
	isSet bool
}

func (v NullableActionProperties) Get() *ActionProperties {
	return v.value
}

func (v *NullableActionProperties) Set(val *ActionProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableActionProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableActionProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionProperties(val *ActionProperties) *NullableActionProperties {
	return &NullableActionProperties{value: val, isSet: true}
}

func (v NullableActionProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
