/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the GroupPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPut{}

// GroupPut The update request for a VM Auto Scaling Group.
type GroupPut struct {
	Properties GroupPutProperties `json:"properties"`
}

// NewGroupPut instantiates a new GroupPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPut(properties GroupPutProperties) *GroupPut {
	this := GroupPut{}

	this.Properties = properties

	return &this
}

// NewGroupPutWithDefaults instantiates a new GroupPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPutWithDefaults() *GroupPut {
	this := GroupPut{}
	return &this
}

// GetProperties returns the Properties field value
func (o *GroupPut) GetProperties() GroupPutProperties {
	if o == nil {
		var ret GroupPutProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *GroupPut) GetPropertiesOk() (*GroupPutProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *GroupPut) SetProperties(v GroupPutProperties) {
	o.Properties = v
}

func (o GroupPut) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableGroupPut struct {
	value *GroupPut
	isSet bool
}

func (v NullableGroupPut) Get() *GroupPut {
	return v.value
}

func (v *NullableGroupPut) Set(val *GroupPut) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPut) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPut(val *GroupPut) *NullableGroupPut {
	return &NullableGroupPut{value: val, isSet: true}
}

func (v NullableGroupPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
