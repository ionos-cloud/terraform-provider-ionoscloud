/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1.0.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the NicFirewallRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NicFirewallRule{}

// NicFirewallRule struct for NicFirewallRule
type NicFirewallRule struct {
	// The name of the firewall rule.
	Name *string `json:"name,omitempty"`
	// The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
	Protocol string `json:"protocol"`
	// Only traffic originating from the respective MAC address is permitted. Valid format: 'aa:bb:cc:dd:ee:ff'. The value 'null' allows traffic from any MAC address.
	SourceMac *string `json:"sourceMac,omitempty"`
	// Only traffic originating from the respective IPv4 address is permitted. The value 'null' allows traffic from any IP address.
	SourceIp *string `json:"sourceIp,omitempty"`
	// If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value 'null' allows traffic to any target IP address.
	TargetIp *string `json:"targetIp,omitempty"`
	// Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value 'null'' allows all codes.
	IcmpCode *int32 `json:"icmpCode,omitempty"`
	// Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value 'null' allows all types.
	IcmpType *int32 `json:"icmpType,omitempty"`
	// Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value 'null' for 'portRangeStart' and 'portRangeEnd' allows all ports.
	PortRangeStart *int32 `json:"portRangeStart,omitempty"`
	// Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value 'null' for 'portRangeStart' and 'portRangeEnd' allows all ports.
	PortRangeEnd *int32 `json:"portRangeEnd,omitempty"`
	// The firewall rule type. If not specified, the default value 'INGRESS' is used.
	Type *string `json:"type,omitempty"`
}

// NewNicFirewallRule instantiates a new NicFirewallRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNicFirewallRule(protocol string) *NicFirewallRule {
	this := NicFirewallRule{}

	this.Protocol = protocol

	return &this
}

// NewNicFirewallRuleWithDefaults instantiates a new NicFirewallRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNicFirewallRuleWithDefaults() *NicFirewallRule {
	this := NicFirewallRule{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NicFirewallRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NicFirewallRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NicFirewallRule) SetName(v string) {
	o.Name = &v
}

// GetProtocol returns the Protocol field value
func (o *NicFirewallRule) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *NicFirewallRule) SetProtocol(v string) {
	o.Protocol = v
}

// GetSourceMac returns the SourceMac field value if set, zero value otherwise.
func (o *NicFirewallRule) GetSourceMac() string {
	if o == nil || IsNil(o.SourceMac) {
		var ret string
		return ret
	}
	return *o.SourceMac
}

// GetSourceMacOk returns a tuple with the SourceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetSourceMacOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMac) {
		return nil, false
	}
	return o.SourceMac, true
}

// HasSourceMac returns a boolean if a field has been set.
func (o *NicFirewallRule) HasSourceMac() bool {
	if o != nil && !IsNil(o.SourceMac) {
		return true
	}

	return false
}

// SetSourceMac gets a reference to the given string and assigns it to the SourceMac field.
func (o *NicFirewallRule) SetSourceMac(v string) {
	o.SourceMac = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *NicFirewallRule) GetSourceIp() string {
	if o == nil || IsNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetSourceIpOk() (*string, bool) {
	if o == nil || IsNil(o.SourceIp) {
		return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *NicFirewallRule) HasSourceIp() bool {
	if o != nil && !IsNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *NicFirewallRule) SetSourceIp(v string) {
	o.SourceIp = &v
}

// GetTargetIp returns the TargetIp field value if set, zero value otherwise.
func (o *NicFirewallRule) GetTargetIp() string {
	if o == nil || IsNil(o.TargetIp) {
		var ret string
		return ret
	}
	return *o.TargetIp
}

// GetTargetIpOk returns a tuple with the TargetIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetTargetIpOk() (*string, bool) {
	if o == nil || IsNil(o.TargetIp) {
		return nil, false
	}
	return o.TargetIp, true
}

// HasTargetIp returns a boolean if a field has been set.
func (o *NicFirewallRule) HasTargetIp() bool {
	if o != nil && !IsNil(o.TargetIp) {
		return true
	}

	return false
}

// SetTargetIp gets a reference to the given string and assigns it to the TargetIp field.
func (o *NicFirewallRule) SetTargetIp(v string) {
	o.TargetIp = &v
}

// GetIcmpCode returns the IcmpCode field value if set, zero value otherwise.
func (o *NicFirewallRule) GetIcmpCode() int32 {
	if o == nil || IsNil(o.IcmpCode) {
		var ret int32
		return ret
	}
	return *o.IcmpCode
}

// GetIcmpCodeOk returns a tuple with the IcmpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetIcmpCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.IcmpCode) {
		return nil, false
	}
	return o.IcmpCode, true
}

// HasIcmpCode returns a boolean if a field has been set.
func (o *NicFirewallRule) HasIcmpCode() bool {
	if o != nil && !IsNil(o.IcmpCode) {
		return true
	}

	return false
}

// SetIcmpCode gets a reference to the given int32 and assigns it to the IcmpCode field.
func (o *NicFirewallRule) SetIcmpCode(v int32) {
	o.IcmpCode = &v
}

// GetIcmpType returns the IcmpType field value if set, zero value otherwise.
func (o *NicFirewallRule) GetIcmpType() int32 {
	if o == nil || IsNil(o.IcmpType) {
		var ret int32
		return ret
	}
	return *o.IcmpType
}

// GetIcmpTypeOk returns a tuple with the IcmpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetIcmpTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.IcmpType) {
		return nil, false
	}
	return o.IcmpType, true
}

// HasIcmpType returns a boolean if a field has been set.
func (o *NicFirewallRule) HasIcmpType() bool {
	if o != nil && !IsNil(o.IcmpType) {
		return true
	}

	return false
}

// SetIcmpType gets a reference to the given int32 and assigns it to the IcmpType field.
func (o *NicFirewallRule) SetIcmpType(v int32) {
	o.IcmpType = &v
}

// GetPortRangeStart returns the PortRangeStart field value if set, zero value otherwise.
func (o *NicFirewallRule) GetPortRangeStart() int32 {
	if o == nil || IsNil(o.PortRangeStart) {
		var ret int32
		return ret
	}
	return *o.PortRangeStart
}

// GetPortRangeStartOk returns a tuple with the PortRangeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetPortRangeStartOk() (*int32, bool) {
	if o == nil || IsNil(o.PortRangeStart) {
		return nil, false
	}
	return o.PortRangeStart, true
}

// HasPortRangeStart returns a boolean if a field has been set.
func (o *NicFirewallRule) HasPortRangeStart() bool {
	if o != nil && !IsNil(o.PortRangeStart) {
		return true
	}

	return false
}

// SetPortRangeStart gets a reference to the given int32 and assigns it to the PortRangeStart field.
func (o *NicFirewallRule) SetPortRangeStart(v int32) {
	o.PortRangeStart = &v
}

// GetPortRangeEnd returns the PortRangeEnd field value if set, zero value otherwise.
func (o *NicFirewallRule) GetPortRangeEnd() int32 {
	if o == nil || IsNil(o.PortRangeEnd) {
		var ret int32
		return ret
	}
	return *o.PortRangeEnd
}

// GetPortRangeEndOk returns a tuple with the PortRangeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetPortRangeEndOk() (*int32, bool) {
	if o == nil || IsNil(o.PortRangeEnd) {
		return nil, false
	}
	return o.PortRangeEnd, true
}

// HasPortRangeEnd returns a boolean if a field has been set.
func (o *NicFirewallRule) HasPortRangeEnd() bool {
	if o != nil && !IsNil(o.PortRangeEnd) {
		return true
	}

	return false
}

// SetPortRangeEnd gets a reference to the given int32 and assigns it to the PortRangeEnd field.
func (o *NicFirewallRule) SetPortRangeEnd(v int32) {
	o.PortRangeEnd = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NicFirewallRule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NicFirewallRule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NicFirewallRule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NicFirewallRule) SetType(v string) {
	o.Type = &v
}

func (o NicFirewallRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NicFirewallRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.SourceMac) {
		toSerialize["sourceMac"] = o.SourceMac
	}
	if !IsNil(o.SourceIp) {
		toSerialize["sourceIp"] = o.SourceIp
	}
	if !IsNil(o.TargetIp) {
		toSerialize["targetIp"] = o.TargetIp
	}
	if !IsNil(o.IcmpCode) {
		toSerialize["icmpCode"] = o.IcmpCode
	}
	if !IsNil(o.IcmpType) {
		toSerialize["icmpType"] = o.IcmpType
	}
	if !IsNil(o.PortRangeStart) {
		toSerialize["portRangeStart"] = o.PortRangeStart
	}
	if !IsNil(o.PortRangeEnd) {
		toSerialize["portRangeEnd"] = o.PortRangeEnd
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableNicFirewallRule struct {
	value *NicFirewallRule
	isSet bool
}

func (v NullableNicFirewallRule) Get() *NicFirewallRule {
	return v.value
}

func (v *NullableNicFirewallRule) Set(val *NicFirewallRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNicFirewallRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNicFirewallRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNicFirewallRule(val *NicFirewallRule) *NullableNicFirewallRule {
	return &NullableNicFirewallRule{value: val, isSet: true}
}

func (v NullableNicFirewallRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNicFirewallRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
