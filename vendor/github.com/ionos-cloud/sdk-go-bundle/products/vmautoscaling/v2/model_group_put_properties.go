/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the GroupPutProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPutProperties{}

// GroupPutProperties struct for GroupPutProperties
type GroupPutProperties struct {
	Datacenter *GroupPutPropertiesDatacenter `json:"datacenter,omitempty"`
	// The data center location.
	Location string `json:"location"`
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount int64 `json:"maxReplicaCount"`
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes
	MinReplicaCount int64 `json:"minReplicaCount"`
	// The name of the VM Auto Scaling Group. This field must not be null or blank.
	Name                 string                `json:"name"`
	Policy               GroupPolicy           `json:"policy"`
	ReplicaConfiguration ReplicaPropertiesPost `json:"replicaConfiguration"`
}

// NewGroupPutProperties instantiates a new GroupPutProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPutProperties(location string, maxReplicaCount int64, minReplicaCount int64, name string, policy GroupPolicy, replicaConfiguration ReplicaPropertiesPost) *GroupPutProperties {
	this := GroupPutProperties{}

	this.Location = location
	this.MaxReplicaCount = maxReplicaCount
	this.MinReplicaCount = minReplicaCount
	this.Name = name
	this.Policy = policy
	this.ReplicaConfiguration = replicaConfiguration

	return &this
}

// NewGroupPutPropertiesWithDefaults instantiates a new GroupPutProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPutPropertiesWithDefaults() *GroupPutProperties {
	this := GroupPutProperties{}
	return &this
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *GroupPutProperties) GetDatacenter() GroupPutPropertiesDatacenter {
	if o == nil || IsNil(o.Datacenter) {
		var ret GroupPutPropertiesDatacenter
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetDatacenterOk() (*GroupPutPropertiesDatacenter, bool) {
	if o == nil || IsNil(o.Datacenter) {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *GroupPutProperties) HasDatacenter() bool {
	if o != nil && !IsNil(o.Datacenter) {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given GroupPutPropertiesDatacenter and assigns it to the Datacenter field.
func (o *GroupPutProperties) SetDatacenter(v GroupPutPropertiesDatacenter) {
	o.Datacenter = &v
}

// GetLocation returns the Location field value
func (o *GroupPutProperties) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *GroupPutProperties) SetLocation(v string) {
	o.Location = v
}

// GetMaxReplicaCount returns the MaxReplicaCount field value
func (o *GroupPutProperties) GetMaxReplicaCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxReplicaCount
}

// GetMaxReplicaCountOk returns a tuple with the MaxReplicaCount field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetMaxReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxReplicaCount, true
}

// SetMaxReplicaCount sets field value
func (o *GroupPutProperties) SetMaxReplicaCount(v int64) {
	o.MaxReplicaCount = v
}

// GetMinReplicaCount returns the MinReplicaCount field value
func (o *GroupPutProperties) GetMinReplicaCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinReplicaCount
}

// GetMinReplicaCountOk returns a tuple with the MinReplicaCount field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetMinReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinReplicaCount, true
}

// SetMinReplicaCount sets field value
func (o *GroupPutProperties) SetMinReplicaCount(v int64) {
	o.MinReplicaCount = v
}

// GetName returns the Name field value
func (o *GroupPutProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupPutProperties) SetName(v string) {
	o.Name = v
}

// GetPolicy returns the Policy field value
func (o *GroupPutProperties) GetPolicy() GroupPolicy {
	if o == nil {
		var ret GroupPolicy
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetPolicyOk() (*GroupPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *GroupPutProperties) SetPolicy(v GroupPolicy) {
	o.Policy = v
}

// GetReplicaConfiguration returns the ReplicaConfiguration field value
func (o *GroupPutProperties) GetReplicaConfiguration() ReplicaPropertiesPost {
	if o == nil {
		var ret ReplicaPropertiesPost
		return ret
	}

	return o.ReplicaConfiguration
}

// GetReplicaConfigurationOk returns a tuple with the ReplicaConfiguration field value
// and a boolean to check if the value has been set.
func (o *GroupPutProperties) GetReplicaConfigurationOk() (*ReplicaPropertiesPost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicaConfiguration, true
}

// SetReplicaConfiguration sets field value
func (o *GroupPutProperties) SetReplicaConfiguration(v ReplicaPropertiesPost) {
	o.ReplicaConfiguration = v
}

func (o GroupPutProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPutProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datacenter) {
		toSerialize["datacenter"] = o.Datacenter
	}
	toSerialize["location"] = o.Location
	toSerialize["maxReplicaCount"] = o.MaxReplicaCount
	toSerialize["minReplicaCount"] = o.MinReplicaCount
	toSerialize["name"] = o.Name
	toSerialize["policy"] = o.Policy
	toSerialize["replicaConfiguration"] = o.ReplicaConfiguration
	return toSerialize, nil
}

type NullableGroupPutProperties struct {
	value *GroupPutProperties
	isSet bool
}

func (v NullableGroupPutProperties) Get() *GroupPutProperties {
	return v.value
}

func (v *NullableGroupPutProperties) Set(val *GroupPutProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPutProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPutProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPutProperties(val *GroupPutProperties) *NullableGroupPutProperties {
	return &NullableGroupPutProperties{value: val, isSet: true}
}

func (v NullableGroupPutProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPutProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
