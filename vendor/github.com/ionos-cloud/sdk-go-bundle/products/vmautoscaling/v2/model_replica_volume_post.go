/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the ReplicaVolumePost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaVolumePost{}

// ReplicaVolumePost struct for ReplicaVolumePost
type ReplicaVolumePost struct {
	// The image installed on the disk. Currently, only the UUID of the image is supported.  >Note that either 'image' or 'imageAlias' must be specified, but not both.
	Image NullableString `json:"image,omitempty"`
	// The image installed on the volume. Must be an 'imageAlias' as specified via the images API. Note that one of 'image' or 'imageAlias' must be set, but not both.
	ImageAlias NullableString `json:"imageAlias,omitempty"`
	// The replica volume name.
	Name string `json:"name"`
	// The size of this replica volume in GB.
	Size int32 `json:"size"`
	// The SSH keys of this volume.
	SshKeys []string     `json:"sshKeys,omitempty"`
	Type    VolumeHwType `json:"type"`
	// The user data (Cloud Init) for this replica volume.
	UserData *string  `json:"userData,omitempty"`
	Bus      *BusType `json:"bus,omitempty"`
	// The ID of the backup unit that the user has access to. The property is immutable and is only allowed to be set on creation of a new a volume. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupunitId *string `json:"backupunitId,omitempty"`
	// Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the voluem as boot volume. Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
	BootOrder string `json:"bootOrder"`
	// The image password for this replica volume.
	ImagePassword *string `json:"imagePassword,omitempty"`
}

// NewReplicaVolumePost instantiates a new ReplicaVolumePost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaVolumePost(name string, size int32, type_ VolumeHwType, bootOrder string) *ReplicaVolumePost {
	this := ReplicaVolumePost{}

	this.Name = name
	this.Size = size
	this.Type = type_
	var bus BusType = BUSTYPE_VIRTIO
	this.Bus = &bus
	this.BootOrder = bootOrder

	return &this
}

// NewReplicaVolumePostWithDefaults instantiates a new ReplicaVolumePost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaVolumePostWithDefaults() *ReplicaVolumePost {
	this := ReplicaVolumePost{}
	var bus BusType = BUSTYPE_VIRTIO
	this.Bus = &bus
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaVolumePost) GetImage() string {
	if o == nil || IsNil(o.Image.Get()) {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaVolumePost) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *ReplicaVolumePost) SetImage(v string) {
	o.Image.Set(&v)
}

// SetImageNil sets the value for Image to be an explicit nil
func (o *ReplicaVolumePost) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *ReplicaVolumePost) UnsetImage() {
	o.Image.Unset()
}

// GetImageAlias returns the ImageAlias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaVolumePost) GetImageAlias() string {
	if o == nil || IsNil(o.ImageAlias.Get()) {
		var ret string
		return ret
	}
	return *o.ImageAlias.Get()
}

// GetImageAliasOk returns a tuple with the ImageAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaVolumePost) GetImageAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageAlias.Get(), o.ImageAlias.IsSet()
}

// HasImageAlias returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasImageAlias() bool {
	if o != nil && o.ImageAlias.IsSet() {
		return true
	}

	return false
}

// SetImageAlias gets a reference to the given NullableString and assigns it to the ImageAlias field.
func (o *ReplicaVolumePost) SetImageAlias(v string) {
	o.ImageAlias.Set(&v)
}

// SetImageAliasNil sets the value for ImageAlias to be an explicit nil
func (o *ReplicaVolumePost) SetImageAliasNil() {
	o.ImageAlias.Set(nil)
}

// UnsetImageAlias ensures that no value is present for ImageAlias, not even an explicit nil
func (o *ReplicaVolumePost) UnsetImageAlias() {
	o.ImageAlias.Unset()
}

// GetName returns the Name field value
func (o *ReplicaVolumePost) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReplicaVolumePost) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *ReplicaVolumePost) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ReplicaVolumePost) SetSize(v int32) {
	o.Size = v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *ReplicaVolumePost) GetSshKeys() []string {
	if o == nil || IsNil(o.SshKeys) {
		var ret []string
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetSshKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []string and assigns it to the SshKeys field.
func (o *ReplicaVolumePost) SetSshKeys(v []string) {
	o.SshKeys = v
}

// GetType returns the Type field value
func (o *ReplicaVolumePost) GetType() VolumeHwType {
	if o == nil {
		var ret VolumeHwType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetTypeOk() (*VolumeHwType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReplicaVolumePost) SetType(v VolumeHwType) {
	o.Type = v
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *ReplicaVolumePost) GetUserData() string {
	if o == nil || IsNil(o.UserData) {
		var ret string
		return ret
	}
	return *o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetUserDataOk() (*string, bool) {
	if o == nil || IsNil(o.UserData) {
		return nil, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasUserData() bool {
	if o != nil && !IsNil(o.UserData) {
		return true
	}

	return false
}

// SetUserData gets a reference to the given string and assigns it to the UserData field.
func (o *ReplicaVolumePost) SetUserData(v string) {
	o.UserData = &v
}

// GetBus returns the Bus field value if set, zero value otherwise.
func (o *ReplicaVolumePost) GetBus() BusType {
	if o == nil || IsNil(o.Bus) {
		var ret BusType
		return ret
	}
	return *o.Bus
}

// GetBusOk returns a tuple with the Bus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetBusOk() (*BusType, bool) {
	if o == nil || IsNil(o.Bus) {
		return nil, false
	}
	return o.Bus, true
}

// HasBus returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasBus() bool {
	if o != nil && !IsNil(o.Bus) {
		return true
	}

	return false
}

// SetBus gets a reference to the given BusType and assigns it to the Bus field.
func (o *ReplicaVolumePost) SetBus(v BusType) {
	o.Bus = &v
}

// GetBackupunitId returns the BackupunitId field value if set, zero value otherwise.
func (o *ReplicaVolumePost) GetBackupunitId() string {
	if o == nil || IsNil(o.BackupunitId) {
		var ret string
		return ret
	}
	return *o.BackupunitId
}

// GetBackupunitIdOk returns a tuple with the BackupunitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetBackupunitIdOk() (*string, bool) {
	if o == nil || IsNil(o.BackupunitId) {
		return nil, false
	}
	return o.BackupunitId, true
}

// HasBackupunitId returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasBackupunitId() bool {
	if o != nil && !IsNil(o.BackupunitId) {
		return true
	}

	return false
}

// SetBackupunitId gets a reference to the given string and assigns it to the BackupunitId field.
func (o *ReplicaVolumePost) SetBackupunitId(v string) {
	o.BackupunitId = &v
}

// GetBootOrder returns the BootOrder field value
func (o *ReplicaVolumePost) GetBootOrder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BootOrder
}

// GetBootOrderOk returns a tuple with the BootOrder field value
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetBootOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootOrder, true
}

// SetBootOrder sets field value
func (o *ReplicaVolumePost) SetBootOrder(v string) {
	o.BootOrder = v
}

// GetImagePassword returns the ImagePassword field value if set, zero value otherwise.
func (o *ReplicaVolumePost) GetImagePassword() string {
	if o == nil || IsNil(o.ImagePassword) {
		var ret string
		return ret
	}
	return *o.ImagePassword
}

// GetImagePasswordOk returns a tuple with the ImagePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaVolumePost) GetImagePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePassword) {
		return nil, false
	}
	return o.ImagePassword, true
}

// HasImagePassword returns a boolean if a field has been set.
func (o *ReplicaVolumePost) HasImagePassword() bool {
	if o != nil && !IsNil(o.ImagePassword) {
		return true
	}

	return false
}

// SetImagePassword gets a reference to the given string and assigns it to the ImagePassword field.
func (o *ReplicaVolumePost) SetImagePassword(v string) {
	o.ImagePassword = &v
}

func (o ReplicaVolumePost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaVolumePost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.ImageAlias.IsSet() {
		toSerialize["imageAlias"] = o.ImageAlias.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	if !IsNil(o.SshKeys) {
		toSerialize["sshKeys"] = o.SshKeys
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UserData) {
		toSerialize["userData"] = o.UserData
	}
	if !IsNil(o.Bus) {
		toSerialize["bus"] = o.Bus
	}
	if !IsNil(o.BackupunitId) {
		toSerialize["backupunitId"] = o.BackupunitId
	}
	toSerialize["bootOrder"] = o.BootOrder
	if !IsNil(o.ImagePassword) {
		toSerialize["imagePassword"] = o.ImagePassword
	}
	return toSerialize, nil
}

type NullableReplicaVolumePost struct {
	value *ReplicaVolumePost
	isSet bool
}

func (v NullableReplicaVolumePost) Get() *ReplicaVolumePost {
	return v.value
}

func (v *NullableReplicaVolumePost) Set(val *ReplicaVolumePost) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaVolumePost) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaVolumePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaVolumePost(val *ReplicaVolumePost) *NullableReplicaVolumePost {
	return &NullableReplicaVolumePost{value: val, isSet: true}
}

func (v NullableReplicaVolumePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaVolumePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
