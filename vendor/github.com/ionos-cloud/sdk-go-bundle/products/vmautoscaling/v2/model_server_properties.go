/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the ServerProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerProperties{}

// ServerProperties struct for ServerProperties
type ServerProperties struct {
	DatacenterServer DatacenterServer `json:"datacenterServer"`
	Name             *string          `json:"name,omitempty"`
}

// NewServerProperties instantiates a new ServerProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerProperties(datacenterServer DatacenterServer) *ServerProperties {
	this := ServerProperties{}

	this.DatacenterServer = datacenterServer

	return &this
}

// NewServerPropertiesWithDefaults instantiates a new ServerProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerPropertiesWithDefaults() *ServerProperties {
	this := ServerProperties{}
	return &this
}

// GetDatacenterServer returns the DatacenterServer field value
func (o *ServerProperties) GetDatacenterServer() DatacenterServer {
	if o == nil {
		var ret DatacenterServer
		return ret
	}

	return o.DatacenterServer
}

// GetDatacenterServerOk returns a tuple with the DatacenterServer field value
// and a boolean to check if the value has been set.
func (o *ServerProperties) GetDatacenterServerOk() (*DatacenterServer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterServer, true
}

// SetDatacenterServer sets field value
func (o *ServerProperties) SetDatacenterServer(v DatacenterServer) {
	o.DatacenterServer = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServerProperties) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerProperties) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServerProperties) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServerProperties) SetName(v string) {
	o.Name = &v
}

func (o ServerProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datacenterServer"] = o.DatacenterServer
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableServerProperties struct {
	value *ServerProperties
	isSet bool
}

func (v NullableServerProperties) Get() *ServerProperties {
	return v.value
}

func (v *NullableServerProperties) Set(val *ServerProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableServerProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableServerProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerProperties(val *ServerProperties) *NullableServerProperties {
	return &NullableServerProperties{value: val, isSet: true}
}

func (v NullableServerProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
