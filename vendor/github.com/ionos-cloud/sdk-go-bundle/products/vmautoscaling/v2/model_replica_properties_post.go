/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the ReplicaPropertiesPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaPropertiesPost{}

// ReplicaPropertiesPost struct for ReplicaPropertiesPost
type ReplicaPropertiesPost struct {
	AvailabilityZone NullableAvailabilityZone `json:"availabilityZone,omitempty"`
	// The total number of cores for the VMs.
	Cores     int32      `json:"cores"`
	CpuFamily *CpuFamily `json:"cpuFamily,omitempty"`
	// The list of NICs associated with this replica.
	Nics []ReplicaNic `json:"nics,omitempty"`
	// The size of the memory for the VMs in MB. The size must be in multiples of 256 MB, with a minimum of 256 MB; if you set 'ramHotPlug=TRUE', you must use at least 1024 MB. If you set the RAM size to more than 240 GB, 'ramHotPlug=FALSE' is fixed.
	Ram int32 `json:"ram"`
	// List of volumes associated with this Replica.
	Volumes []ReplicaVolumePost `json:"volumes,omitempty"`
}

// NewReplicaPropertiesPost instantiates a new ReplicaPropertiesPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaPropertiesPost(cores int32, ram int32) *ReplicaPropertiesPost {
	this := ReplicaPropertiesPost{}

	this.Cores = cores
	this.Ram = ram

	return &this
}

// NewReplicaPropertiesPostWithDefaults instantiates a new ReplicaPropertiesPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaPropertiesPostWithDefaults() *ReplicaPropertiesPost {
	this := ReplicaPropertiesPost{}
	return &this
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaPropertiesPost) GetAvailabilityZone() AvailabilityZone {
	if o == nil || IsNil(o.AvailabilityZone.Get()) {
		var ret AvailabilityZone
		return ret
	}
	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaPropertiesPost) GetAvailabilityZoneOk() (*AvailabilityZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *ReplicaPropertiesPost) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given NullableAvailabilityZone and assigns it to the AvailabilityZone field.
func (o *ReplicaPropertiesPost) SetAvailabilityZone(v AvailabilityZone) {
	o.AvailabilityZone.Set(&v)
}

// SetAvailabilityZoneNil sets the value for AvailabilityZone to be an explicit nil
func (o *ReplicaPropertiesPost) SetAvailabilityZoneNil() {
	o.AvailabilityZone.Set(nil)
}

// UnsetAvailabilityZone ensures that no value is present for AvailabilityZone, not even an explicit nil
func (o *ReplicaPropertiesPost) UnsetAvailabilityZone() {
	o.AvailabilityZone.Unset()
}

// GetCores returns the Cores field value
func (o *ReplicaPropertiesPost) GetCores() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cores
}

// GetCoresOk returns a tuple with the Cores field value
// and a boolean to check if the value has been set.
func (o *ReplicaPropertiesPost) GetCoresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cores, true
}

// SetCores sets field value
func (o *ReplicaPropertiesPost) SetCores(v int32) {
	o.Cores = v
}

// GetCpuFamily returns the CpuFamily field value if set, zero value otherwise.
func (o *ReplicaPropertiesPost) GetCpuFamily() CpuFamily {
	if o == nil || IsNil(o.CpuFamily) {
		var ret CpuFamily
		return ret
	}
	return *o.CpuFamily
}

// GetCpuFamilyOk returns a tuple with the CpuFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaPropertiesPost) GetCpuFamilyOk() (*CpuFamily, bool) {
	if o == nil || IsNil(o.CpuFamily) {
		return nil, false
	}
	return o.CpuFamily, true
}

// HasCpuFamily returns a boolean if a field has been set.
func (o *ReplicaPropertiesPost) HasCpuFamily() bool {
	if o != nil && !IsNil(o.CpuFamily) {
		return true
	}

	return false
}

// SetCpuFamily gets a reference to the given CpuFamily and assigns it to the CpuFamily field.
func (o *ReplicaPropertiesPost) SetCpuFamily(v CpuFamily) {
	o.CpuFamily = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *ReplicaPropertiesPost) GetNics() []ReplicaNic {
	if o == nil || IsNil(o.Nics) {
		var ret []ReplicaNic
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaPropertiesPost) GetNicsOk() ([]ReplicaNic, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *ReplicaPropertiesPost) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []ReplicaNic and assigns it to the Nics field.
func (o *ReplicaPropertiesPost) SetNics(v []ReplicaNic) {
	o.Nics = v
}

// GetRam returns the Ram field value
func (o *ReplicaPropertiesPost) GetRam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *ReplicaPropertiesPost) GetRamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *ReplicaPropertiesPost) SetRam(v int32) {
	o.Ram = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *ReplicaPropertiesPost) GetVolumes() []ReplicaVolumePost {
	if o == nil || IsNil(o.Volumes) {
		var ret []ReplicaVolumePost
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaPropertiesPost) GetVolumesOk() ([]ReplicaVolumePost, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *ReplicaPropertiesPost) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []ReplicaVolumePost and assigns it to the Volumes field.
func (o *ReplicaPropertiesPost) SetVolumes(v []ReplicaVolumePost) {
	o.Volumes = v
}

func (o ReplicaPropertiesPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaPropertiesPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailabilityZone.IsSet() {
		toSerialize["availabilityZone"] = o.AvailabilityZone.Get()
	}
	toSerialize["cores"] = o.Cores
	if !IsNil(o.CpuFamily) {
		toSerialize["cpuFamily"] = o.CpuFamily
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	toSerialize["ram"] = o.Ram
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableReplicaPropertiesPost struct {
	value *ReplicaPropertiesPost
	isSet bool
}

func (v NullableReplicaPropertiesPost) Get() *ReplicaPropertiesPost {
	return v.value
}

func (v *NullableReplicaPropertiesPost) Set(val *ReplicaPropertiesPost) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaPropertiesPost) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaPropertiesPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaPropertiesPost(val *ReplicaPropertiesPost) *NullableReplicaPropertiesPost {
	return &NullableReplicaPropertiesPost{value: val, isSet: true}
}

func (v NullableReplicaPropertiesPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaPropertiesPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
