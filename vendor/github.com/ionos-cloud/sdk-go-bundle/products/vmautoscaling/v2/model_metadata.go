/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1.0.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"

	"time"
)

// checks if the Metadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metadata{}

// Metadata The resource metadata.
type Metadata struct {
	// The user who created the resource.
	CreatedBy string `json:"createdBy"`
	// The ID of the user who created the resource.
	CreatedByUserId string `json:"createdByUserId"`
	// The date the resource was created.
	CreatedDate *IonosTime `json:"createdDate"`
	// The resource etag.
	Etag string `json:"etag"`
	// The last user who modified the resource.
	LastModifiedBy string `json:"lastModifiedBy"`
	// The ID of the last user who modified the resource.
	LastModifiedByUserId string `json:"lastModifiedByUserId"`
	// The date the resource was last modified.
	LastModifiedDate *IonosTime    `json:"lastModifiedDate"`
	State            MetadataState `json:"state"`
}

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata(createdBy string, createdByUserId string, createdDate time.Time, etag string, lastModifiedBy string, lastModifiedByUserId string, lastModifiedDate time.Time, state MetadataState) *Metadata {
	this := Metadata{}

	this.CreatedBy = createdBy
	this.CreatedByUserId = createdByUserId
	this.CreatedDate = &IonosTime{createdDate}
	this.Etag = etag
	this.LastModifiedBy = lastModifiedBy
	this.LastModifiedByUserId = lastModifiedByUserId
	this.LastModifiedDate = &IonosTime{lastModifiedDate}
	this.State = state

	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value
func (o *Metadata) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Metadata) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatedByUserId returns the CreatedByUserId field value
func (o *Metadata) GetCreatedByUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedByUserId
}

// GetCreatedByUserIdOk returns a tuple with the CreatedByUserId field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetCreatedByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedByUserId, true
}

// SetCreatedByUserId sets field value
func (o *Metadata) SetCreatedByUserId(v string) {
	o.CreatedByUserId = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *Metadata) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	if o.CreatedDate == nil {
		var ret time.Time
		return ret
	}
	return o.CreatedDate.Time
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	if o.CreatedDate == nil {
		return nil, true
	}
	return &o.CreatedDate.Time, true
}

// SetCreatedDate sets field value
func (o *Metadata) SetCreatedDate(v time.Time) {
	o.CreatedDate = &IonosTime{v}
}

// GetEtag returns the Etag field value
func (o *Metadata) GetEtag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Etag
}

// GetEtagOk returns a tuple with the Etag field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetEtagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Etag, true
}

// SetEtag sets field value
func (o *Metadata) SetEtag(v string) {
	o.Etag = v
}

// GetLastModifiedBy returns the LastModifiedBy field value
func (o *Metadata) GetLastModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetLastModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedBy, true
}

// SetLastModifiedBy sets field value
func (o *Metadata) SetLastModifiedBy(v string) {
	o.LastModifiedBy = v
}

// GetLastModifiedByUserId returns the LastModifiedByUserId field value
func (o *Metadata) GetLastModifiedByUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastModifiedByUserId
}

// GetLastModifiedByUserIdOk returns a tuple with the LastModifiedByUserId field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetLastModifiedByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedByUserId, true
}

// SetLastModifiedByUserId sets field value
func (o *Metadata) SetLastModifiedByUserId(v string) {
	o.LastModifiedByUserId = v
}

// GetLastModifiedDate returns the LastModifiedDate field value
func (o *Metadata) GetLastModifiedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	if o.LastModifiedDate == nil {
		var ret time.Time
		return ret
	}
	return o.LastModifiedDate.Time
}

// GetLastModifiedDateOk returns a tuple with the LastModifiedDate field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetLastModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	if o.LastModifiedDate == nil {
		return nil, true
	}
	return &o.LastModifiedDate.Time, true
}

// SetLastModifiedDate sets field value
func (o *Metadata) SetLastModifiedDate(v time.Time) {
	o.LastModifiedDate = &IonosTime{v}
}

// GetState returns the State field value
func (o *Metadata) GetState() MetadataState {
	if o == nil {
		var ret MetadataState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetStateOk() (*MetadataState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Metadata) SetState(v MetadataState) {
	o.State = v
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdByUserId"] = o.CreatedByUserId
	toSerialize["createdDate"] = o.CreatedDate
	toSerialize["etag"] = o.Etag
	toSerialize["lastModifiedBy"] = o.LastModifiedBy
	toSerialize["lastModifiedByUserId"] = o.LastModifiedByUserId
	toSerialize["lastModifiedDate"] = o.LastModifiedDate
	toSerialize["state"] = o.State
	return toSerialize, nil
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
