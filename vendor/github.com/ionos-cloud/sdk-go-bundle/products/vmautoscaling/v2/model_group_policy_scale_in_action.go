/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the GroupPolicyScaleInAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPolicyScaleInAction{}

// GroupPolicyScaleInAction Defines the action to be taken when the 'scaleInThreshold' is exceeded. Here, scaling is always about removing VMs associated with this VM Auto Scaling Group. By default, the termination policy is 'OLDEST_SERVER_FIRST' is effective.
type GroupPolicyScaleInAction struct {
	// 'amountType=ABSOLUTE' specifies the absolute number of VMs that are added or removed. The value must be between 1 to 10.   'amountType=PERCENTAGE' specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200.   At least one VM is always added or removed.   Note that for 'SCALE_IN' operations, volumes are not deleted after the server is deleted.
	Amount     float32      `json:"amount"`
	AmountType ActionAmount `json:"amountType"`
	// The minimum time that elapses after the start of this scaling action until the next scaling action is started. With a scaling action in progress, no second scaling action is started for the same VM Auto Scaling Group. Instead, the metric is re-evaluated after the current scaling action completes (either successfully or with errors). This is currently validated with a minimum value of 2 minutes and a maximum value of 24 hours. The default value is 5 minutes if not specified.
	CooldownPeriod    NullableString                `json:"cooldownPeriod,omitempty"`
	TerminationPolicy NullableTerminationPolicyType `json:"terminationPolicy,omitempty"`
	// If set to `true`, when deleting an replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually.  **Note**, that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
	DeleteVolumes bool `json:"deleteVolumes"`
}

// NewGroupPolicyScaleInAction instantiates a new GroupPolicyScaleInAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPolicyScaleInAction(amount float32, amountType ActionAmount, deleteVolumes bool) *GroupPolicyScaleInAction {
	this := GroupPolicyScaleInAction{}

	this.Amount = amount
	this.AmountType = amountType
	var cooldownPeriod = "5m"
	this.CooldownPeriod = *NewNullableString(&cooldownPeriod)
	this.DeleteVolumes = deleteVolumes

	return &this
}

// NewGroupPolicyScaleInActionWithDefaults instantiates a new GroupPolicyScaleInAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPolicyScaleInActionWithDefaults() *GroupPolicyScaleInAction {
	this := GroupPolicyScaleInAction{}
	var cooldownPeriod = "5m"
	this.CooldownPeriod = *NewNullableString(&cooldownPeriod)
	return &this
}

// GetAmount returns the Amount field value
func (o *GroupPolicyScaleInAction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyScaleInAction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *GroupPolicyScaleInAction) SetAmount(v float32) {
	o.Amount = v
}

// GetAmountType returns the AmountType field value
func (o *GroupPolicyScaleInAction) GetAmountType() ActionAmount {
	if o == nil {
		var ret ActionAmount
		return ret
	}

	return o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyScaleInAction) GetAmountTypeOk() (*ActionAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountType, true
}

// SetAmountType sets field value
func (o *GroupPolicyScaleInAction) SetAmountType(v ActionAmount) {
	o.AmountType = v
}

// GetCooldownPeriod returns the CooldownPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupPolicyScaleInAction) GetCooldownPeriod() string {
	if o == nil || IsNil(o.CooldownPeriod.Get()) {
		var ret string
		return ret
	}
	return *o.CooldownPeriod.Get()
}

// GetCooldownPeriodOk returns a tuple with the CooldownPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetCooldownPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CooldownPeriod.Get(), o.CooldownPeriod.IsSet()
}

// HasCooldownPeriod returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasCooldownPeriod() bool {
	if o != nil && o.CooldownPeriod.IsSet() {
		return true
	}

	return false
}

// SetCooldownPeriod gets a reference to the given NullableString and assigns it to the CooldownPeriod field.
func (o *GroupPolicyScaleInAction) SetCooldownPeriod(v string) {
	o.CooldownPeriod.Set(&v)
}

// SetCooldownPeriodNil sets the value for CooldownPeriod to be an explicit nil
func (o *GroupPolicyScaleInAction) SetCooldownPeriodNil() {
	o.CooldownPeriod.Set(nil)
}

// UnsetCooldownPeriod ensures that no value is present for CooldownPeriod, not even an explicit nil
func (o *GroupPolicyScaleInAction) UnsetCooldownPeriod() {
	o.CooldownPeriod.Unset()
}

// GetTerminationPolicy returns the TerminationPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupPolicyScaleInAction) GetTerminationPolicy() TerminationPolicyType {
	if o == nil || IsNil(o.TerminationPolicy.Get()) {
		var ret TerminationPolicyType
		return ret
	}
	return *o.TerminationPolicy.Get()
}

// GetTerminationPolicyOk returns a tuple with the TerminationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetTerminationPolicyOk() (*TerminationPolicyType, bool) {
	if o == nil {
		return nil, false
	}
	return o.TerminationPolicy.Get(), o.TerminationPolicy.IsSet()
}

// HasTerminationPolicy returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasTerminationPolicy() bool {
	if o != nil && o.TerminationPolicy.IsSet() {
		return true
	}

	return false
}

// SetTerminationPolicy gets a reference to the given NullableTerminationPolicyType and assigns it to the TerminationPolicy field.
func (o *GroupPolicyScaleInAction) SetTerminationPolicy(v TerminationPolicyType) {
	o.TerminationPolicy.Set(&v)
}

// SetTerminationPolicyNil sets the value for TerminationPolicy to be an explicit nil
func (o *GroupPolicyScaleInAction) SetTerminationPolicyNil() {
	o.TerminationPolicy.Set(nil)
}

// UnsetTerminationPolicy ensures that no value is present for TerminationPolicy, not even an explicit nil
func (o *GroupPolicyScaleInAction) UnsetTerminationPolicy() {
	o.TerminationPolicy.Unset()
}

// GetDeleteVolumes returns the DeleteVolumes field value
func (o *GroupPolicyScaleInAction) GetDeleteVolumes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DeleteVolumes
}

// GetDeleteVolumesOk returns a tuple with the DeleteVolumes field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyScaleInAction) GetDeleteVolumesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteVolumes, true
}

// SetDeleteVolumes sets field value
func (o *GroupPolicyScaleInAction) SetDeleteVolumes(v bool) {
	o.DeleteVolumes = v
}

func (o GroupPolicyScaleInAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPolicyScaleInAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["amountType"] = o.AmountType
	if o.CooldownPeriod.IsSet() {
		toSerialize["cooldownPeriod"] = o.CooldownPeriod.Get()
	}
	if o.TerminationPolicy.IsSet() {
		toSerialize["terminationPolicy"] = o.TerminationPolicy.Get()
	}
	toSerialize["deleteVolumes"] = o.DeleteVolumes
	return toSerialize, nil
}

type NullableGroupPolicyScaleInAction struct {
	value *GroupPolicyScaleInAction
	isSet bool
}

func (v NullableGroupPolicyScaleInAction) Get() *GroupPolicyScaleInAction {
	return v.value
}

func (v *NullableGroupPolicyScaleInAction) Set(val *GroupPolicyScaleInAction) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPolicyScaleInAction) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPolicyScaleInAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPolicyScaleInAction(val *GroupPolicyScaleInAction) *NullableGroupPolicyScaleInAction {
	return &NullableGroupPolicyScaleInAction{value: val, isSet: true}
}

func (v NullableGroupPolicyScaleInAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPolicyScaleInAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
