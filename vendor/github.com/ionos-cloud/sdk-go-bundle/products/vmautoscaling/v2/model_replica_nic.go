/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmautoscaling

import (
	"encoding/json"
)

// checks if the ReplicaNic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaNic{}

// ReplicaNic struct for ReplicaNic
type ReplicaNic struct {
	// The LAN ID of this replica NIC.
	Lan int32 `json:"lan"`
	// The replica NIC name.
	Name string `json:"name"`
	// DHCP for this replica NIC. This is an optional attribute with the default value 'TRUE' if not specified in the request payload or as null.
	Dhcp NullableBool `json:"dhcp,omitempty"`
	// Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
	FirewallActive NullableBool `json:"firewallActive,omitempty"`
	// The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
	FirewallType NullableString `json:"firewallType,omitempty"`
	// List of all flow logs for the specified NIC.
	FlowLogs []NicFlowLog `json:"flowLogs,omitempty"`
	// List of all firewall rules for the specified NIC.
	FirewallRules []NicFirewallRule `json:"firewallRules,omitempty"`
	TargetGroup   *TargetGroup      `json:"targetGroup,omitempty"`
}

// NewReplicaNic instantiates a new ReplicaNic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaNic(lan int32, name string) *ReplicaNic {
	this := ReplicaNic{}

	this.Lan = lan
	this.Name = name

	return &this
}

// NewReplicaNicWithDefaults instantiates a new ReplicaNic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaNicWithDefaults() *ReplicaNic {
	this := ReplicaNic{}
	return &this
}

// GetLan returns the Lan field value
func (o *ReplicaNic) GetLan() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Lan
}

// GetLanOk returns a tuple with the Lan field value
// and a boolean to check if the value has been set.
func (o *ReplicaNic) GetLanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lan, true
}

// SetLan sets field value
func (o *ReplicaNic) SetLan(v int32) {
	o.Lan = v
}

// GetName returns the Name field value
func (o *ReplicaNic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReplicaNic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReplicaNic) SetName(v string) {
	o.Name = v
}

// GetDhcp returns the Dhcp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaNic) GetDhcp() bool {
	if o == nil || IsNil(o.Dhcp.Get()) {
		var ret bool
		return ret
	}
	return *o.Dhcp.Get()
}

// GetDhcpOk returns a tuple with the Dhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetDhcpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dhcp.Get(), o.Dhcp.IsSet()
}

// HasDhcp returns a boolean if a field has been set.
func (o *ReplicaNic) HasDhcp() bool {
	if o != nil && o.Dhcp.IsSet() {
		return true
	}

	return false
}

// SetDhcp gets a reference to the given NullableBool and assigns it to the Dhcp field.
func (o *ReplicaNic) SetDhcp(v bool) {
	o.Dhcp.Set(&v)
}

// SetDhcpNil sets the value for Dhcp to be an explicit nil
func (o *ReplicaNic) SetDhcpNil() {
	o.Dhcp.Set(nil)
}

// UnsetDhcp ensures that no value is present for Dhcp, not even an explicit nil
func (o *ReplicaNic) UnsetDhcp() {
	o.Dhcp.Unset()
}

// GetFirewallActive returns the FirewallActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaNic) GetFirewallActive() bool {
	if o == nil || IsNil(o.FirewallActive.Get()) {
		var ret bool
		return ret
	}
	return *o.FirewallActive.Get()
}

// GetFirewallActiveOk returns a tuple with the FirewallActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetFirewallActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirewallActive.Get(), o.FirewallActive.IsSet()
}

// HasFirewallActive returns a boolean if a field has been set.
func (o *ReplicaNic) HasFirewallActive() bool {
	if o != nil && o.FirewallActive.IsSet() {
		return true
	}

	return false
}

// SetFirewallActive gets a reference to the given NullableBool and assigns it to the FirewallActive field.
func (o *ReplicaNic) SetFirewallActive(v bool) {
	o.FirewallActive.Set(&v)
}

// SetFirewallActiveNil sets the value for FirewallActive to be an explicit nil
func (o *ReplicaNic) SetFirewallActiveNil() {
	o.FirewallActive.Set(nil)
}

// UnsetFirewallActive ensures that no value is present for FirewallActive, not even an explicit nil
func (o *ReplicaNic) UnsetFirewallActive() {
	o.FirewallActive.Unset()
}

// GetFirewallType returns the FirewallType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaNic) GetFirewallType() string {
	if o == nil || IsNil(o.FirewallType.Get()) {
		var ret string
		return ret
	}
	return *o.FirewallType.Get()
}

// GetFirewallTypeOk returns a tuple with the FirewallType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetFirewallTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirewallType.Get(), o.FirewallType.IsSet()
}

// HasFirewallType returns a boolean if a field has been set.
func (o *ReplicaNic) HasFirewallType() bool {
	if o != nil && o.FirewallType.IsSet() {
		return true
	}

	return false
}

// SetFirewallType gets a reference to the given NullableString and assigns it to the FirewallType field.
func (o *ReplicaNic) SetFirewallType(v string) {
	o.FirewallType.Set(&v)
}

// SetFirewallTypeNil sets the value for FirewallType to be an explicit nil
func (o *ReplicaNic) SetFirewallTypeNil() {
	o.FirewallType.Set(nil)
}

// UnsetFirewallType ensures that no value is present for FirewallType, not even an explicit nil
func (o *ReplicaNic) UnsetFirewallType() {
	o.FirewallType.Unset()
}

// GetFlowLogs returns the FlowLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaNic) GetFlowLogs() []NicFlowLog {
	if o == nil {
		var ret []NicFlowLog
		return ret
	}
	return o.FlowLogs
}

// GetFlowLogsOk returns a tuple with the FlowLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetFlowLogsOk() ([]NicFlowLog, bool) {
	if o == nil || IsNil(o.FlowLogs) {
		return nil, false
	}
	return o.FlowLogs, true
}

// HasFlowLogs returns a boolean if a field has been set.
func (o *ReplicaNic) HasFlowLogs() bool {
	if o != nil && IsNil(o.FlowLogs) {
		return true
	}

	return false
}

// SetFlowLogs gets a reference to the given []NicFlowLog and assigns it to the FlowLogs field.
func (o *ReplicaNic) SetFlowLogs(v []NicFlowLog) {
	o.FlowLogs = v
}

// GetFirewallRules returns the FirewallRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicaNic) GetFirewallRules() []NicFirewallRule {
	if o == nil {
		var ret []NicFirewallRule
		return ret
	}
	return o.FirewallRules
}

// GetFirewallRulesOk returns a tuple with the FirewallRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetFirewallRulesOk() ([]NicFirewallRule, bool) {
	if o == nil || IsNil(o.FirewallRules) {
		return nil, false
	}
	return o.FirewallRules, true
}

// HasFirewallRules returns a boolean if a field has been set.
func (o *ReplicaNic) HasFirewallRules() bool {
	if o != nil && IsNil(o.FirewallRules) {
		return true
	}

	return false
}

// SetFirewallRules gets a reference to the given []NicFirewallRule and assigns it to the FirewallRules field.
func (o *ReplicaNic) SetFirewallRules(v []NicFirewallRule) {
	o.FirewallRules = v
}

// GetTargetGroup returns the TargetGroup field value if set, zero value otherwise.
func (o *ReplicaNic) GetTargetGroup() TargetGroup {
	if o == nil || IsNil(o.TargetGroup) {
		var ret TargetGroup
		return ret
	}
	return *o.TargetGroup
}

// GetTargetGroupOk returns a tuple with the TargetGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaNic) GetTargetGroupOk() (*TargetGroup, bool) {
	if o == nil || IsNil(o.TargetGroup) {
		return nil, false
	}
	return o.TargetGroup, true
}

// HasTargetGroup returns a boolean if a field has been set.
func (o *ReplicaNic) HasTargetGroup() bool {
	if o != nil && !IsNil(o.TargetGroup) {
		return true
	}

	return false
}

// SetTargetGroup gets a reference to the given TargetGroup and assigns it to the TargetGroup field.
func (o *ReplicaNic) SetTargetGroup(v TargetGroup) {
	o.TargetGroup = &v
}

func (o ReplicaNic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaNic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lan"] = o.Lan
	toSerialize["name"] = o.Name
	if o.Dhcp.IsSet() {
		toSerialize["dhcp"] = o.Dhcp.Get()
	}
	if o.FirewallActive.IsSet() {
		toSerialize["firewallActive"] = o.FirewallActive.Get()
	}
	if o.FirewallType.IsSet() {
		toSerialize["firewallType"] = o.FirewallType.Get()
	}
	if o.FlowLogs != nil {
		toSerialize["flowLogs"] = o.FlowLogs
	}
	if o.FirewallRules != nil {
		toSerialize["firewallRules"] = o.FirewallRules
	}
	if !IsNil(o.TargetGroup) {
		toSerialize["targetGroup"] = o.TargetGroup
	}
	return toSerialize, nil
}

type NullableReplicaNic struct {
	value *ReplicaNic
	isSet bool
}

func (v NullableReplicaNic) Get() *ReplicaNic {
	return v.value
}

func (v *NullableReplicaNic) Set(val *ReplicaNic) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaNic) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaNic(val *ReplicaNic) *NullableReplicaNic {
	return &NullableReplicaNic{value: val, isSet: true}
}

func (v NullableReplicaNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
