/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"fmt"
)

// QueryUnit The units of the applied metric. 'TOTAL' can only be combined with 'INSTANCE_CPU_UTILIZATION_AVERAGE'.
type QueryUnit string

// List of QueryUnit
const (
	QUERYUNIT_PER_HOUR   QueryUnit = "PER_HOUR"
	QUERYUNIT_PER_MINUTE QueryUnit = "PER_MINUTE"
	QUERYUNIT_PER_SECOND QueryUnit = "PER_SECOND"
	QUERYUNIT_TOTAL      QueryUnit = "TOTAL"
)

func (v *QueryUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryUnit(value)
	for _, existing := range []QueryUnit{"PER_HOUR", "PER_MINUTE", "PER_SECOND", "TOTAL"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryUnit", value)
}

// Ptr returns reference to QueryUnit value
func (v QueryUnit) Ptr() *QueryUnit {
	return &v
}

type NullableQueryUnit struct {
	value *QueryUnit
	isSet bool
}

func (v NullableQueryUnit) Get() *QueryUnit {
	return v.value
}

func (v *NullableQueryUnit) Set(val *QueryUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryUnit(val *QueryUnit) *NullableQueryUnit {
	return &NullableQueryUnit{value: val, isSet: true}
}

func (v NullableQueryUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
