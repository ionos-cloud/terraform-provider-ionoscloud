/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// Error401 struct for Error401
type Error401 struct {
	HttpStatus *int32             `json:"httpStatus,omitempty"`
	Messages   *[]Error401Message `json:"messages,omitempty"`
}

// NewError401 instantiates a new Error401 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError401() *Error401 {
	this := Error401{}

	return &this
}

// NewError401WithDefaults instantiates a new Error401 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewError401WithDefaults() *Error401 {
	this := Error401{}
	return &this
}

// GetHttpStatus returns the HttpStatus field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Error401) GetHttpStatus() *int32 {
	if o == nil {
		return nil
	}

	return o.HttpStatus

}

// GetHttpStatusOk returns a tuple with the HttpStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error401) GetHttpStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.HttpStatus, true
}

// SetHttpStatus sets field value
func (o *Error401) SetHttpStatus(v int32) {

	o.HttpStatus = &v

}

// HasHttpStatus returns a boolean if a field has been set.
func (o *Error401) HasHttpStatus() bool {
	if o != nil && o.HttpStatus != nil {
		return true
	}

	return false
}

// GetMessages returns the Messages field value
// If the value is explicit nil, the zero value for []Error401Message will be returned
func (o *Error401) GetMessages() *[]Error401Message {
	if o == nil {
		return nil
	}

	return o.Messages

}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error401) GetMessagesOk() (*[]Error401Message, bool) {
	if o == nil {
		return nil, false
	}

	return o.Messages, true
}

// SetMessages sets field value
func (o *Error401) SetMessages(v []Error401Message) {

	o.Messages = &v

}

// HasMessages returns a boolean if a field has been set.
func (o *Error401) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

func (o Error401) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpStatus != nil {
		toSerialize["httpStatus"] = o.HttpStatus
	}

	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}

	return json.Marshal(toSerialize)
}

type NullableError401 struct {
	value *Error401
	isSet bool
}

func (v NullableError401) Get() *Error401 {
	return v.value
}

func (v *NullableError401) Set(val *Error401) {
	v.value = val
	v.isSet = true
}

func (v NullableError401) IsSet() bool {
	return v.isSet
}

func (v *NullableError401) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError401(val *Error401) *NullableError401 {
	return &NullableError401{value: val, isSet: true}
}

func (v NullableError401) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError401) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
