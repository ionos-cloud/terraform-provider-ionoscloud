/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"fmt"
)

// MetadataState The resource state.
type MetadataState string

// List of MetadataState
const (
	METADATASTATE_AVAILABLE MetadataState = "AVAILABLE"
	METADATASTATE_BUSY      MetadataState = "BUSY"
	METADATASTATE_INACTIVE  MetadataState = "INACTIVE"
	METADATASTATE_SUSPENDED MetadataState = "SUSPENDED"
)

func (v *MetadataState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetadataState(value)
	for _, existing := range []MetadataState{"AVAILABLE", "BUSY", "INACTIVE", "SUSPENDED"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetadataState", value)
}

// Ptr returns reference to MetadataState value
func (v MetadataState) Ptr() *MetadataState {
	return &v
}

type NullableMetadataState struct {
	value *MetadataState
	isSet bool
}

func (v NullableMetadataState) Get() *MetadataState {
	return v.value
}

func (v *NullableMetadataState) Set(val *MetadataState) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataState) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataState(val *MetadataState) *NullableMetadataState {
	return &NullableMetadataState{value: val, isSet: true}
}

func (v NullableMetadataState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
