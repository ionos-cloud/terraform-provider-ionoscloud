/*
 * VM Auto Scaling API
 *
 * The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.
 *
 * API version: 1-SDK.1
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"fmt"
)

// AvailabilityZone The zone where the VMs are created. The availability zone is always automatically set to 'AUTO' for performance reasons. Even if you set another value, e.g. 'null', or leave it empty.
type AvailabilityZone string

// List of AvailabilityZone
const (
	AVAILABILITYZONE_AUTO AvailabilityZone = "AUTO"
)

func (v *AvailabilityZone) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityZone(value)
	for _, existing := range []AvailabilityZone{"AUTO"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityZone", value)
}

// Ptr returns reference to AvailabilityZone value
func (v AvailabilityZone) Ptr() *AvailabilityZone {
	return &v
}

type NullableAvailabilityZone struct {
	value *AvailabilityZone
	isSet bool
}

func (v NullableAvailabilityZone) Get() *AvailabilityZone {
	return v.value
}

func (v *NullableAvailabilityZone) Set(val *AvailabilityZone) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZone) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZone(val *AvailabilityZone) *NullableAvailabilityZone {
	return &NullableAvailabilityZone{value: val, isSet: true}
}

func (v NullableAvailabilityZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
