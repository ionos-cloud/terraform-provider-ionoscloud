/*
 * IONOS Logging REST API
 *
 * Logging as a Service (LaaS) is a service that provides a centralized logging system where users are able to push and aggregate their system or application logs. This service also provides a visualization platform where users are able to observe, search and filter the logs and also create dashboards and alerts for their data points. This service can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an API. The API allows you to create logging pipelines or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// InlineResponse404 struct for InlineResponse404
type InlineResponse404 struct {
	HttpStatus *int32                    `json:"httpStatus,omitempty"`
	Message    *InlineResponse404Message `json:"message,omitempty"`
}

// NewInlineResponse404 instantiates a new InlineResponse404 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse404() *InlineResponse404 {
	this := InlineResponse404{}

	var httpStatus int32 = 404
	this.HttpStatus = &httpStatus

	return &this
}

// NewInlineResponse404WithDefaults instantiates a new InlineResponse404 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse404WithDefaults() *InlineResponse404 {
	this := InlineResponse404{}
	var httpStatus int32 = 404
	this.HttpStatus = &httpStatus
	return &this
}

// GetHttpStatus returns the HttpStatus field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *InlineResponse404) GetHttpStatus() *int32 {
	if o == nil {
		return nil
	}

	return o.HttpStatus

}

// GetHttpStatusOk returns a tuple with the HttpStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse404) GetHttpStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.HttpStatus, true
}

// SetHttpStatus sets field value
func (o *InlineResponse404) SetHttpStatus(v int32) {

	o.HttpStatus = &v

}

// HasHttpStatus returns a boolean if a field has been set.
func (o *InlineResponse404) HasHttpStatus() bool {
	if o != nil && o.HttpStatus != nil {
		return true
	}

	return false
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for InlineResponse404Message will be returned
func (o *InlineResponse404) GetMessage() *InlineResponse404Message {
	if o == nil {
		return nil
	}

	return o.Message

}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse404) GetMessageOk() (*InlineResponse404Message, bool) {
	if o == nil {
		return nil, false
	}

	return o.Message, true
}

// SetMessage sets field value
func (o *InlineResponse404) SetMessage(v InlineResponse404Message) {

	o.Message = &v

}

// HasMessage returns a boolean if a field has been set.
func (o *InlineResponse404) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

func (o InlineResponse404) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpStatus != nil {
		toSerialize["httpStatus"] = o.HttpStatus
	}

	if o.Message != nil {
		toSerialize["message"] = o.Message
	}

	return json.Marshal(toSerialize)
}

type NullableInlineResponse404 struct {
	value *InlineResponse404
	isSet bool
}

func (v NullableInlineResponse404) Get() *InlineResponse404 {
	return v.value
}

func (v *NullableInlineResponse404) Set(val *InlineResponse404) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse404) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse404) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse404(val *InlineResponse404) *NullableInlineResponse404 {
	return &NullableInlineResponse404{value: val, isSet: true}
}

func (v NullableInlineResponse404) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse404) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
