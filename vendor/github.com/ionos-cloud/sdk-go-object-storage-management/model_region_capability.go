/*
 * IONOS Cloud - Object Storage Management API
 *
 * Object Storage Management API is a RESTful API that manages the object storage service configuration for IONOS Cloud.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// RegionCapability The capabilities of the region
type RegionCapability struct {
	// Indicates if IAM policy based access is supported
	Iam *bool `json:"iam,omitempty"`
	// Indicates if S3 Select is supported
	S3select *bool `json:"s3select,omitempty"`
}

// NewRegionCapability instantiates a new RegionCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionCapability() *RegionCapability {
	this := RegionCapability{}

	return &this
}

// NewRegionCapabilityWithDefaults instantiates a new RegionCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionCapabilityWithDefaults() *RegionCapability {
	this := RegionCapability{}
	return &this
}

// GetIam returns the Iam field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *RegionCapability) GetIam() *bool {
	if o == nil {
		return nil
	}

	return o.Iam

}

// GetIamOk returns a tuple with the Iam field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionCapability) GetIamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.Iam, true
}

// SetIam sets field value
func (o *RegionCapability) SetIam(v bool) {

	o.Iam = &v

}

// HasIam returns a boolean if a field has been set.
func (o *RegionCapability) HasIam() bool {
	if o != nil && o.Iam != nil {
		return true
	}

	return false
}

// GetS3select returns the S3select field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *RegionCapability) GetS3select() *bool {
	if o == nil {
		return nil
	}

	return o.S3select

}

// GetS3selectOk returns a tuple with the S3select field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionCapability) GetS3selectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.S3select, true
}

// SetS3select sets field value
func (o *RegionCapability) SetS3select(v bool) {

	o.S3select = &v

}

// HasS3select returns a boolean if a field has been set.
func (o *RegionCapability) HasS3select() bool {
	if o != nil && o.S3select != nil {
		return true
	}

	return false
}

func (o RegionCapability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Iam != nil {
		toSerialize["iam"] = o.Iam
	}

	if o.S3select != nil {
		toSerialize["s3select"] = o.S3select
	}

	return json.Marshal(toSerialize)
}

type NullableRegionCapability struct {
	value *RegionCapability
	isSet bool
}

func (v NullableRegionCapability) Get() *RegionCapability {
	return v.value
}

func (v *NullableRegionCapability) Set(val *RegionCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionCapability(val *RegionCapability) *NullableRegionCapability {
	return &NullableRegionCapability{value: val, isSet: true}
}

func (v NullableRegionCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
