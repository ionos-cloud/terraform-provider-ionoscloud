/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature
 *
 * API version: 1.1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"time"
)

// VulnerabilityMetadata struct for VulnerabilityMetadata
type VulnerabilityMetadata struct {
	// The date and time the vulnerability was published
	PublishedAt *IonosTime `json:"publishedAt"`
	// The date and time the vulnerability was last updated
	UpdatedAt *IonosTime `json:"updatedAt,omitempty"`
}

// NewVulnerabilityMetadata instantiates a new VulnerabilityMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityMetadata(publishedAt time.Time) *VulnerabilityMetadata {
	this := VulnerabilityMetadata{}

	this.PublishedAt = &IonosTime{publishedAt}

	return &this
}

// NewVulnerabilityMetadataWithDefaults instantiates a new VulnerabilityMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityMetadataWithDefaults() *VulnerabilityMetadata {
	this := VulnerabilityMetadata{}
	return &this
}

// GetPublishedAt returns the PublishedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *VulnerabilityMetadata) GetPublishedAt() *time.Time {
	if o == nil {
		return nil
	}

	if o.PublishedAt == nil {
		return nil
	}
	return &o.PublishedAt.Time

}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VulnerabilityMetadata) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.PublishedAt == nil {
		return nil, false
	}
	return &o.PublishedAt.Time, true

}

// SetPublishedAt sets field value
func (o *VulnerabilityMetadata) SetPublishedAt(v time.Time) {

	o.PublishedAt = &IonosTime{v}

}

// HasPublishedAt returns a boolean if a field has been set.
func (o *VulnerabilityMetadata) HasPublishedAt() bool {
	if o != nil && o.PublishedAt != nil {
		return true
	}

	return false
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *VulnerabilityMetadata) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}

	if o.UpdatedAt == nil {
		return nil
	}
	return &o.UpdatedAt.Time

}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VulnerabilityMetadata) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.UpdatedAt == nil {
		return nil, false
	}
	return &o.UpdatedAt.Time, true

}

// SetUpdatedAt sets field value
func (o *VulnerabilityMetadata) SetUpdatedAt(v time.Time) {

	o.UpdatedAt = &IonosTime{v}

}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *VulnerabilityMetadata) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

func (o VulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublishedAt != nil {
		toSerialize["publishedAt"] = o.PublishedAt
	}

	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	return json.Marshal(toSerialize)
}

type NullableVulnerabilityMetadata struct {
	value *VulnerabilityMetadata
	isSet bool
}

func (v NullableVulnerabilityMetadata) Get() *VulnerabilityMetadata {
	return v.value
}

func (v *NullableVulnerabilityMetadata) Set(val *VulnerabilityMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityMetadata(val *VulnerabilityMetadata) *NullableVulnerabilityMetadata {
	return &NullableVulnerabilityMetadata{value: val, isSet: true}
}

func (v NullableVulnerabilityMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
