/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature
 *
 * API version: 1.1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"time"
)

// StorageUsage struct for StorageUsage
type StorageUsage struct {
	Bytes     *int64     `json:"bytes"`
	UpdatedAt *IonosTime `json:"updatedAt,omitempty"`
}

// NewStorageUsage instantiates a new StorageUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageUsage(bytes NullableInt64) *StorageUsage {
	this := StorageUsage{}

	this.Bytes = bytes.value

	return &this
}

// NewStorageUsageWithDefaults instantiates a new StorageUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageUsageWithDefaults() *StorageUsage {
	this := StorageUsage{}
	return &this
}

// GetBytes returns the Bytes field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageUsage) GetBytes() *int64 {
	if o == nil {
		return nil
	}

	return o.Bytes

}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageUsage) GetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.Bytes, true
}

// SetBytes sets field value
func (o *StorageUsage) SetBytes(v int64) {

	o.Bytes = &v

}

// HasBytes returns a boolean if a field has been set.
func (o *StorageUsage) HasBytes() bool {
	if o != nil && o.Bytes != nil {
		return true
	}

	return false
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *StorageUsage) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}

	if o.UpdatedAt == nil {
		return nil
	}
	return &o.UpdatedAt.Time

}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageUsage) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.UpdatedAt == nil {
		return nil, false
	}
	return &o.UpdatedAt.Time, true

}

// SetUpdatedAt sets field value
func (o *StorageUsage) SetUpdatedAt(v time.Time) {

	o.UpdatedAt = &IonosTime{v}

}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *StorageUsage) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

func (o StorageUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes

	toSerialize["updatedAt"] = o.UpdatedAt

	return json.Marshal(toSerialize)
}

type NullableStorageUsage struct {
	value *StorageUsage
	isSet bool
}

func (v NullableStorageUsage) Get() *StorageUsage {
	return v.value
}

func (v *NullableStorageUsage) Set(val *StorageUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageUsage(val *StorageUsage) *NullableStorageUsage {
	return &NullableStorageUsage{value: val, isSet: true}
}

func (v NullableStorageUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
