/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature
 *
 * API version: 1.1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"time"
)

// RepositoryMetadataAllOf struct for RepositoryMetadataAllOf
type RepositoryMetadataAllOf struct {
	ArtifactCount *int64     `json:"artifactCount"`
	PullCount     *int64     `json:"pullCount"`
	PushCount     *int64     `json:"pushCount"`
	LastPulledAt  *IonosTime `json:"lastPulledAt,omitempty"`
	LastPushedAt  *IonosTime `json:"lastPushedAt,omitempty"`
	// The CVSS vulnerability severity rating
	LastSeverity *string `json:"lastSeverity,omitempty"`
}

// NewRepositoryMetadataAllOf instantiates a new RepositoryMetadataAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryMetadataAllOf(artifactCount int64, pullCount int64, pushCount int64) *RepositoryMetadataAllOf {
	this := RepositoryMetadataAllOf{}

	this.ArtifactCount = &artifactCount
	this.PullCount = &pullCount
	this.PushCount = &pushCount

	return &this
}

// NewRepositoryMetadataAllOfWithDefaults instantiates a new RepositoryMetadataAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryMetadataAllOfWithDefaults() *RepositoryMetadataAllOf {
	this := RepositoryMetadataAllOf{}
	return &this
}

// GetArtifactCount returns the ArtifactCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RepositoryMetadataAllOf) GetArtifactCount() *int64 {
	if o == nil {
		return nil
	}

	return o.ArtifactCount

}

// GetArtifactCountOk returns a tuple with the ArtifactCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetArtifactCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.ArtifactCount, true
}

// SetArtifactCount sets field value
func (o *RepositoryMetadataAllOf) SetArtifactCount(v int64) {

	o.ArtifactCount = &v

}

// HasArtifactCount returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasArtifactCount() bool {
	if o != nil && o.ArtifactCount != nil {
		return true
	}

	return false
}

// GetPullCount returns the PullCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RepositoryMetadataAllOf) GetPullCount() *int64 {
	if o == nil {
		return nil
	}

	return o.PullCount

}

// GetPullCountOk returns a tuple with the PullCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetPullCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.PullCount, true
}

// SetPullCount sets field value
func (o *RepositoryMetadataAllOf) SetPullCount(v int64) {

	o.PullCount = &v

}

// HasPullCount returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasPullCount() bool {
	if o != nil && o.PullCount != nil {
		return true
	}

	return false
}

// GetPushCount returns the PushCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RepositoryMetadataAllOf) GetPushCount() *int64 {
	if o == nil {
		return nil
	}

	return o.PushCount

}

// GetPushCountOk returns a tuple with the PushCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetPushCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.PushCount, true
}

// SetPushCount sets field value
func (o *RepositoryMetadataAllOf) SetPushCount(v int64) {

	o.PushCount = &v

}

// HasPushCount returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasPushCount() bool {
	if o != nil && o.PushCount != nil {
		return true
	}

	return false
}

// GetLastPulledAt returns the LastPulledAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *RepositoryMetadataAllOf) GetLastPulledAt() *time.Time {
	if o == nil {
		return nil
	}

	if o.LastPulledAt == nil {
		return nil
	}
	return &o.LastPulledAt.Time

}

// GetLastPulledAtOk returns a tuple with the LastPulledAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetLastPulledAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.LastPulledAt == nil {
		return nil, false
	}
	return &o.LastPulledAt.Time, true

}

// SetLastPulledAt sets field value
func (o *RepositoryMetadataAllOf) SetLastPulledAt(v time.Time) {

	o.LastPulledAt = &IonosTime{v}

}

// HasLastPulledAt returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasLastPulledAt() bool {
	if o != nil && o.LastPulledAt != nil {
		return true
	}

	return false
}

// GetLastPushedAt returns the LastPushedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *RepositoryMetadataAllOf) GetLastPushedAt() *time.Time {
	if o == nil {
		return nil
	}

	if o.LastPushedAt == nil {
		return nil
	}
	return &o.LastPushedAt.Time

}

// GetLastPushedAtOk returns a tuple with the LastPushedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetLastPushedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.LastPushedAt == nil {
		return nil, false
	}
	return &o.LastPushedAt.Time, true

}

// SetLastPushedAt sets field value
func (o *RepositoryMetadataAllOf) SetLastPushedAt(v time.Time) {

	o.LastPushedAt = &IonosTime{v}

}

// HasLastPushedAt returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasLastPushedAt() bool {
	if o != nil && o.LastPushedAt != nil {
		return true
	}

	return false
}

// GetLastSeverity returns the LastSeverity field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RepositoryMetadataAllOf) GetLastSeverity() *string {
	if o == nil {
		return nil
	}

	return o.LastSeverity

}

// GetLastSeverityOk returns a tuple with the LastSeverity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryMetadataAllOf) GetLastSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.LastSeverity, true
}

// SetLastSeverity sets field value
func (o *RepositoryMetadataAllOf) SetLastSeverity(v string) {

	o.LastSeverity = &v

}

// HasLastSeverity returns a boolean if a field has been set.
func (o *RepositoryMetadataAllOf) HasLastSeverity() bool {
	if o != nil && o.LastSeverity != nil {
		return true
	}

	return false
}

func (o RepositoryMetadataAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArtifactCount != nil {
		toSerialize["artifactCount"] = o.ArtifactCount
	}

	if o.PullCount != nil {
		toSerialize["pullCount"] = o.PullCount
	}

	if o.PushCount != nil {
		toSerialize["pushCount"] = o.PushCount
	}

	if o.LastPulledAt != nil {
		toSerialize["lastPulledAt"] = o.LastPulledAt
	}

	if o.LastPushedAt != nil {
		toSerialize["lastPushedAt"] = o.LastPushedAt
	}

	if o.LastSeverity != nil {
		toSerialize["lastSeverity"] = o.LastSeverity
	}

	return json.Marshal(toSerialize)
}

type NullableRepositoryMetadataAllOf struct {
	value *RepositoryMetadataAllOf
	isSet bool
}

func (v NullableRepositoryMetadataAllOf) Get() *RepositoryMetadataAllOf {
	return v.value
}

func (v *NullableRepositoryMetadataAllOf) Set(val *RepositoryMetadataAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryMetadataAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryMetadataAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryMetadataAllOf(val *RepositoryMetadataAllOf) *NullableRepositoryMetadataAllOf {
	return &NullableRepositoryMetadataAllOf{value: val, isSet: true}
}

func (v NullableRepositoryMetadataAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryMetadataAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
