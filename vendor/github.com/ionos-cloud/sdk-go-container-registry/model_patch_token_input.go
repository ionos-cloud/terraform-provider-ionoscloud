/*
 * Container Registry service
 *
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature
 *
 * API version: 1.1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"time"
)

// PatchTokenInput struct for PatchTokenInput
type PatchTokenInput struct {
	ExpiryDate *IonosTime `json:"expiryDate,omitempty"`
	Scopes     *[]Scope   `json:"scopes,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// NewPatchTokenInput instantiates a new PatchTokenInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchTokenInput() *PatchTokenInput {
	this := PatchTokenInput{}

	return &this
}

// NewPatchTokenInputWithDefaults instantiates a new PatchTokenInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchTokenInputWithDefaults() *PatchTokenInput {
	this := PatchTokenInput{}
	return &this
}

// GetExpiryDate returns the ExpiryDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PatchTokenInput) GetExpiryDate() *time.Time {
	if o == nil {
		return nil
	}

	if o.ExpiryDate == nil {
		return nil
	}
	return &o.ExpiryDate.Time

}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchTokenInput) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}

	if o.ExpiryDate == nil {
		return nil, false
	}
	return &o.ExpiryDate.Time, true

}

// SetExpiryDate sets field value
func (o *PatchTokenInput) SetExpiryDate(v time.Time) {

	o.ExpiryDate = &IonosTime{v}

}

// HasExpiryDate returns a boolean if a field has been set.
func (o *PatchTokenInput) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// GetScopes returns the Scopes field value
// If the value is explicit nil, the zero value for []Scope will be returned
func (o *PatchTokenInput) GetScopes() *[]Scope {
	if o == nil {
		return nil
	}

	return o.Scopes

}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchTokenInput) GetScopesOk() (*[]Scope, bool) {
	if o == nil {
		return nil, false
	}

	return o.Scopes, true
}

// SetScopes sets field value
func (o *PatchTokenInput) SetScopes(v []Scope) {

	o.Scopes = &v

}

// HasScopes returns a boolean if a field has been set.
func (o *PatchTokenInput) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PatchTokenInput) GetStatus() *string {
	if o == nil {
		return nil
	}

	return o.Status

}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchTokenInput) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Status, true
}

// SetStatus sets field value
func (o *PatchTokenInput) SetStatus(v string) {

	o.Status = &v

}

// HasStatus returns a boolean if a field has been set.
func (o *PatchTokenInput) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

func (o PatchTokenInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expiryDate"] = o.ExpiryDate

	toSerialize["scopes"] = o.Scopes

	if o.Status != nil {
		toSerialize["status"] = o.Status
	}

	return json.Marshal(toSerialize)
}

type NullablePatchTokenInput struct {
	value *PatchTokenInput
	isSet bool
}

func (v NullablePatchTokenInput) Get() *PatchTokenInput {
	return v.value
}

func (v *NullablePatchTokenInput) Set(val *PatchTokenInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchTokenInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchTokenInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchTokenInput(val *PatchTokenInput) *NullablePatchTokenInput {
	return &NullablePatchTokenInput{value: val, isSet: true}
}

func (v NullablePatchTokenInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchTokenInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
