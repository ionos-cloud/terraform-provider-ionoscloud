/*
 * IONOS Cloud - DNS as a Service API
 *
 * DNS API Specification
 *
 * API version: 0.1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// RecordsResponse struct for RecordsResponse
type RecordsResponse struct {
	Items *[]RecordResponse `json:"items,omitempty"`
	// Pagination offset.
	Offset *float32 `json:"offset,omitempty"`
	// Pagination limit.
	Limit *float32 `json:"limit,omitempty"`
}

// NewRecordsResponse instantiates a new RecordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordsResponse() *RecordsResponse {
	this := RecordsResponse{}

	return &this
}

// NewRecordsResponseWithDefaults instantiates a new RecordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordsResponseWithDefaults() *RecordsResponse {
	this := RecordsResponse{}
	return &this
}

// GetItems returns the Items field value
// If the value is explicit nil, the zero value for []RecordResponse will be returned
func (o *RecordsResponse) GetItems() *[]RecordResponse {
	if o == nil {
		return nil
	}

	return o.Items

}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordsResponse) GetItemsOk() (*[]RecordResponse, bool) {
	if o == nil {
		return nil, false
	}

	return o.Items, true
}

// SetItems sets field value
func (o *RecordsResponse) SetItems(v []RecordResponse) {

	o.Items = &v

}

// HasItems returns a boolean if a field has been set.
func (o *RecordsResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// GetOffset returns the Offset field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *RecordsResponse) GetOffset() *float32 {
	if o == nil {
		return nil
	}

	return o.Offset

}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordsResponse) GetOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}

	return o.Offset, true
}

// SetOffset sets field value
func (o *RecordsResponse) SetOffset(v float32) {

	o.Offset = &v

}

// HasOffset returns a boolean if a field has been set.
func (o *RecordsResponse) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// GetLimit returns the Limit field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *RecordsResponse) GetLimit() *float32 {
	if o == nil {
		return nil
	}

	return o.Limit

}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordsResponse) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}

	return o.Limit, true
}

// SetLimit sets field value
func (o *RecordsResponse) SetLimit(v float32) {

	o.Limit = &v

}

// HasLimit returns a boolean if a field has been set.
func (o *RecordsResponse) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

func (o RecordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}

	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}

	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}

	return json.Marshal(toSerialize)
}

type NullableRecordsResponse struct {
	value *RecordsResponse
	isSet bool
}

func (v NullableRecordsResponse) Get() *RecordsResponse {
	return v.value
}

func (v *NullableRecordsResponse) Set(val *RecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordsResponse(val *RecordsResponse) *NullableRecordsResponse {
	return &NullableRecordsResponse{value: val, isSet: true}
}

func (v NullableRecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
