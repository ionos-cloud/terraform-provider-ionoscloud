/*
 * IONOS Logging REST API
 *
 * Logging as a Service (LaaS) is a service that provides a centralized logging system where users are able to push and aggregate their system or application logs. This service also provides a visualization platform where users are able to observe, search and filter the logs and also create dashboards and alerts for their data points. This service can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an API. The API allows you to create logging pipelines or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// Destination The information of the logging aggregator storage
type Destination struct {
	// The internal output stream to send logs to
	Type *string `json:"type,omitempty"`
	// defines the number of days a log record should be kept in loki. Works with loki destination type only.
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`
}

// NewDestination instantiates a new Destination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestination() *Destination {
	this := Destination{}

	var type_ string = "loki"
	this.Type = &type_
	var retentionInDays int32 = 30
	this.RetentionInDays = &retentionInDays

	return &this
}

// NewDestinationWithDefaults instantiates a new Destination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationWithDefaults() *Destination {
	this := Destination{}
	var type_ string = "loki"
	this.Type = &type_
	var retentionInDays int32 = 30
	this.RetentionInDays = &retentionInDays
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Destination) GetType() *string {
	if o == nil {
		return nil
	}

	return o.Type

}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Type, true
}

// SetType sets field value
func (o *Destination) SetType(v string) {

	o.Type = &v

}

// HasType returns a boolean if a field has been set.
func (o *Destination) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// GetRetentionInDays returns the RetentionInDays field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Destination) GetRetentionInDays() *int32 {
	if o == nil {
		return nil
	}

	return o.RetentionInDays

}

// GetRetentionInDaysOk returns a tuple with the RetentionInDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetRetentionInDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.RetentionInDays, true
}

// SetRetentionInDays sets field value
func (o *Destination) SetRetentionInDays(v int32) {

	o.RetentionInDays = &v

}

// HasRetentionInDays returns a boolean if a field has been set.
func (o *Destination) HasRetentionInDays() bool {
	if o != nil && o.RetentionInDays != nil {
		return true
	}

	return false
}

func (o Destination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	if o.RetentionInDays != nil {
		toSerialize["retentionInDays"] = o.RetentionInDays
	}

	return json.Marshal(toSerialize)
}

type NullableDestination struct {
	value *Destination
	isSet bool
}

func (v NullableDestination) Get() *Destination {
	return v.value
}

func (v *NullableDestination) Set(val *Destination) {
	v.value = val
	v.isSet = true
}

func (v NullableDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestination(val *Destination) *NullableDestination {
	return &NullableDestination{value: val, isSet: true}
}

func (v NullableDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
