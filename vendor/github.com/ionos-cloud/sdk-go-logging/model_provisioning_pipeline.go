/*
 * IONOS Logging REST API
 *
 * The logging service offers a centralized platform to collect and store logs from various systems and applications. It includes tools to search, filter, visualize, and create alerts based on your log data.  This API provides programmatic control over logging pipelines, enabling you to create new pipelines or modify existing ones. It mirrors the functionality of the DCD visual tool, ensuring a consistent experience regardless of your chosen interface.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ProvisioningPipeline pipeline response
type ProvisioningPipeline struct {
	// The unique ID of the resource.
	Id         *string               `json:"id,omitempty"`
	Metadata   *ProvisioningMetadata `json:"metadata,omitempty"`
	Properties *PipelineProperties   `json:"properties,omitempty"`
}

// NewProvisioningPipeline instantiates a new ProvisioningPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningPipeline() *ProvisioningPipeline {
	this := ProvisioningPipeline{}

	return &this
}

// NewProvisioningPipelineWithDefaults instantiates a new ProvisioningPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningPipelineWithDefaults() *ProvisioningPipeline {
	this := ProvisioningPipeline{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProvisioningPipeline) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisioningPipeline) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *ProvisioningPipeline) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *ProvisioningPipeline) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for ProvisioningMetadata will be returned
func (o *ProvisioningPipeline) GetMetadata() *ProvisioningMetadata {
	if o == nil {
		return nil
	}

	return o.Metadata

}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisioningPipeline) GetMetadataOk() (*ProvisioningMetadata, bool) {
	if o == nil {
		return nil, false
	}

	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ProvisioningPipeline) SetMetadata(v ProvisioningMetadata) {

	o.Metadata = &v

}

// HasMetadata returns a boolean if a field has been set.
func (o *ProvisioningPipeline) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for PipelineProperties will be returned
func (o *ProvisioningPipeline) GetProperties() *PipelineProperties {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisioningPipeline) GetPropertiesOk() (*PipelineProperties, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *ProvisioningPipeline) SetProperties(v PipelineProperties) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *ProvisioningPipeline) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o ProvisioningPipeline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableProvisioningPipeline struct {
	value *ProvisioningPipeline
	isSet bool
}

func (v NullableProvisioningPipeline) Get() *ProvisioningPipeline {
	return v.value
}

func (v *NullableProvisioningPipeline) Set(val *ProvisioningPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningPipeline(val *ProvisioningPipeline) *NullableProvisioningPipeline {
	return &NullableProvisioningPipeline{value: val, isSet: true}
}

func (v NullableProvisioningPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
