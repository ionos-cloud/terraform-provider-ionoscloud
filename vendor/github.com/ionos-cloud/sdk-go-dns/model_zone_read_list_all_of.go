/*
 * IONOS Cloud - DNS API
 *
 * Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.
 *
 * API version: 1.16.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ZoneReadListAllOf List of primary zones
type ZoneReadListAllOf struct {
	Items *[]ZoneRead `json:"items"`
}

// NewZoneReadListAllOf instantiates a new ZoneReadListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneReadListAllOf(items []ZoneRead) *ZoneReadListAllOf {
	this := ZoneReadListAllOf{}

	this.Items = &items

	return &this
}

// NewZoneReadListAllOfWithDefaults instantiates a new ZoneReadListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneReadListAllOfWithDefaults() *ZoneReadListAllOf {
	this := ZoneReadListAllOf{}
	return &this
}

// GetItems returns the Items field value
// If the value is explicit nil, the zero value for []ZoneRead will be returned
func (o *ZoneReadListAllOf) GetItems() *[]ZoneRead {
	if o == nil {
		return nil
	}

	return o.Items

}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneReadListAllOf) GetItemsOk() (*[]ZoneRead, bool) {
	if o == nil {
		return nil, false
	}

	return o.Items, true
}

// SetItems sets field value
func (o *ZoneReadListAllOf) SetItems(v []ZoneRead) {

	o.Items = &v

}

// HasItems returns a boolean if a field has been set.
func (o *ZoneReadListAllOf) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

func (o ZoneReadListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}

	return json.Marshal(toSerialize)
}

type NullableZoneReadListAllOf struct {
	value *ZoneReadListAllOf
	isSet bool
}

func (v NullableZoneReadListAllOf) Get() *ZoneReadListAllOf {
	return v.value
}

func (v *NullableZoneReadListAllOf) Set(val *ZoneReadListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneReadListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneReadListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneReadListAllOf(val *ZoneReadListAllOf) *NullableZoneReadListAllOf {
	return &NullableZoneReadListAllOf{value: val, isSet: true}
}

func (v NullableZoneReadListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneReadListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
