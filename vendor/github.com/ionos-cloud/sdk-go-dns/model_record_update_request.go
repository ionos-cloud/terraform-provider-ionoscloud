/*
 * IONOS Cloud - DNS API
 *
 * DNS API Specification
 *
 * API version: 1.0.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// RecordUpdateRequest struct for RecordUpdateRequest
type RecordUpdateRequest struct {
	Properties *RecordProperties `json:"properties"`
}

// NewRecordUpdateRequest instantiates a new RecordUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordUpdateRequest(properties RecordProperties) *RecordUpdateRequest {
	this := RecordUpdateRequest{}

	this.Properties = &properties

	return &this
}

// NewRecordUpdateRequestWithDefaults instantiates a new RecordUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordUpdateRequestWithDefaults() *RecordUpdateRequest {
	this := RecordUpdateRequest{}
	return &this
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for RecordProperties will be returned
func (o *RecordUpdateRequest) GetProperties() *RecordProperties {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordUpdateRequest) GetPropertiesOk() (*RecordProperties, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *RecordUpdateRequest) SetProperties(v RecordProperties) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *RecordUpdateRequest) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o RecordUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableRecordUpdateRequest struct {
	value *RecordUpdateRequest
	isSet bool
}

func (v NullableRecordUpdateRequest) Get() *RecordUpdateRequest {
	return v.value
}

func (v *NullableRecordUpdateRequest) Set(val *RecordUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordUpdateRequest(val *RecordUpdateRequest) *NullableRecordUpdateRequest {
	return &NullableRecordUpdateRequest{value: val, isSet: true}
}

func (v NullableRecordUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
