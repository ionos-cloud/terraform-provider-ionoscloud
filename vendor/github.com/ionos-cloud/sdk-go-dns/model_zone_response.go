/*
 * IONOS Cloud - DNS API
 *
 * DNS API Specification
 *
 * API version: 1.0.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// ZoneResponse struct for ZoneResponse
type ZoneResponse struct {
	// The zone ID (UUID).
	Id         *string                 `json:"id,omitempty"`
	Metadata   *ZoneResponseMetadata   `json:"metadata,omitempty"`
	Properties *ZoneResponseProperties `json:"properties,omitempty"`
}

// NewZoneResponse instantiates a new ZoneResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneResponse() *ZoneResponse {
	this := ZoneResponse{}

	return &this
}

// NewZoneResponseWithDefaults instantiates a new ZoneResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneResponseWithDefaults() *ZoneResponse {
	this := ZoneResponse{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ZoneResponse) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *ZoneResponse) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *ZoneResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for ZoneResponseMetadata will be returned
func (o *ZoneResponse) GetMetadata() *ZoneResponseMetadata {
	if o == nil {
		return nil
	}

	return o.Metadata

}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneResponse) GetMetadataOk() (*ZoneResponseMetadata, bool) {
	if o == nil {
		return nil, false
	}

	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ZoneResponse) SetMetadata(v ZoneResponseMetadata) {

	o.Metadata = &v

}

// HasMetadata returns a boolean if a field has been set.
func (o *ZoneResponse) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for ZoneResponseProperties will be returned
func (o *ZoneResponse) GetProperties() *ZoneResponseProperties {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneResponse) GetPropertiesOk() (*ZoneResponseProperties, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *ZoneResponse) SetProperties(v ZoneResponseProperties) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *ZoneResponse) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o ZoneResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableZoneResponse struct {
	value *ZoneResponse
	isSet bool
}

func (v NullableZoneResponse) Get() *ZoneResponse {
	return v.value
}

func (v *NullableZoneResponse) Set(val *ZoneResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneResponse(val *ZoneResponse) *NullableZoneResponse {
	return &NullableZoneResponse{value: val, isSet: true}
}

func (v NullableZoneResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
