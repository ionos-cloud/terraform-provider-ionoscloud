/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// ListObjectVersionsOutput struct for ListObjectVersionsOutput
type ListObjectVersionsOutput struct {
	XMLName xml.Name `xml:"ListVersionsResult"`
	// A flag that indicates whether IONOS Object Storage returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
	IsTruncated *bool `json:"IsTruncated,omitempty" xml:"IsTruncated"`
	// Marks the last key returned in a truncated response.
	KeyMarker *string `json:"KeyMarker,omitempty" xml:"KeyMarker"`
	// Marks the last version of the key returned in a truncated response.
	VersionIdMarker *string `json:"VersionIdMarker,omitempty" xml:"VersionIdMarker"`
	// When the number of responses exceeds the value of `MaxKeys`, `NextKeyMarker` specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request.
	NextKeyMarker *string `json:"NextKeyMarker,omitempty" xml:"NextKeyMarker"`
	// When the number of responses exceeds the value of `MaxKeys`, `NextVersionIdMarker` specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request.
	NextVersionIdMarker *string `json:"NextVersionIdMarker,omitempty" xml:"NextVersionIdMarker"`
	// Container for version information.
	Versions      *[]ObjectVersion     `json:"Versions,omitempty" xml:"Version"`
	DeleteMarkers *[]DeleteMarkerEntry `json:"DeleteMarkers,omitempty" xml:"DeleteMarker"`
	// The bucket name.
	Name *string `json:"Name,omitempty" xml:"Name"`
	// Selects objects that start with the value supplied by this parameter.
	Prefix    *string `json:"Prefix,omitempty" xml:"Prefix"`
	Delimiter *string `json:"Delimiter,omitempty" xml:"Delimiter"`
	// The maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more.
	MaxKeys *int32 `json:"MaxKeys,omitempty" xml:"MaxKeys"`
	// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
	CommonPrefixes *[]CommonPrefix `json:"CommonPrefixes,omitempty" xml:"CommonPrefixes"`
	EncodingType   *EncodingType   `json:"EncodingType,omitempty" xml:"EncodingType"`
}

// NewListObjectVersionsOutput instantiates a new ListObjectVersionsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObjectVersionsOutput() *ListObjectVersionsOutput {
	this := ListObjectVersionsOutput{}

	return &this
}

// NewListObjectVersionsOutputWithDefaults instantiates a new ListObjectVersionsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectVersionsOutputWithDefaults() *ListObjectVersionsOutput {
	this := ListObjectVersionsOutput{}
	return &this
}

// GetIsTruncated returns the IsTruncated field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ListObjectVersionsOutput) GetIsTruncated() *bool {
	if o == nil {
		return nil
	}

	return o.IsTruncated

}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetIsTruncatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.IsTruncated, true
}

// SetIsTruncated sets field value
func (o *ListObjectVersionsOutput) SetIsTruncated(v bool) {

	o.IsTruncated = &v

}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasIsTruncated() bool {
	if o != nil && o.IsTruncated != nil {
		return true
	}

	return false
}

// GetKeyMarker returns the KeyMarker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetKeyMarker() *string {
	if o == nil {
		return nil
	}

	return o.KeyMarker

}

// GetKeyMarkerOk returns a tuple with the KeyMarker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetKeyMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.KeyMarker, true
}

// SetKeyMarker sets field value
func (o *ListObjectVersionsOutput) SetKeyMarker(v string) {

	o.KeyMarker = &v

}

// HasKeyMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasKeyMarker() bool {
	if o != nil && o.KeyMarker != nil {
		return true
	}

	return false
}

// GetVersionIdMarker returns the VersionIdMarker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetVersionIdMarker() *string {
	if o == nil {
		return nil
	}

	return o.VersionIdMarker

}

// GetVersionIdMarkerOk returns a tuple with the VersionIdMarker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetVersionIdMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.VersionIdMarker, true
}

// SetVersionIdMarker sets field value
func (o *ListObjectVersionsOutput) SetVersionIdMarker(v string) {

	o.VersionIdMarker = &v

}

// HasVersionIdMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasVersionIdMarker() bool {
	if o != nil && o.VersionIdMarker != nil {
		return true
	}

	return false
}

// GetNextKeyMarker returns the NextKeyMarker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetNextKeyMarker() *string {
	if o == nil {
		return nil
	}

	return o.NextKeyMarker

}

// GetNextKeyMarkerOk returns a tuple with the NextKeyMarker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetNextKeyMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.NextKeyMarker, true
}

// SetNextKeyMarker sets field value
func (o *ListObjectVersionsOutput) SetNextKeyMarker(v string) {

	o.NextKeyMarker = &v

}

// HasNextKeyMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasNextKeyMarker() bool {
	if o != nil && o.NextKeyMarker != nil {
		return true
	}

	return false
}

// GetNextVersionIdMarker returns the NextVersionIdMarker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetNextVersionIdMarker() *string {
	if o == nil {
		return nil
	}

	return o.NextVersionIdMarker

}

// GetNextVersionIdMarkerOk returns a tuple with the NextVersionIdMarker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetNextVersionIdMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.NextVersionIdMarker, true
}

// SetNextVersionIdMarker sets field value
func (o *ListObjectVersionsOutput) SetNextVersionIdMarker(v string) {

	o.NextVersionIdMarker = &v

}

// HasNextVersionIdMarker returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasNextVersionIdMarker() bool {
	if o != nil && o.NextVersionIdMarker != nil {
		return true
	}

	return false
}

// GetVersions returns the Versions field value
// If the value is explicit nil, the zero value for []ObjectVersion will be returned
func (o *ListObjectVersionsOutput) GetVersions() *[]ObjectVersion {
	if o == nil {
		return nil
	}

	return o.Versions

}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetVersionsOk() (*[]ObjectVersion, bool) {
	if o == nil {
		return nil, false
	}

	return o.Versions, true
}

// SetVersions sets field value
func (o *ListObjectVersionsOutput) SetVersions(v []ObjectVersion) {

	o.Versions = &v

}

// HasVersions returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// GetDeleteMarkers returns the DeleteMarkers field value
// If the value is explicit nil, the zero value for []DeleteMarkerEntry will be returned
func (o *ListObjectVersionsOutput) GetDeleteMarkers() *[]DeleteMarkerEntry {
	if o == nil {
		return nil
	}

	return o.DeleteMarkers

}

// GetDeleteMarkersOk returns a tuple with the DeleteMarkers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetDeleteMarkersOk() (*[]DeleteMarkerEntry, bool) {
	if o == nil {
		return nil, false
	}

	return o.DeleteMarkers, true
}

// SetDeleteMarkers sets field value
func (o *ListObjectVersionsOutput) SetDeleteMarkers(v []DeleteMarkerEntry) {

	o.DeleteMarkers = &v

}

// HasDeleteMarkers returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasDeleteMarkers() bool {
	if o != nil && o.DeleteMarkers != nil {
		return true
	}

	return false
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *ListObjectVersionsOutput) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetPrefix returns the Prefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetPrefix() *string {
	if o == nil {
		return nil
	}

	return o.Prefix

}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Prefix, true
}

// SetPrefix sets field value
func (o *ListObjectVersionsOutput) SetPrefix(v string) {

	o.Prefix = &v

}

// HasPrefix returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// GetDelimiter returns the Delimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectVersionsOutput) GetDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.Delimiter

}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Delimiter, true
}

// SetDelimiter sets field value
func (o *ListObjectVersionsOutput) SetDelimiter(v string) {

	o.Delimiter = &v

}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// GetMaxKeys returns the MaxKeys field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ListObjectVersionsOutput) GetMaxKeys() *int32 {
	if o == nil {
		return nil
	}

	return o.MaxKeys

}

// GetMaxKeysOk returns a tuple with the MaxKeys field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetMaxKeysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.MaxKeys, true
}

// SetMaxKeys sets field value
func (o *ListObjectVersionsOutput) SetMaxKeys(v int32) {

	o.MaxKeys = &v

}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasMaxKeys() bool {
	if o != nil && o.MaxKeys != nil {
		return true
	}

	return false
}

// GetCommonPrefixes returns the CommonPrefixes field value
// If the value is explicit nil, the zero value for []CommonPrefix will be returned
func (o *ListObjectVersionsOutput) GetCommonPrefixes() *[]CommonPrefix {
	if o == nil {
		return nil
	}

	return o.CommonPrefixes

}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetCommonPrefixesOk() (*[]CommonPrefix, bool) {
	if o == nil {
		return nil, false
	}

	return o.CommonPrefixes, true
}

// SetCommonPrefixes sets field value
func (o *ListObjectVersionsOutput) SetCommonPrefixes(v []CommonPrefix) {

	o.CommonPrefixes = &v

}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasCommonPrefixes() bool {
	if o != nil && o.CommonPrefixes != nil {
		return true
	}

	return false
}

// GetEncodingType returns the EncodingType field value
// If the value is explicit nil, the zero value for EncodingType will be returned
func (o *ListObjectVersionsOutput) GetEncodingType() *EncodingType {
	if o == nil {
		return nil
	}

	return o.EncodingType

}

// GetEncodingTypeOk returns a tuple with the EncodingType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectVersionsOutput) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil {
		return nil, false
	}

	return o.EncodingType, true
}

// SetEncodingType sets field value
func (o *ListObjectVersionsOutput) SetEncodingType(v EncodingType) {

	o.EncodingType = &v

}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListObjectVersionsOutput) HasEncodingType() bool {
	if o != nil && o.EncodingType != nil {
		return true
	}

	return false
}

func (o ListObjectVersionsOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsTruncated != nil {
		toSerialize["IsTruncated"] = o.IsTruncated
	}

	if o.KeyMarker != nil {
		toSerialize["KeyMarker"] = o.KeyMarker
	}

	if o.VersionIdMarker != nil {
		toSerialize["VersionIdMarker"] = o.VersionIdMarker
	}

	if o.NextKeyMarker != nil {
		toSerialize["NextKeyMarker"] = o.NextKeyMarker
	}

	if o.NextVersionIdMarker != nil {
		toSerialize["NextVersionIdMarker"] = o.NextVersionIdMarker
	}

	if o.Versions != nil {
		toSerialize["Versions"] = o.Versions
	}

	if o.DeleteMarkers != nil {
		toSerialize["DeleteMarkers"] = o.DeleteMarkers
	}

	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}

	if o.Prefix != nil {
		toSerialize["Prefix"] = o.Prefix
	}

	if o.Delimiter != nil {
		toSerialize["Delimiter"] = o.Delimiter
	}

	if o.MaxKeys != nil {
		toSerialize["MaxKeys"] = o.MaxKeys
	}

	if o.CommonPrefixes != nil {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}

	if o.EncodingType != nil {
		toSerialize["EncodingType"] = o.EncodingType
	}

	return json.Marshal(toSerialize)
}

type NullableListObjectVersionsOutput struct {
	value *ListObjectVersionsOutput
	isSet bool
}

func (v NullableListObjectVersionsOutput) Get() *ListObjectVersionsOutput {
	return v.value
}

func (v *NullableListObjectVersionsOutput) Set(val *ListObjectVersionsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableListObjectVersionsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableListObjectVersionsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObjectVersionsOutput(val *ListObjectVersionsOutput) *NullableListObjectVersionsOutput {
	return &NullableListObjectVersionsOutput{value: val, isSet: true}
}

func (v NullableListObjectVersionsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObjectVersionsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
