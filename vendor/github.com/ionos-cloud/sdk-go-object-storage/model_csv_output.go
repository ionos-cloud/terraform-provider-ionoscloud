/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// CSVOutput Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
type CSVOutput struct {
	XMLName xml.Name `xml:"CSVOutput"`
	// <p>Indicates whether to use quotation marks around output fields. </p> <ul> <li> <p> `ALWAYS`: Always use quotation marks for output fields.</p> </li> <li> <p> `ASNEEDED`: Use quotation marks for output fields when needed.</p> </li> </ul>
	QuoteFields *string `json:"QuoteFields,omitempty" xml:"QuoteFields"`
	// The single character used for escaping the quote character inside an already escaped value.
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty" xml:"QuoteEscapeCharacter"`
	// A single character used to separate individual records in the output. Instead of the default value, you can specify an arbitrary delimiter.
	RecordDelimiter *string `json:"RecordDelimiter,omitempty" xml:"RecordDelimiter"`
	// The value used to separate individual fields in a record. You can specify an arbitrary delimiter.
	FieldDelimiter *interface{} `json:"FieldDelimiter,omitempty" xml:"FieldDelimiter"`
	// A single character used for escaping when the field delimiter is part of the value. For example, if the value is `a, b`, IONOS Object Storage wraps this field value in quotation marks, as follows: `\" a , b \"`.
	QuoteCharacter *string `json:"QuoteCharacter,omitempty" xml:"QuoteCharacter"`
}

// NewCSVOutput instantiates a new CSVOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVOutput() *CSVOutput {
	this := CSVOutput{}

	return &this
}

// NewCSVOutputWithDefaults instantiates a new CSVOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVOutputWithDefaults() *CSVOutput {
	this := CSVOutput{}
	return &this
}

// GetQuoteFields returns the QuoteFields field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVOutput) GetQuoteFields() *string {
	if o == nil {
		return nil
	}

	return o.QuoteFields

}

// GetQuoteFieldsOk returns a tuple with the QuoteFields field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetQuoteFieldsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.QuoteFields, true
}

// SetQuoteFields sets field value
func (o *CSVOutput) SetQuoteFields(v string) {

	o.QuoteFields = &v

}

// HasQuoteFields returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteFields() bool {
	if o != nil && o.QuoteFields != nil {
		return true
	}

	return false
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVOutput) GetQuoteEscapeCharacter() *string {
	if o == nil {
		return nil
	}

	return o.QuoteEscapeCharacter

}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.QuoteEscapeCharacter, true
}

// SetQuoteEscapeCharacter sets field value
func (o *CSVOutput) SetQuoteEscapeCharacter(v string) {

	o.QuoteEscapeCharacter = &v

}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteEscapeCharacter() bool {
	if o != nil && o.QuoteEscapeCharacter != nil {
		return true
	}

	return false
}

// GetRecordDelimiter returns the RecordDelimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVOutput) GetRecordDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.RecordDelimiter

}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.RecordDelimiter, true
}

// SetRecordDelimiter sets field value
func (o *CSVOutput) SetRecordDelimiter(v string) {

	o.RecordDelimiter = &v

}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasRecordDelimiter() bool {
	if o != nil && o.RecordDelimiter != nil {
		return true
	}

	return false
}

// GetFieldDelimiter returns the FieldDelimiter field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CSVOutput) GetFieldDelimiter() *interface{} {
	if o == nil {
		return nil
	}

	return o.FieldDelimiter

}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetFieldDelimiterOk() (*interface{}, bool) {
	if o == nil {
		return nil, false
	}

	return o.FieldDelimiter, true
}

// SetFieldDelimiter sets field value
func (o *CSVOutput) SetFieldDelimiter(v interface{}) {

	o.FieldDelimiter = &v

}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *CSVOutput) HasFieldDelimiter() bool {
	if o != nil && o.FieldDelimiter != nil {
		return true
	}

	return false
}

// GetQuoteCharacter returns the QuoteCharacter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVOutput) GetQuoteCharacter() *string {
	if o == nil {
		return nil
	}

	return o.QuoteCharacter

}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVOutput) GetQuoteCharacterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.QuoteCharacter, true
}

// SetQuoteCharacter sets field value
func (o *CSVOutput) SetQuoteCharacter(v string) {

	o.QuoteCharacter = &v

}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *CSVOutput) HasQuoteCharacter() bool {
	if o != nil && o.QuoteCharacter != nil {
		return true
	}

	return false
}

func (o CSVOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QuoteFields != nil {
		toSerialize["QuoteFields"] = o.QuoteFields
	}

	if o.QuoteEscapeCharacter != nil {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}

	if o.RecordDelimiter != nil {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}

	toSerialize["FieldDelimiter"] = o.FieldDelimiter

	if o.QuoteCharacter != nil {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}

	return json.Marshal(toSerialize)
}

type NullableCSVOutput struct {
	value *CSVOutput
	isSet bool
}

func (v NullableCSVOutput) Get() *CSVOutput {
	return v.value
}

func (v *NullableCSVOutput) Set(val *CSVOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVOutput(val *CSVOutput) *NullableCSVOutput {
	return &NullableCSVOutput{value: val, isSet: true}
}

func (v NullableCSVOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
