/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// Redirect Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
type Redirect struct {
	XMLName xml.Name `xml:"Redirect"`
	// The host name to use in the redirect request.
	HostName *string `json:"HostName,omitempty" xml:"HostName"`
	// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
	HttpRedirectCode *string `json:"HttpRedirectCode,omitempty" xml:"HttpRedirectCode"`
	// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol"`
	// <p>The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix `docs/` (objects in the `docs/` folder) to `documents/`, you can set a condition block with `KeyPrefixEquals` set to `docs/` and in the Redirect set `ReplaceKeyPrefixWith` to `/documents`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyWith` is not provided.</p> <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. </p>
	ReplaceKeyPrefixWith *string `json:"ReplaceKeyPrefixWith,omitempty" xml:"ReplaceKeyPrefixWith"`
	// The specific object key to use in the redirect request. For example, redirect request to `error.html`. Not required if one of the siblings is present. Can be present only if `ReplaceKeyPrefixWith` is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	ReplaceKeyWith *string `json:"ReplaceKeyWith,omitempty" xml:"ReplaceKeyWith"`
}

// NewRedirect instantiates a new Redirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirect() *Redirect {
	this := Redirect{}

	return &this
}

// NewRedirectWithDefaults instantiates a new Redirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectWithDefaults() *Redirect {
	this := Redirect{}
	return &this
}

// GetHostName returns the HostName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Redirect) GetHostName() *string {
	if o == nil {
		return nil
	}

	return o.HostName

}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Redirect) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.HostName, true
}

// SetHostName sets field value
func (o *Redirect) SetHostName(v string) {

	o.HostName = &v

}

// HasHostName returns a boolean if a field has been set.
func (o *Redirect) HasHostName() bool {
	if o != nil && o.HostName != nil {
		return true
	}

	return false
}

// GetHttpRedirectCode returns the HttpRedirectCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Redirect) GetHttpRedirectCode() *string {
	if o == nil {
		return nil
	}

	return o.HttpRedirectCode

}

// GetHttpRedirectCodeOk returns a tuple with the HttpRedirectCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Redirect) GetHttpRedirectCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.HttpRedirectCode, true
}

// SetHttpRedirectCode sets field value
func (o *Redirect) SetHttpRedirectCode(v string) {

	o.HttpRedirectCode = &v

}

// HasHttpRedirectCode returns a boolean if a field has been set.
func (o *Redirect) HasHttpRedirectCode() bool {
	if o != nil && o.HttpRedirectCode != nil {
		return true
	}

	return false
}

// GetProtocol returns the Protocol field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Redirect) GetProtocol() *string {
	if o == nil {
		return nil
	}

	return o.Protocol

}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Redirect) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Protocol, true
}

// SetProtocol sets field value
func (o *Redirect) SetProtocol(v string) {

	o.Protocol = &v

}

// HasProtocol returns a boolean if a field has been set.
func (o *Redirect) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// GetReplaceKeyPrefixWith returns the ReplaceKeyPrefixWith field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Redirect) GetReplaceKeyPrefixWith() *string {
	if o == nil {
		return nil
	}

	return o.ReplaceKeyPrefixWith

}

// GetReplaceKeyPrefixWithOk returns a tuple with the ReplaceKeyPrefixWith field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Redirect) GetReplaceKeyPrefixWithOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.ReplaceKeyPrefixWith, true
}

// SetReplaceKeyPrefixWith sets field value
func (o *Redirect) SetReplaceKeyPrefixWith(v string) {

	o.ReplaceKeyPrefixWith = &v

}

// HasReplaceKeyPrefixWith returns a boolean if a field has been set.
func (o *Redirect) HasReplaceKeyPrefixWith() bool {
	if o != nil && o.ReplaceKeyPrefixWith != nil {
		return true
	}

	return false
}

// GetReplaceKeyWith returns the ReplaceKeyWith field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Redirect) GetReplaceKeyWith() *string {
	if o == nil {
		return nil
	}

	return o.ReplaceKeyWith

}

// GetReplaceKeyWithOk returns a tuple with the ReplaceKeyWith field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Redirect) GetReplaceKeyWithOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.ReplaceKeyWith, true
}

// SetReplaceKeyWith sets field value
func (o *Redirect) SetReplaceKeyWith(v string) {

	o.ReplaceKeyWith = &v

}

// HasReplaceKeyWith returns a boolean if a field has been set.
func (o *Redirect) HasReplaceKeyWith() bool {
	if o != nil && o.ReplaceKeyWith != nil {
		return true
	}

	return false
}

func (o Redirect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostName != nil {
		toSerialize["HostName"] = o.HostName
	}

	if o.HttpRedirectCode != nil {
		toSerialize["HttpRedirectCode"] = o.HttpRedirectCode
	}

	if o.Protocol != nil {
		toSerialize["Protocol"] = o.Protocol
	}

	if o.ReplaceKeyPrefixWith != nil {
		toSerialize["ReplaceKeyPrefixWith"] = o.ReplaceKeyPrefixWith
	}

	if o.ReplaceKeyWith != nil {
		toSerialize["ReplaceKeyWith"] = o.ReplaceKeyWith
	}

	return json.Marshal(toSerialize)
}

type NullableRedirect struct {
	value *Redirect
	isSet bool
}

func (v NullableRedirect) Get() *Redirect {
	return v.value
}

func (v *NullableRedirect) Set(val *Redirect) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirect) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirect(val *Redirect) *NullableRedirect {
	return &NullableRedirect{value: val, isSet: true}
}

func (v NullableRedirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
