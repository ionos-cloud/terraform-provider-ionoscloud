/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// CSVInput Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
type CSVInput struct {
	XMLName xml.Name `xml:"CSVInput"`
	// <p>Describes the first line of input. Valid values are:</p> <ul> <li> <p> `NONE`: First line is not a header.</p> </li> <li> <p> `IGNORE`: First line is a header, but you can't use the header values to indicate the column in an expression. You can use column position (such as _1, _2, â€¦) to indicate the column (`SELECT s._1 FROM OBJECT s`).</p> </li> <li> <p> `Use`: First line is a header, and you can use the header value to identify a column in an expression (`SELECT \"name\" FROM OBJECT`). </p> </li> </ul>
	FileHeaderInfo *string `json:"FileHeaderInfo,omitempty" xml:"FileHeaderInfo"`
	// A single character used to indicate that a row should be ignored when the character is present at the start of that row. You can specify any character to indicate a comment line.
	Comments *string `json:"Comments,omitempty" xml:"Comments"`
	// A single character used for escaping the quotation mark character inside an already escaped value. For example, the value \"\"\" a , b \"\"\" is parsed as \" a , b \".
	QuoteEscapeCharacter *string `json:"QuoteEscapeCharacter,omitempty" xml:"QuoteEscapeCharacter"`
	// A single character used to separate individual records in the input. Instead of the default value, you can specify an arbitrary delimiter.
	RecordDelimiter *string `json:"RecordDelimiter,omitempty" xml:"RecordDelimiter"`
	// A single character used to separate individual fields in a record. You can specify an arbitrary delimiter.
	FieldDelimiter *string `json:"FieldDelimiter,omitempty" xml:"FieldDelimiter"`
	// <p>A single character used for escaping when the field delimiter is part of the value. For example, if the value is `a, b`, IONOS Object Storage wraps this field value in quotation marks, as follows: `\" a , b \"`.</p> <p>Type: String</p> <p>Default: `\"` </p> <p>Ancestors: `CSV` </p>
	QuoteCharacter *string `json:"QuoteCharacter,omitempty" xml:"QuoteCharacter"`
	// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
	AllowQuotedRecordDelimiter *bool `json:"AllowQuotedRecordDelimiter,omitempty" xml:"AllowQuotedRecordDelimiter"`
}

// NewCSVInput instantiates a new CSVInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVInput() *CSVInput {
	this := CSVInput{}

	return &this
}

// NewCSVInputWithDefaults instantiates a new CSVInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVInputWithDefaults() *CSVInput {
	this := CSVInput{}
	return &this
}

// GetFileHeaderInfo returns the FileHeaderInfo field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetFileHeaderInfo() *string {
	if o == nil {
		return nil
	}

	return o.FileHeaderInfo

}

// GetFileHeaderInfoOk returns a tuple with the FileHeaderInfo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetFileHeaderInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.FileHeaderInfo, true
}

// SetFileHeaderInfo sets field value
func (o *CSVInput) SetFileHeaderInfo(v string) {

	o.FileHeaderInfo = &v

}

// HasFileHeaderInfo returns a boolean if a field has been set.
func (o *CSVInput) HasFileHeaderInfo() bool {
	if o != nil && o.FileHeaderInfo != nil {
		return true
	}

	return false
}

// GetComments returns the Comments field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetComments() *string {
	if o == nil {
		return nil
	}

	return o.Comments

}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetCommentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Comments, true
}

// SetComments sets field value
func (o *CSVInput) SetComments(v string) {

	o.Comments = &v

}

// HasComments returns a boolean if a field has been set.
func (o *CSVInput) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// GetQuoteEscapeCharacter returns the QuoteEscapeCharacter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetQuoteEscapeCharacter() *string {
	if o == nil {
		return nil
	}

	return o.QuoteEscapeCharacter

}

// GetQuoteEscapeCharacterOk returns a tuple with the QuoteEscapeCharacter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetQuoteEscapeCharacterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.QuoteEscapeCharacter, true
}

// SetQuoteEscapeCharacter sets field value
func (o *CSVInput) SetQuoteEscapeCharacter(v string) {

	o.QuoteEscapeCharacter = &v

}

// HasQuoteEscapeCharacter returns a boolean if a field has been set.
func (o *CSVInput) HasQuoteEscapeCharacter() bool {
	if o != nil && o.QuoteEscapeCharacter != nil {
		return true
	}

	return false
}

// GetRecordDelimiter returns the RecordDelimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetRecordDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.RecordDelimiter

}

// GetRecordDelimiterOk returns a tuple with the RecordDelimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetRecordDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.RecordDelimiter, true
}

// SetRecordDelimiter sets field value
func (o *CSVInput) SetRecordDelimiter(v string) {

	o.RecordDelimiter = &v

}

// HasRecordDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasRecordDelimiter() bool {
	if o != nil && o.RecordDelimiter != nil {
		return true
	}

	return false
}

// GetFieldDelimiter returns the FieldDelimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetFieldDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.FieldDelimiter

}

// GetFieldDelimiterOk returns a tuple with the FieldDelimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetFieldDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.FieldDelimiter, true
}

// SetFieldDelimiter sets field value
func (o *CSVInput) SetFieldDelimiter(v string) {

	o.FieldDelimiter = &v

}

// HasFieldDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasFieldDelimiter() bool {
	if o != nil && o.FieldDelimiter != nil {
		return true
	}

	return false
}

// GetQuoteCharacter returns the QuoteCharacter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CSVInput) GetQuoteCharacter() *string {
	if o == nil {
		return nil
	}

	return o.QuoteCharacter

}

// GetQuoteCharacterOk returns a tuple with the QuoteCharacter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetQuoteCharacterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.QuoteCharacter, true
}

// SetQuoteCharacter sets field value
func (o *CSVInput) SetQuoteCharacter(v string) {

	o.QuoteCharacter = &v

}

// HasQuoteCharacter returns a boolean if a field has been set.
func (o *CSVInput) HasQuoteCharacter() bool {
	if o != nil && o.QuoteCharacter != nil {
		return true
	}

	return false
}

// GetAllowQuotedRecordDelimiter returns the AllowQuotedRecordDelimiter field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *CSVInput) GetAllowQuotedRecordDelimiter() *bool {
	if o == nil {
		return nil
	}

	return o.AllowQuotedRecordDelimiter

}

// GetAllowQuotedRecordDelimiterOk returns a tuple with the AllowQuotedRecordDelimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVInput) GetAllowQuotedRecordDelimiterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.AllowQuotedRecordDelimiter, true
}

// SetAllowQuotedRecordDelimiter sets field value
func (o *CSVInput) SetAllowQuotedRecordDelimiter(v bool) {

	o.AllowQuotedRecordDelimiter = &v

}

// HasAllowQuotedRecordDelimiter returns a boolean if a field has been set.
func (o *CSVInput) HasAllowQuotedRecordDelimiter() bool {
	if o != nil && o.AllowQuotedRecordDelimiter != nil {
		return true
	}

	return false
}

func (o CSVInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileHeaderInfo != nil {
		toSerialize["FileHeaderInfo"] = o.FileHeaderInfo
	}

	if o.Comments != nil {
		toSerialize["Comments"] = o.Comments
	}

	if o.QuoteEscapeCharacter != nil {
		toSerialize["QuoteEscapeCharacter"] = o.QuoteEscapeCharacter
	}

	if o.RecordDelimiter != nil {
		toSerialize["RecordDelimiter"] = o.RecordDelimiter
	}

	if o.FieldDelimiter != nil {
		toSerialize["FieldDelimiter"] = o.FieldDelimiter
	}

	if o.QuoteCharacter != nil {
		toSerialize["QuoteCharacter"] = o.QuoteCharacter
	}

	if o.AllowQuotedRecordDelimiter != nil {
		toSerialize["AllowQuotedRecordDelimiter"] = o.AllowQuotedRecordDelimiter
	}

	return json.Marshal(toSerialize)
}

type NullableCSVInput struct {
	value *CSVInput
	isSet bool
}

func (v NullableCSVInput) Get() *CSVInput {
	return v.value
}

func (v *NullableCSVInput) Set(val *CSVInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVInput(val *CSVInput) *NullableCSVInput {
	return &NullableCSVInput{value: val, isSet: true}
}

func (v NullableCSVInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
