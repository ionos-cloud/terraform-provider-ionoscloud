/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// ListObjectsOutput struct for ListObjectsOutput
type ListObjectsOutput struct {
	XMLName xml.Name `xml:"ListBucketResult"`
	// A flag that indicates whether IONOS Object Storage returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
	IsTruncated *bool `json:"IsTruncated,omitempty" xml:"IsTruncated"`
	// Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.
	Marker *string `json:"Marker,omitempty" xml:"Marker"`
	// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. IONOS Object Storage lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMarker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
	NextMarker *string `json:"NextMarker,omitempty" xml:"NextMarker"`
	// Metadata about each object returned.
	Contents *[]Object `json:"Contents,omitempty" xml:"Contents"`
	// The bucket name.
	Name *string `json:"Name,omitempty" xml:"Name"`
	// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Prefix    *string `json:"Prefix,omitempty" xml:"Prefix"`
	Delimiter *string `json:"Delimiter,omitempty" xml:"Delimiter"`
	// The maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more.
	MaxKeys *int32 `json:"MaxKeys,omitempty" xml:"MaxKeys"`
	// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
	CommonPrefixes *[]CommonPrefix `json:"CommonPrefixes,omitempty" xml:"CommonPrefixes"`
	EncodingType   *EncodingType   `json:"EncodingType,omitempty" xml:"EncodingType"`
}

// NewListObjectsOutput instantiates a new ListObjectsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObjectsOutput() *ListObjectsOutput {
	this := ListObjectsOutput{}

	return &this
}

// NewListObjectsOutputWithDefaults instantiates a new ListObjectsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectsOutputWithDefaults() *ListObjectsOutput {
	this := ListObjectsOutput{}
	return &this
}

// GetIsTruncated returns the IsTruncated field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ListObjectsOutput) GetIsTruncated() *bool {
	if o == nil {
		return nil
	}

	return o.IsTruncated

}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetIsTruncatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.IsTruncated, true
}

// SetIsTruncated sets field value
func (o *ListObjectsOutput) SetIsTruncated(v bool) {

	o.IsTruncated = &v

}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasIsTruncated() bool {
	if o != nil && o.IsTruncated != nil {
		return true
	}

	return false
}

// GetMarker returns the Marker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectsOutput) GetMarker() *string {
	if o == nil {
		return nil
	}

	return o.Marker

}

// GetMarkerOk returns a tuple with the Marker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Marker, true
}

// SetMarker sets field value
func (o *ListObjectsOutput) SetMarker(v string) {

	o.Marker = &v

}

// HasMarker returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasMarker() bool {
	if o != nil && o.Marker != nil {
		return true
	}

	return false
}

// GetNextMarker returns the NextMarker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectsOutput) GetNextMarker() *string {
	if o == nil {
		return nil
	}

	return o.NextMarker

}

// GetNextMarkerOk returns a tuple with the NextMarker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetNextMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.NextMarker, true
}

// SetNextMarker sets field value
func (o *ListObjectsOutput) SetNextMarker(v string) {

	o.NextMarker = &v

}

// HasNextMarker returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasNextMarker() bool {
	if o != nil && o.NextMarker != nil {
		return true
	}

	return false
}

// GetContents returns the Contents field value
// If the value is explicit nil, the zero value for []Object will be returned
func (o *ListObjectsOutput) GetContents() *[]Object {
	if o == nil {
		return nil
	}

	return o.Contents

}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetContentsOk() (*[]Object, bool) {
	if o == nil {
		return nil, false
	}

	return o.Contents, true
}

// SetContents sets field value
func (o *ListObjectsOutput) SetContents(v []Object) {

	o.Contents = &v

}

// HasContents returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectsOutput) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *ListObjectsOutput) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetPrefix returns the Prefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectsOutput) GetPrefix() *string {
	if o == nil {
		return nil
	}

	return o.Prefix

}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Prefix, true
}

// SetPrefix sets field value
func (o *ListObjectsOutput) SetPrefix(v string) {

	o.Prefix = &v

}

// HasPrefix returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// GetDelimiter returns the Delimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListObjectsOutput) GetDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.Delimiter

}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Delimiter, true
}

// SetDelimiter sets field value
func (o *ListObjectsOutput) SetDelimiter(v string) {

	o.Delimiter = &v

}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// GetMaxKeys returns the MaxKeys field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ListObjectsOutput) GetMaxKeys() *int32 {
	if o == nil {
		return nil
	}

	return o.MaxKeys

}

// GetMaxKeysOk returns a tuple with the MaxKeys field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetMaxKeysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.MaxKeys, true
}

// SetMaxKeys sets field value
func (o *ListObjectsOutput) SetMaxKeys(v int32) {

	o.MaxKeys = &v

}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasMaxKeys() bool {
	if o != nil && o.MaxKeys != nil {
		return true
	}

	return false
}

// GetCommonPrefixes returns the CommonPrefixes field value
// If the value is explicit nil, the zero value for []CommonPrefix will be returned
func (o *ListObjectsOutput) GetCommonPrefixes() *[]CommonPrefix {
	if o == nil {
		return nil
	}

	return o.CommonPrefixes

}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetCommonPrefixesOk() (*[]CommonPrefix, bool) {
	if o == nil {
		return nil, false
	}

	return o.CommonPrefixes, true
}

// SetCommonPrefixes sets field value
func (o *ListObjectsOutput) SetCommonPrefixes(v []CommonPrefix) {

	o.CommonPrefixes = &v

}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasCommonPrefixes() bool {
	if o != nil && o.CommonPrefixes != nil {
		return true
	}

	return false
}

// GetEncodingType returns the EncodingType field value
// If the value is explicit nil, the zero value for EncodingType will be returned
func (o *ListObjectsOutput) GetEncodingType() *EncodingType {
	if o == nil {
		return nil
	}

	return o.EncodingType

}

// GetEncodingTypeOk returns a tuple with the EncodingType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListObjectsOutput) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil {
		return nil, false
	}

	return o.EncodingType, true
}

// SetEncodingType sets field value
func (o *ListObjectsOutput) SetEncodingType(v EncodingType) {

	o.EncodingType = &v

}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListObjectsOutput) HasEncodingType() bool {
	if o != nil && o.EncodingType != nil {
		return true
	}

	return false
}

func (o ListObjectsOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsTruncated != nil {
		toSerialize["IsTruncated"] = o.IsTruncated
	}

	if o.Marker != nil {
		toSerialize["Marker"] = o.Marker
	}

	if o.NextMarker != nil {
		toSerialize["NextMarker"] = o.NextMarker
	}

	if o.Contents != nil {
		toSerialize["Contents"] = o.Contents
	}

	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}

	if o.Prefix != nil {
		toSerialize["Prefix"] = o.Prefix
	}

	if o.Delimiter != nil {
		toSerialize["Delimiter"] = o.Delimiter
	}

	if o.MaxKeys != nil {
		toSerialize["MaxKeys"] = o.MaxKeys
	}

	if o.CommonPrefixes != nil {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}

	if o.EncodingType != nil {
		toSerialize["EncodingType"] = o.EncodingType
	}

	return json.Marshal(toSerialize)
}

type NullableListObjectsOutput struct {
	value *ListObjectsOutput
	isSet bool
}

func (v NullableListObjectsOutput) Get() *ListObjectsOutput {
	return v.value
}

func (v *NullableListObjectsOutput) Set(val *ListObjectsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableListObjectsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableListObjectsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObjectsOutput(val *ListObjectsOutput) *NullableListObjectsOutput {
	return &NullableListObjectsOutput{value: val, isSet: true}
}

func (v NullableListObjectsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObjectsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
