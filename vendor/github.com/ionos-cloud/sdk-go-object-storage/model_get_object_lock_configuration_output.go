/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// GetObjectLockConfigurationOutput A container for an object lock configuration.
type GetObjectLockConfigurationOutput struct {
	XMLName           xml.Name        `xml:"ObjectLockConfiguration"`
	ObjectLockEnabled *string         `json:"ObjectLockEnabled,omitempty" xml:"ObjectLockEnabled"`
	Rule              *ObjectLockRule `json:"Rule,omitempty" xml:"Rule"`
}

// NewGetObjectLockConfigurationOutput instantiates a new GetObjectLockConfigurationOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetObjectLockConfigurationOutput() *GetObjectLockConfigurationOutput {
	this := GetObjectLockConfigurationOutput{}

	return &this
}

// NewGetObjectLockConfigurationOutputWithDefaults instantiates a new GetObjectLockConfigurationOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetObjectLockConfigurationOutputWithDefaults() *GetObjectLockConfigurationOutput {
	this := GetObjectLockConfigurationOutput{}
	return &this
}

// GetObjectLockEnabled returns the ObjectLockEnabled field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GetObjectLockConfigurationOutput) GetObjectLockEnabled() *string {
	if o == nil {
		return nil
	}

	return o.ObjectLockEnabled

}

// GetObjectLockEnabledOk returns a tuple with the ObjectLockEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetObjectLockConfigurationOutput) GetObjectLockEnabledOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.ObjectLockEnabled, true
}

// SetObjectLockEnabled sets field value
func (o *GetObjectLockConfigurationOutput) SetObjectLockEnabled(v string) {

	o.ObjectLockEnabled = &v

}

// HasObjectLockEnabled returns a boolean if a field has been set.
func (o *GetObjectLockConfigurationOutput) HasObjectLockEnabled() bool {
	if o != nil && o.ObjectLockEnabled != nil {
		return true
	}

	return false
}

// GetRule returns the Rule field value
// If the value is explicit nil, the zero value for ObjectLockRule will be returned
func (o *GetObjectLockConfigurationOutput) GetRule() *ObjectLockRule {
	if o == nil {
		return nil
	}

	return o.Rule

}

// GetRuleOk returns a tuple with the Rule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetObjectLockConfigurationOutput) GetRuleOk() (*ObjectLockRule, bool) {
	if o == nil {
		return nil, false
	}

	return o.Rule, true
}

// SetRule sets field value
func (o *GetObjectLockConfigurationOutput) SetRule(v ObjectLockRule) {

	o.Rule = &v

}

// HasRule returns a boolean if a field has been set.
func (o *GetObjectLockConfigurationOutput) HasRule() bool {
	if o != nil && o.Rule != nil {
		return true
	}

	return false
}

func (o GetObjectLockConfigurationOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectLockEnabled != nil {
		toSerialize["ObjectLockEnabled"] = o.ObjectLockEnabled
	}

	if o.Rule != nil {
		toSerialize["Rule"] = o.Rule
	}

	return json.Marshal(toSerialize)
}

type NullableGetObjectLockConfigurationOutput struct {
	value *GetObjectLockConfigurationOutput
	isSet bool
}

func (v NullableGetObjectLockConfigurationOutput) Get() *GetObjectLockConfigurationOutput {
	return v.value
}

func (v *NullableGetObjectLockConfigurationOutput) Set(val *GetObjectLockConfigurationOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetObjectLockConfigurationOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetObjectLockConfigurationOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetObjectLockConfigurationOutput(val *GetObjectLockConfigurationOutput) *NullableGetObjectLockConfigurationOutput {
	return &NullableGetObjectLockConfigurationOutput{value: val, isSet: true}
}

func (v NullableGetObjectLockConfigurationOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetObjectLockConfigurationOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
