/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// ReplicationRule Specifies which IONOS Object Storage objects to replicate and where to store the replicas.
type ReplicationRule struct {
	XMLName xml.Name `xml:"ReplicationRule"`
	// Container for the Contract Number of the owner.
	ID *int32 `json:"ID,omitempty" xml:"ID"`
	// An object key name prefix that identifies the subset of objects to which the rule applies. Replace the Object keys containing special characters, such as carriage returns, when using XML requests.
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix"`
	// Specifies whether the rule is enabled.
	Status      *string      `json:"Status" xml:"Status"`
	Destination *Destination `json:"Destination" xml:"Destination"`
}

// NewReplicationRule instantiates a new ReplicationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationRule(status string, destination Destination) *ReplicationRule {
	this := ReplicationRule{}

	this.Status = &status
	this.Destination = &destination

	return &this
}

// NewReplicationRuleWithDefaults instantiates a new ReplicationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationRuleWithDefaults() *ReplicationRule {
	this := ReplicationRule{}
	return &this
}

// GetID returns the ID field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ReplicationRule) GetID() *int32 {
	if o == nil {
		return nil
	}

	return o.ID

}

// GetIDOk returns a tuple with the ID field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationRule) GetIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.ID, true
}

// SetID sets field value
func (o *ReplicationRule) SetID(v int32) {

	o.ID = &v

}

// HasID returns a boolean if a field has been set.
func (o *ReplicationRule) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// GetPrefix returns the Prefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReplicationRule) GetPrefix() *string {
	if o == nil {
		return nil
	}

	return o.Prefix

}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationRule) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Prefix, true
}

// SetPrefix sets field value
func (o *ReplicationRule) SetPrefix(v string) {

	o.Prefix = &v

}

// HasPrefix returns a boolean if a field has been set.
func (o *ReplicationRule) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReplicationRule) GetStatus() *string {
	if o == nil {
		return nil
	}

	return o.Status

}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationRule) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Status, true
}

// SetStatus sets field value
func (o *ReplicationRule) SetStatus(v string) {

	o.Status = &v

}

// HasStatus returns a boolean if a field has been set.
func (o *ReplicationRule) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// GetDestination returns the Destination field value
// If the value is explicit nil, the zero value for Destination will be returned
func (o *ReplicationRule) GetDestination() *Destination {
	if o == nil {
		return nil
	}

	return o.Destination

}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationRule) GetDestinationOk() (*Destination, bool) {
	if o == nil {
		return nil, false
	}

	return o.Destination, true
}

// SetDestination sets field value
func (o *ReplicationRule) SetDestination(v Destination) {

	o.Destination = &v

}

// HasDestination returns a boolean if a field has been set.
func (o *ReplicationRule) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

func (o ReplicationRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}

	if o.Prefix != nil {
		toSerialize["Prefix"] = o.Prefix
	}

	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}

	if o.Destination != nil {
		toSerialize["Destination"] = o.Destination
	}

	return json.Marshal(toSerialize)
}

type NullableReplicationRule struct {
	value *ReplicationRule
	isSet bool
}

func (v NullableReplicationRule) Get() *ReplicationRule {
	return v.value
}

func (v *NullableReplicationRule) Set(val *ReplicationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRule(val *ReplicationRule) *NullableReplicationRule {
	return &NullableReplicationRule{value: val, isSet: true}
}

func (v NullableReplicationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
