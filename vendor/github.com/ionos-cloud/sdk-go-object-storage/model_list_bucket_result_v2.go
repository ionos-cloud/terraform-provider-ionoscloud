/*
 * IONOS Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 API Reference for contract-owned buckets](https://api.ionos.com/docs/s3-contract-owned-buckets/v2/) ### User documentation [IONOS Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// ListBucketResultV2 A container for the data.
type ListBucketResultV2 struct {
	XMLName xml.Name `xml:"ListBucketResult"`
	// The bucket name.
	Name *string `json:"Name" xml:"Name"`
	// Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
	Prefix *string `json:"Prefix" xml:"Prefix"`
	// The maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more.
	MaxKeys *int32 `json:"MaxKeys" xml:"MaxKeys"`
	// A flag that indicates whether IONOS Object Storage returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
	IsTruncated *bool  `json:"IsTruncated" xml:"IsTruncated"`
	KeyCount    *int32 `json:"KeyCount" xml:"KeyCount"`
	// Metadata about each object returned.
	Contents  *[]Object `json:"Contents" xml:"Contents"`
	Delimiter *string   `json:"Delimiter,omitempty" xml:"Delimiter"`
	// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
	CommonPrefixes *[]CommonPrefix `json:"CommonPrefixes,omitempty" xml:"CommonPrefixes"`
	EncodingType   *EncodingType   `json:"EncodingType,omitempty" xml:"EncodingType"`
	// If ContinuationToken was sent with the request, it is included in the response.
	ContinuationToken *string `json:"ContinuationToken,omitempty" xml:"ContinuationToken"`
	// `NextContinuationToken` is sent when `isTruncated` is true, which means there are more keys in the bucket that can be listed. The next list requests to IONOS Object Storage can be continued with this `NextContinuationToken`. `NextContinuationToken` is obfuscated and is not a real key.
	NextContinuationToken *string `json:"NextContinuationToken,omitempty" xml:"NextContinuationToken"`
	// If StartAfter was sent with the request, it is included in the response.
	StartAfter *string `json:"StartAfter,omitempty" xml:"StartAfter"`
}

// NewListBucketResultV2 instantiates a new ListBucketResultV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBucketResultV2(name string, prefix string, maxKeys int32, isTruncated bool, keyCount int32, contents []Object) *ListBucketResultV2 {
	this := ListBucketResultV2{}

	this.Name = &name
	this.Prefix = &prefix
	this.MaxKeys = &maxKeys
	this.IsTruncated = &isTruncated
	this.KeyCount = &keyCount
	this.Contents = &contents

	return &this
}

// NewListBucketResultV2WithDefaults instantiates a new ListBucketResultV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBucketResultV2WithDefaults() *ListBucketResultV2 {
	this := ListBucketResultV2{}
	var maxKeys int32 = 1000
	this.MaxKeys = &maxKeys
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *ListBucketResultV2) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetPrefix returns the Prefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetPrefix() *string {
	if o == nil {
		return nil
	}

	return o.Prefix

}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Prefix, true
}

// SetPrefix sets field value
func (o *ListBucketResultV2) SetPrefix(v string) {

	o.Prefix = &v

}

// HasPrefix returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// GetMaxKeys returns the MaxKeys field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ListBucketResultV2) GetMaxKeys() *int32 {
	if o == nil {
		return nil
	}

	return o.MaxKeys

}

// GetMaxKeysOk returns a tuple with the MaxKeys field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetMaxKeysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.MaxKeys, true
}

// SetMaxKeys sets field value
func (o *ListBucketResultV2) SetMaxKeys(v int32) {

	o.MaxKeys = &v

}

// HasMaxKeys returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasMaxKeys() bool {
	if o != nil && o.MaxKeys != nil {
		return true
	}

	return false
}

// GetIsTruncated returns the IsTruncated field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ListBucketResultV2) GetIsTruncated() *bool {
	if o == nil {
		return nil
	}

	return o.IsTruncated

}

// GetIsTruncatedOk returns a tuple with the IsTruncated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetIsTruncatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.IsTruncated, true
}

// SetIsTruncated sets field value
func (o *ListBucketResultV2) SetIsTruncated(v bool) {

	o.IsTruncated = &v

}

// HasIsTruncated returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasIsTruncated() bool {
	if o != nil && o.IsTruncated != nil {
		return true
	}

	return false
}

// GetKeyCount returns the KeyCount field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ListBucketResultV2) GetKeyCount() *int32 {
	if o == nil {
		return nil
	}

	return o.KeyCount

}

// GetKeyCountOk returns a tuple with the KeyCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetKeyCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.KeyCount, true
}

// SetKeyCount sets field value
func (o *ListBucketResultV2) SetKeyCount(v int32) {

	o.KeyCount = &v

}

// HasKeyCount returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasKeyCount() bool {
	if o != nil && o.KeyCount != nil {
		return true
	}

	return false
}

// GetContents returns the Contents field value
// If the value is explicit nil, the zero value for []Object will be returned
func (o *ListBucketResultV2) GetContents() *[]Object {
	if o == nil {
		return nil
	}

	return o.Contents

}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetContentsOk() (*[]Object, bool) {
	if o == nil {
		return nil, false
	}

	return o.Contents, true
}

// SetContents sets field value
func (o *ListBucketResultV2) SetContents(v []Object) {

	o.Contents = &v

}

// HasContents returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// GetDelimiter returns the Delimiter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetDelimiter() *string {
	if o == nil {
		return nil
	}

	return o.Delimiter

}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Delimiter, true
}

// SetDelimiter sets field value
func (o *ListBucketResultV2) SetDelimiter(v string) {

	o.Delimiter = &v

}

// HasDelimiter returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// GetCommonPrefixes returns the CommonPrefixes field value
// If the value is explicit nil, the zero value for []CommonPrefix will be returned
func (o *ListBucketResultV2) GetCommonPrefixes() *[]CommonPrefix {
	if o == nil {
		return nil
	}

	return o.CommonPrefixes

}

// GetCommonPrefixesOk returns a tuple with the CommonPrefixes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetCommonPrefixesOk() (*[]CommonPrefix, bool) {
	if o == nil {
		return nil, false
	}

	return o.CommonPrefixes, true
}

// SetCommonPrefixes sets field value
func (o *ListBucketResultV2) SetCommonPrefixes(v []CommonPrefix) {

	o.CommonPrefixes = &v

}

// HasCommonPrefixes returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasCommonPrefixes() bool {
	if o != nil && o.CommonPrefixes != nil {
		return true
	}

	return false
}

// GetEncodingType returns the EncodingType field value
// If the value is explicit nil, the zero value for EncodingType will be returned
func (o *ListBucketResultV2) GetEncodingType() *EncodingType {
	if o == nil {
		return nil
	}

	return o.EncodingType

}

// GetEncodingTypeOk returns a tuple with the EncodingType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetEncodingTypeOk() (*EncodingType, bool) {
	if o == nil {
		return nil, false
	}

	return o.EncodingType, true
}

// SetEncodingType sets field value
func (o *ListBucketResultV2) SetEncodingType(v EncodingType) {

	o.EncodingType = &v

}

// HasEncodingType returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasEncodingType() bool {
	if o != nil && o.EncodingType != nil {
		return true
	}

	return false
}

// GetContinuationToken returns the ContinuationToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetContinuationToken() *string {
	if o == nil {
		return nil
	}

	return o.ContinuationToken

}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetContinuationTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.ContinuationToken, true
}

// SetContinuationToken sets field value
func (o *ListBucketResultV2) SetContinuationToken(v string) {

	o.ContinuationToken = &v

}

// HasContinuationToken returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasContinuationToken() bool {
	if o != nil && o.ContinuationToken != nil {
		return true
	}

	return false
}

// GetNextContinuationToken returns the NextContinuationToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetNextContinuationToken() *string {
	if o == nil {
		return nil
	}

	return o.NextContinuationToken

}

// GetNextContinuationTokenOk returns a tuple with the NextContinuationToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetNextContinuationTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.NextContinuationToken, true
}

// SetNextContinuationToken sets field value
func (o *ListBucketResultV2) SetNextContinuationToken(v string) {

	o.NextContinuationToken = &v

}

// HasNextContinuationToken returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasNextContinuationToken() bool {
	if o != nil && o.NextContinuationToken != nil {
		return true
	}

	return false
}

// GetStartAfter returns the StartAfter field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListBucketResultV2) GetStartAfter() *string {
	if o == nil {
		return nil
	}

	return o.StartAfter

}

// GetStartAfterOk returns a tuple with the StartAfter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListBucketResultV2) GetStartAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.StartAfter, true
}

// SetStartAfter sets field value
func (o *ListBucketResultV2) SetStartAfter(v string) {

	o.StartAfter = &v

}

// HasStartAfter returns a boolean if a field has been set.
func (o *ListBucketResultV2) HasStartAfter() bool {
	if o != nil && o.StartAfter != nil {
		return true
	}

	return false
}

func (o ListBucketResultV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}

	if o.Prefix != nil {
		toSerialize["Prefix"] = o.Prefix
	}

	if o.MaxKeys != nil {
		toSerialize["MaxKeys"] = o.MaxKeys
	}

	if o.IsTruncated != nil {
		toSerialize["IsTruncated"] = o.IsTruncated
	}

	if o.KeyCount != nil {
		toSerialize["KeyCount"] = o.KeyCount
	}

	if o.Contents != nil {
		toSerialize["Contents"] = o.Contents
	}

	if o.Delimiter != nil {
		toSerialize["Delimiter"] = o.Delimiter
	}

	if o.CommonPrefixes != nil {
		toSerialize["CommonPrefixes"] = o.CommonPrefixes
	}

	if o.EncodingType != nil {
		toSerialize["EncodingType"] = o.EncodingType
	}

	if o.ContinuationToken != nil {
		toSerialize["ContinuationToken"] = o.ContinuationToken
	}

	if o.NextContinuationToken != nil {
		toSerialize["NextContinuationToken"] = o.NextContinuationToken
	}

	if o.StartAfter != nil {
		toSerialize["StartAfter"] = o.StartAfter
	}

	return json.Marshal(toSerialize)
}

type NullableListBucketResultV2 struct {
	value *ListBucketResultV2
	isSet bool
}

func (v NullableListBucketResultV2) Get() *ListBucketResultV2 {
	return v.value
}

func (v *NullableListBucketResultV2) Set(val *ListBucketResultV2) {
	v.value = val
	v.isSet = true
}

func (v NullableListBucketResultV2) IsSet() bool {
	return v.isSet
}

func (v *NullableListBucketResultV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBucketResultV2(val *ListBucketResultV2) *NullableListBucketResultV2 {
	return &NullableListBucketResultV2{value: val, isSet: true}
}

func (v NullableListBucketResultV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBucketResultV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
