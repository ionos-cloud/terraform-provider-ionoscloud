/*
 * IONOS Cloud - Object Storage Management API
 *
 * Object Storage Management API is a RESTful API that manages the object storage service configuration for IONOS Cloud.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// Bucket Buckets visible to the user.
type Bucket struct {
	// The region where the bucket is located
	Region *string `json:"region"`
	// The website URL for the bucket
	Website *string `json:"website"`
}

// NewBucket instantiates a new Bucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucket(region string, website string) *Bucket {
	this := Bucket{}

	this.Region = &region
	this.Website = &website

	return &this
}

// NewBucketWithDefaults instantiates a new Bucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketWithDefaults() *Bucket {
	this := Bucket{}
	return &this
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Bucket) GetRegion() *string {
	if o == nil {
		return nil
	}

	return o.Region

}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bucket) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Region, true
}

// SetRegion sets field value
func (o *Bucket) SetRegion(v string) {

	o.Region = &v

}

// HasRegion returns a boolean if a field has been set.
func (o *Bucket) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// GetWebsite returns the Website field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Bucket) GetWebsite() *string {
	if o == nil {
		return nil
	}

	return o.Website

}

// GetWebsiteOk returns a tuple with the Website field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bucket) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Website, true
}

// SetWebsite sets field value
func (o *Bucket) SetWebsite(v string) {

	o.Website = &v

}

// HasWebsite returns a boolean if a field has been set.
func (o *Bucket) HasWebsite() bool {
	if o != nil && o.Website != nil {
		return true
	}

	return false
}

func (o Bucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}

	if o.Website != nil {
		toSerialize["website"] = o.Website
	}

	return json.Marshal(toSerialize)
}

type NullableBucket struct {
	value *Bucket
	isSet bool
}

func (v NullableBucket) Get() *Bucket {
	return v.value
}

func (v *NullableBucket) Set(val *Bucket) {
	v.value = val
	v.isSet = true
}

func (v NullableBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucket(val *Bucket) *NullableBucket {
	return &NullableBucket{value: val, isSet: true}
}

func (v NullableBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
