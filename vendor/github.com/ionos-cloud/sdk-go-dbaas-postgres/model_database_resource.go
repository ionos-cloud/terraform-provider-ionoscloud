/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// DatabaseResource struct for DatabaseResource
type DatabaseResource struct {
	Type *ResourceType `json:"type"`
	// The unique ID of the resource.
	Id *string `json:"id"`
	// Absolute URL of the resource.
	Href       *string             `json:"href"`
	Metadata   *Metadata           `json:"metadata,omitempty"`
	Properties *DatabaseProperties `json:"properties"`
}

// NewDatabaseResource instantiates a new DatabaseResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseResource(type_ ResourceType, id string, href string, properties DatabaseProperties) *DatabaseResource {
	this := DatabaseResource{}

	this.Type = &type_
	this.Id = &id
	this.Href = &href
	this.Properties = &properties

	return &this
}

// NewDatabaseResourceWithDefaults instantiates a new DatabaseResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseResourceWithDefaults() *DatabaseResource {
	this := DatabaseResource{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for ResourceType will be returned
func (o *DatabaseResource) GetType() *ResourceType {
	if o == nil {
		return nil
	}

	return o.Type

}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseResource) GetTypeOk() (*ResourceType, bool) {
	if o == nil {
		return nil, false
	}

	return o.Type, true
}

// SetType sets field value
func (o *DatabaseResource) SetType(v ResourceType) {

	o.Type = &v

}

// HasType returns a boolean if a field has been set.
func (o *DatabaseResource) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DatabaseResource) GetId() *string {
	if o == nil {
		return nil
	}

	return o.Id

}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseResource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Id, true
}

// SetId sets field value
func (o *DatabaseResource) SetId(v string) {

	o.Id = &v

}

// HasId returns a boolean if a field has been set.
func (o *DatabaseResource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// GetHref returns the Href field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DatabaseResource) GetHref() *string {
	if o == nil {
		return nil
	}

	return o.Href

}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseResource) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Href, true
}

// SetHref sets field value
func (o *DatabaseResource) SetHref(v string) {

	o.Href = &v

}

// HasHref returns a boolean if a field has been set.
func (o *DatabaseResource) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for Metadata will be returned
func (o *DatabaseResource) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}

	return o.Metadata

}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseResource) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}

	return o.Metadata, true
}

// SetMetadata sets field value
func (o *DatabaseResource) SetMetadata(v Metadata) {

	o.Metadata = &v

}

// HasMetadata returns a boolean if a field has been set.
func (o *DatabaseResource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for DatabaseProperties will be returned
func (o *DatabaseResource) GetProperties() *DatabaseProperties {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseResource) GetPropertiesOk() (*DatabaseProperties, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *DatabaseResource) SetProperties(v DatabaseProperties) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *DatabaseResource) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o DatabaseResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	if o.Id != nil {
		toSerialize["id"] = o.Id
	}

	if o.Href != nil {
		toSerialize["href"] = o.Href
	}

	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableDatabaseResource struct {
	value *DatabaseResource
	isSet bool
}

func (v NullableDatabaseResource) Get() *DatabaseResource {
	return v.value
}

func (v *NullableDatabaseResource) Set(val *DatabaseResource) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseResource) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseResource(val *DatabaseResource) *NullableDatabaseResource {
	return &NullableDatabaseResource{value: val, isSet: true}
}

func (v NullableDatabaseResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
