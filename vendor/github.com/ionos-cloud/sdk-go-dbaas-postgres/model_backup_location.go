/*
 * IONOS DBaaS REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
	"fmt"
)

// BackupLocation The S3 location where the backups will be stored.
type BackupLocation string

// List of BackupLocation
const (
	DE BackupLocation = "de"
)

func (v *BackupLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupLocation(value)
	for _, existing := range []BackupLocation{"de"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupLocation", value)
}

// Ptr returns reference to BackupLocation value
func (v BackupLocation) Ptr() *BackupLocation {
	return &v
}

type NullableBackupLocation struct {
	value *BackupLocation
	isSet bool
}

func (v NullableBackupLocation) Get() *BackupLocation {
	return v.value
}

func (v *NullableBackupLocation) Set(val *BackupLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupLocation(val *BackupLocation) *NullableBackupLocation {
	return &NullableBackupLocation{value: val, isSet: true}
}

func (v NullableBackupLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
