/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// UsersPatchRequest struct for UsersPatchRequest
type UsersPatchRequest struct {
	Properties *PatchUserProperties `json:"properties"`
}

// NewUsersPatchRequest instantiates a new UsersPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersPatchRequest(properties PatchUserProperties) *UsersPatchRequest {
	this := UsersPatchRequest{}

	this.Properties = &properties

	return &this
}

// NewUsersPatchRequestWithDefaults instantiates a new UsersPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersPatchRequestWithDefaults() *UsersPatchRequest {
	this := UsersPatchRequest{}
	return &this
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for PatchUserProperties will be returned
func (o *UsersPatchRequest) GetProperties() *PatchUserProperties {
	if o == nil {
		return nil
	}

	return o.Properties

}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersPatchRequest) GetPropertiesOk() (*PatchUserProperties, bool) {
	if o == nil {
		return nil, false
	}

	return o.Properties, true
}

// SetProperties sets field value
func (o *UsersPatchRequest) SetProperties(v PatchUserProperties) {

	o.Properties = &v

}

// HasProperties returns a boolean if a field has been set.
func (o *UsersPatchRequest) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

func (o UsersPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	return json.Marshal(toSerialize)
}

type NullableUsersPatchRequest struct {
	value *UsersPatchRequest
	isSet bool
}

func (v NullableUsersPatchRequest) Get() *UsersPatchRequest {
	return v.value
}

func (v *NullableUsersPatchRequest) Set(val *UsersPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersPatchRequest(val *UsersPatchRequest) *NullableUsersPatchRequest {
	return &NullableUsersPatchRequest{value: val, isSet: true}
}

func (v NullableUsersPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
