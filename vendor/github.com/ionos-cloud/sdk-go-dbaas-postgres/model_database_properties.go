/*
 * IONOS DBaaS PostgreSQL REST API
 *
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// DatabaseProperties struct for DatabaseProperties
type DatabaseProperties struct {
	// The databasename of a given database.
	Name *string `json:"name"`
	// The name of the role owning a given database.
	Owner *string `json:"owner"`
}

// NewDatabaseProperties instantiates a new DatabaseProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseProperties(name string, owner string) *DatabaseProperties {
	this := DatabaseProperties{}

	this.Name = &name
	this.Owner = &owner

	return &this
}

// NewDatabasePropertiesWithDefaults instantiates a new DatabaseProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabasePropertiesWithDefaults() *DatabaseProperties {
	this := DatabaseProperties{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DatabaseProperties) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *DatabaseProperties) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *DatabaseProperties) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetOwner returns the Owner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DatabaseProperties) GetOwner() *string {
	if o == nil {
		return nil
	}

	return o.Owner

}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatabaseProperties) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Owner, true
}

// SetOwner sets field value
func (o *DatabaseProperties) SetOwner(v string) {

	o.Owner = &v

}

// HasOwner returns a boolean if a field has been set.
func (o *DatabaseProperties) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

func (o DatabaseProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}

	return json.Marshal(toSerialize)
}

type NullableDatabaseProperties struct {
	value *DatabaseProperties
	isSet bool
}

func (v NullableDatabaseProperties) Get() *DatabaseProperties {
	return v.value
}

func (v *NullableDatabaseProperties) Set(val *DatabaseProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseProperties(val *DatabaseProperties) *NullableDatabaseProperties {
	return &NullableDatabaseProperties{value: val, isSet: true}
}

func (v NullableDatabaseProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
